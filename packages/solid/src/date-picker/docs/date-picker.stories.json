{
  "Basic": "const Basic = () => (\n  <DatePicker>\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <DatePickerContent>\n          <DatePickerYearSelect />\n          <DatePickerMonthSelect />\n          <div>\n            <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n            <DatePickerViewTrigger>\n              <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n              <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n              <Show when={api().view === 'year'}>\n                {api().getDecade().start} - {api().getDecade().end}\n              </Show>\n            </DatePickerViewTrigger>\n            <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n          </div>\n          <Show when={api().view === 'day'}>\n            <DatePickerGrid>\n              <DatePickerRowHeader>\n                <For each={api().weekDays}>\n                  {(day) => (\n                    <DatePickerColumnHeader aria-label={day.long}>\n                      {day.narrow}\n                    </DatePickerColumnHeader>\n                  )}\n                </For>\n              </DatePickerRowHeader>\n              <DatePickerRowGroup>\n                <For each={api().weeks}>\n                  {(week) => (\n                    <DatePickerRow>\n                      <For each={week}>\n                        {(day) => (\n                          <DatePickerDayCell value={day}>\n                            <DatePickerDayCellTrigger>{day.day}</DatePickerDayCellTrigger>\n                          </DatePickerDayCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n          <Show when={api().view === 'month'}>\n            <DatePickerGrid>\n              <DatePickerRowGroup>\n                <For each={api().getMonthsGrid({ columns: 4, format: 'long' })}>\n                  {(months) => (\n                    <DatePickerRow>\n                      <For each={months}>\n                        {(month) => (\n                          <DatePickerMonthCell value={month.value}>\n                            <DatePickerMonthCellTrigger>{month.label}</DatePickerMonthCellTrigger>\n                          </DatePickerMonthCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n          <Show when={api().view === 'year'}>\n            <DatePickerGrid>\n              <DatePickerRowGroup>\n                <For each={api().getYearsGrid({ columns: 4 })}>\n                  {(years) => (\n                    <DatePickerRow>\n                      <For each={years}>\n                        {(year) => (\n                          <DatePickerYearCell value={year.value}>\n                            <DatePickerYearCellTrigger>{year.label}</DatePickerYearCellTrigger>\n                          </DatePickerYearCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n        </DatePickerContent>\n      </>\n    )}\n  </DatePicker>\n)",
  "RangeWithSingleGrid": "const RangeWithSingleGrid = () => (\n  <DatePicker selectionMode=\"range\">\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <DatePickerContent>\n          <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n            <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n            <DatePickerViewTrigger>\n              <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n            </DatePickerViewTrigger>\n            <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n          </div>\n          <DatePickerYearSelect />\n          <DatePickerMonthSelect />\n          <div>\n            <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n            <DatePickerViewTrigger>\n              <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n              <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n              <Show when={api().view === 'year'}>\n                {api().getDecade().start} - {api().getDecade().end}\n              </Show>\n            </DatePickerViewTrigger>\n            <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n          </div>\n          <Show when={api().view === 'day'}>\n            <DatePickerGrid>\n              <DatePickerRowHeader>\n                <For each={api().weekDays}>\n                  {(day) => (\n                    <DatePickerColumnHeader aria-label={day.long}>\n                      {day.narrow}\n                    </DatePickerColumnHeader>\n                  )}\n                </For>\n              </DatePickerRowHeader>\n              <DatePickerRowGroup>\n                <For each={api().weeks}>\n                  {(week) => (\n                    <DatePickerRow>\n                      <For each={week}>\n                        {(day) => (\n                          <DatePickerDayCell value={day}>\n                            <DatePickerDayCellTrigger>{day.day}</DatePickerDayCellTrigger>\n                          </DatePickerDayCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n          <Show when={api().view === 'month'}>\n            <DatePickerGrid>\n              <DatePickerRowGroup>\n                <For each={api().getMonthsGrid({ columns: 4, format: 'short' })}>\n                  {(months) => (\n                    <DatePickerRow>\n                      <For each={months}>\n                        {(month) => (\n                          <DatePickerMonthCell value={month.value}>\n                            <DatePickerMonthCellTrigger>{month.label}</DatePickerMonthCellTrigger>\n                          </DatePickerMonthCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n          <Show when={api().view === 'year'}>\n            <DatePickerGrid>\n              <DatePickerRowGroup>\n                <For each={api().getYearsGrid({ columns: 4 })}>\n                  {(years) => (\n                    <DatePickerRow>\n                      <For each={years}>\n                        {(year) => (\n                          <DatePickerYearCell value={year.value}>\n                            <DatePickerYearCellTrigger>{year.label}</DatePickerYearCellTrigger>\n                          </DatePickerYearCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </Show>\n        </DatePickerContent>\n      </>\n    )}\n  </DatePicker>\n)",
  "RangeWithTwoGrids": "const RangeWithTwoGrids = () => (\n  <DatePicker selectionMode=\"range\" numOfMonths={2}>\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <DatePickerContent>\n          <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n            <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n            <time>{api().visibleRangeText.start}</time>\n            <time>{api().visibleRangeText.end}</time>\n            <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n          </div>\n          <div style={{ display: 'flex', 'justify-content': 'space-between', gap: '24px' }}>\n            <DatePickerGrid>\n              <DatePickerRowHeader>\n                <For each={api().weekDays}>\n                  {(day) => (\n                    <DatePickerColumnHeader aria-label={day.long}>\n                      {day.narrow}\n                    </DatePickerColumnHeader>\n                  )}\n                </For>\n              </DatePickerRowHeader>\n              <DatePickerRowGroup>\n                <For each={api().weeks}>\n                  {(week) => (\n                    <DatePickerRow>\n                      <For each={week}>\n                        {(day) => (\n                          <DatePickerDayCell value={day}>\n                            <DatePickerDayCellTrigger>{day.day}</DatePickerDayCellTrigger>\n                          </DatePickerDayCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n\n            <DatePickerGrid>\n              <DatePickerRowHeader>\n                <For each={api().weekDays}>\n                  {(day) => (\n                    <DatePickerColumnHeader aria-label={day.long}>\n                      {day.narrow}\n                    </DatePickerColumnHeader>\n                  )}\n                </For>\n              </DatePickerRowHeader>\n              <DatePickerRowGroup>\n                <For each={api().getOffset(1).weeks}>\n                  {(week) => (\n                    <DatePickerRow>\n                      <For each={week}>\n                        {(day) => (\n                          <DatePickerDayCell value={day} offset={api().getOffset(1)}>\n                            <DatePickerDayCellTrigger>{day.day}</DatePickerDayCellTrigger>\n                          </DatePickerDayCell>\n                        )}\n                      </For>\n                    </DatePickerRow>\n                  )}\n                </For>\n              </DatePickerRowGroup>\n            </DatePickerGrid>\n          </div>\n        </DatePickerContent>\n      </>\n    )}\n  </DatePicker>\n)"
}
