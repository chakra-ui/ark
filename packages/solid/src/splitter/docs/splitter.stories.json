{
  "Basic": "const Basic = (props: Partial<SplitterProps>) => {\n  const [first, second] = [createUniqueId(), createUniqueId()]\n  return (\n    <>\n      <Splitter\n        size={[\n          { id: first, size: 50 },\n          { id: second, size: 50 },\n        ]}\n        {...props}\n      >\n        <SplitterPanel id={first}>\n          <p>{first}</p>\n        </SplitterPanel>\n        <SplitterResizeTrigger id={`${first}:${second}`}>\n          <div class=\"bar\" />\n        </SplitterResizeTrigger>\n        <SplitterPanel id={second}>{props.children ?? <p>{second}</p>}</SplitterPanel>\n      </Splitter>\n    </>\n  )\n}",
  "Nested": "const Nested = () => (\n  <div style={{ height: '100vh' }}>\n    <Basic orientation=\"vertical\">\n      <Basic>\n        <Basic orientation=\"vertical\" />\n      </Basic>\n    </Basic>\n  </div>\n)",
  "Controlled": "const Controlled = () => {\n  const [size, setSize] = createSignal([\n    { id: 'first', size: 50 },\n    { id: 'second', size: 50 },\n  ])\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <Splitter\n        size={size()}\n        onResizeEnd={(details) => {\n          setSize(\n            details.size.map((s) => ({\n              id: `${s.id}`,\n              size: s.size!,\n            })),\n          )\n        }}\n      >\n        <SplitterPanel id={'first'}>\n          <p>first</p>\n        </SplitterPanel>\n        <SplitterResizeTrigger id={`first:second`}>\n          <div class=\"bar\" />\n        </SplitterResizeTrigger>\n        <SplitterPanel id=\"second\">\n          <p>second</p>\n        </SplitterPanel>\n      </Splitter>\n    </div>\n  )\n}"
}
