{
  "ComboboxProps": {
    "allowCustomValue": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow custom values or free values in the input"
    },
    "ariaHidden": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to hide all elements besides the combobox parts. Useful for accessibility"
    },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to autofocus the input on mount"
    },
    "blurOnSelect": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to blur the input on select"
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is disabled"
    },
    "focusOnClear": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to return focus to the input on click the clear button"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the combobox."
    },
    "getRootNode": {
      "type": "() => Node | ShadowRoot | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  label: string\n  control: string\n  input: string\n  content: string\n  trigger: string\n  clearTrigger: string\n  option(id: string, index?: number | undefined): string\n  positioner: string\n  optionGroup(id: string | number): string\n  optionGroupLabel(id: string | number): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the combobox. Useful for composition."
    },
    "inputBehavior": {
      "type": "'none' | 'autocomplete' | 'autohighlight'",
      "isRequired": false,
      "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused option is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the option and the input is updated"
    },
    "inputValue": {
      "type": "string",
      "isRequired": false,
      "description": "The current value of the combobox's input"
    },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is required"
    },
    "isCustomValue": {
      "type": "(details: {\n  inputValue: string\n  previousValue: string | undefined\n}) => boolean",
      "isRequired": false,
      "description": "Function called to validate the input value"
    },
    "loop": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to loop the keyboard navigation through the options"
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The `name` attribute of the combobox's input. Useful for form submission"
    },
    "onClose": {
      "type": "() => void",
      "isRequired": false,
      "description": "Function called when the popup is closed"
    },
    "onFocusOutside": { "type": "(event: FocusOutsideEvent) => void", "isRequired": false },
    "onHighlight": {
      "type": "(\n  details: Partial<OptionData> & { relatedTarget: HTMLElement | null },\n) => void",
      "isRequired": false,
      "description": "Function called when an options is highlighted using the pointer\nor keyboard navigation."
    },
    "onInputChange": {
      "type": "(details: { value: string }) => void",
      "isRequired": false,
      "description": "Function called when the input's value changes"
    },
    "onInteractOutside": { "type": "(event: InteractOutsideEvent) => void", "isRequired": false },
    "onOpen": {
      "type": "() => void",
      "isRequired": false,
      "description": "Function called when the popup is opened"
    },
    "onPointerDownOutside": {
      "type": "(event: PointerDownOutsideEvent) => void",
      "isRequired": false
    },
    "onSelect": {
      "type": "(\n  details: Partial<OptionData> & { relatedTarget: HTMLElement | null },\n) => void",
      "isRequired": false,
      "description": "Function called when a new option is selected"
    },
    "openOnClick": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to open the combobox popup on initial click on the input"
    },
    "placeholder": {
      "type": "string",
      "isRequired": false,
      "description": "The placeholder text of the combobox's input"
    },
    "positioning": {
      "type": "PositioningOptions",
      "isRequired": false,
      "description": "The options used to dynamically position the menu"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
    },
    "selectionBehavior": {
      "type": "'set' | 'clear'",
      "isRequired": false,
      "description": "The behavior of the combobox when an option is selected"
    },
    "selectionData": {
      "type": "OptionData",
      "isRequired": false,
      "description": "The selected option's value"
    },
    "selectOnTab": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to select the focused option when the `Tab` key is pressed"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    }
  },
  "ComboboxOptionProps": {
    "label": {
      "type": "string",
      "isRequired": true,
      "description": "The label of the option. Used to populate the combobox's input when selected"
    },
    "value": {
      "type": "string",
      "isRequired": true,
      "description": "The actual value of the option"
    },
    "count": {
      "type": "number",
      "isRequired": false,
      "description": "The total count of options. Used to set the `aria-setsize` attribute"
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the option is disabled"
    },
    "index": {
      "type": "number",
      "isRequired": false,
      "description": "The index of the option. Used to set the `aria-posinset` attribute\nand allow options with same value"
    }
  },
  "ComboboxContentProps": {
    "lazyMount": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to enable lazy mounting. Defaults to `false`."
    },
    "onExitComplete": { "type": "() => void", "isRequired": false },
    "present": { "type": "boolean", "isRequired": false },
    "unmountOnExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to unmount on exit. Defaults to `false`."
    }
  },
  "ComboboxOptionGroupProps": { "id": { "type": "string", "isRequired": true } },
  "ComboboxOptionGroupLabelProps": { "htmlFor": { "type": "string", "isRequired": true } }
}
