{
  "NumberInputProps": {
    "allowMouseWheel": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow mouse wheel to change the value"
    },
    "allowOverflow": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow the value overflow the min/max range"
    },
    "clampValueOnBlur": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to clamp the value when the input loses focus (blur)"
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the number input is disabled."
    },
    "focusInputOnChange": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to focus input when the value changes"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the input element."
    },
    "format": {
      "type": "(value: string) => string | number",
      "isRequired": false,
      "description": "If using a custom display format, this converts the default format to the custom format."
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  label: string\n  input: string\n  incrementTrigger: string\n  decrementTrigger: string\n  scrubber: string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the number input. Useful for composition."
    },
    "inputMode": {
      "type": "'text' | 'numeric' | 'tel' | 'decimal'",
      "isRequired": false,
      "description": "Hints at the type of data that might be entered by the user. It also determines\nthe type of keyboard shown to the user on mobile devices"
    },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the number input value is invalid."
    },
    "max": {
      "type": "number",
      "isRequired": false,
      "description": "The maximum value of the number input"
    },
    "maxFractionDigits": {
      "type": "number",
      "isRequired": false,
      "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20;"
    },
    "min": {
      "type": "number",
      "isRequired": false,
      "description": "The minimum value of the number input"
    },
    "minFractionDigits": {
      "type": "number",
      "isRequired": false,
      "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20"
    },
    "modelValue": { "type": "string", "isRequired": false },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute of the number input. Useful for form submission."
    },
    "onBlur": {
      "type": "(details: Value) => void",
      "isRequired": false,
      "description": "The value of the input when it is blurred"
    },
    "onChange": {
      "type": "(details: Value) => void",
      "isRequired": false,
      "description": "Function invoked when the value changes"
    },
    "onFocus": {
      "type": "(details: Value & { srcElement: HTMLElement | null }) => void",
      "isRequired": false,
      "description": "Function invoked when the number input is focused"
    },
    "onInvalid": {
      "type": "(details: Value & { reason: ValidityState }) => void",
      "isRequired": false,
      "description": "Function invoked when the value overflows or underflows the min/max range"
    },
    "parse": {
      "type": "(value: string) => string",
      "isRequired": false,
      "description": "If using a custom display format, this converts the custom format to a format `parseFloat` understands."
    },
    "pattern": {
      "type": "string",
      "isRequired": false,
      "description": "The pattern used to check the <input> element's value against"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the number input is readonly"
    },
    "spinOnPress": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to spin the value when the increment/decrement button is pressed"
    },
    "step": {
      "type": "number",
      "isRequired": false,
      "description": "The amount to increment or decrement the value by"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "validateCharacter": {
      "type": "(char: string) => boolean",
      "isRequired": false,
      "description": "Whether the pressed key should be allowed in the input.\nThe default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/"
    },
    "value": { "type": "string", "isRequired": false, "description": "The value of the input" }
  }
}
