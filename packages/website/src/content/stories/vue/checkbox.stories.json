{
  "Basic": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst childCheckedItems = ref([false, false])\nconst parentChecked = computed({\n  get() {\n    return childCheckedItems.value.every(Boolean)\n      ? true\n      : childCheckedItems.value.some(Boolean)\n        ? 'indeterminate'\n        : false\n  },\n  set(val: CheckedState) {\n    if (val === 'indeterminate') return\n    childCheckedItems.value = childCheckedItems.value.map(() => val)\n  },\n})\n</script>\n\n<template>\n  <Checkbox.Root default-checked>\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control />\n  </Checkbox.Root>\n</template>\n",
  "Controlled": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst childCheckedItems = ref([false, false])\nconst parentChecked = computed({\n  get() {\n    return childCheckedItems.value.every(Boolean)\n      ? true\n      : childCheckedItems.value.some(Boolean)\n        ? 'indeterminate'\n        : false\n  },\n  set(val: CheckedState) {\n    if (val === 'indeterminate') return\n    childCheckedItems.value = childCheckedItems.value.map(() => val)\n  },\n})\n</script>\n\n<template>\n  <Checkbox.Root v-model:checked=\"checked\">\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control />\n  </Checkbox.Root>\n</template>\n",
  "Indeterminate": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst childCheckedItems = ref([false, false])\nconst parentChecked = computed({\n  get() {\n    return childCheckedItems.value.every(Boolean)\n      ? true\n      : childCheckedItems.value.some(Boolean)\n        ? 'indeterminate'\n        : false\n  },\n  set(val: CheckedState) {\n    if (val === 'indeterminate') return\n    childCheckedItems.value = childCheckedItems.value.map(() => val)\n  },\n})\n</script>\n\n<template>\n  <div style=\"padding-left: 20px; display: flex; flex-direction: column; gap: 4px\">\n    <Checkbox.Root v-model:checked=\"parentChecked\" v-slot=\"{ isChecked, isIndeterminate }\">\n      <Checkbox.Control>\n        <span v-if=\"isChecked\">✓</span>\n        <span v-if=\"isIndeterminate\">-</span>\n      </Checkbox.Control>\n      <Checkbox.Label> Parent Checkbox</Checkbox.Label>\n    </Checkbox.Root>\n    <div style=\"padding-left: 20px; display: flex; flex-direction: column; gap: 4px\">\n      <Checkbox.Root v-model:checked=\"childCheckedItems[0]\" v-slot=\"{ isChecked }\">\n        <Checkbox.Control>\n          <span v-if=\"isChecked\">✓</span>\n        </Checkbox.Control>\n        <Checkbox.Label> Child One Checkbox</Checkbox.Label>\n      </Checkbox.Root>\n      <Checkbox.Root v-model:checked=\"childCheckedItems[1]\" v-slot=\"{ isChecked }\">\n        <Checkbox.Control>\n          <span v-if=\"isChecked\">✓</span>\n        </Checkbox.Control>\n        <Checkbox.Label>Child Two Checkbox</Checkbox.Label>\n      </Checkbox.Root>\n    </div>\n  </div>\n</template>\n",
  "RenderProp": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst childCheckedItems = ref([false, false])\nconst parentChecked = computed({\n  get() {\n    return childCheckedItems.value.every(Boolean)\n      ? true\n      : childCheckedItems.value.some(Boolean)\n        ? 'indeterminate'\n        : false\n  },\n  set(val: CheckedState) {\n    if (val === 'indeterminate') return\n    childCheckedItems.value = childCheckedItems.value.map(() => val)\n  },\n})\n</script>\n\n<template>\n  <Checkbox.Root v-slot=\"{ isChecked, isIndeterminate }\">\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control>\n      <span v-if=\"isChecked\">✓</span>\n      <span v-if=\"isIndeterminate\">-</span>\n    </Checkbox.Control>\n  </Checkbox.Root>\n</template>\n"
}
