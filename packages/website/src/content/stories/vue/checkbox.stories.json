{
  "Basic": "<script setup lang=\"ts\">\nimport { reactive, ref, watch } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst parentChecked = ref<CheckedState>(false)\nconst childCheckedItems = reactive([false, false])\n\nwatch(childCheckedItems, (items) => {\n  parentChecked.value = items.every(Boolean)\n    ? true\n    : items.indexOf(true) < 0\n    ? false\n    : 'indeterminate'\n})\n\nwatch(parentChecked, (parentVal) => {\n  if (parentVal === 'indeterminate') return\n  childCheckedItems.map((_, idx) => {\n    childCheckedItems[idx] = parentVal\n  })\n  return\n})\n</script>\n\n<template>\n  <Checkbox.Root defaultChecked>\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control />\n  </Checkbox.Root>\n</template>\n",
  "Controlled": "<script setup lang=\"ts\">\nimport { reactive, ref, watch } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst parentChecked = ref<CheckedState>(false)\nconst childCheckedItems = reactive([false, false])\n\nwatch(childCheckedItems, (items) => {\n  parentChecked.value = items.every(Boolean)\n    ? true\n    : items.indexOf(true) < 0\n    ? false\n    : 'indeterminate'\n})\n\nwatch(parentChecked, (parentVal) => {\n  if (parentVal === 'indeterminate') return\n  childCheckedItems.map((_, idx) => {\n    childCheckedItems[idx] = parentVal\n  })\n  return\n})\n</script>\n\n<template>\n  <Checkbox.Root v-model=\"checked\">\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control />\n  </Checkbox.Root>\n</template>\n",
  "Indeterminate": "<script setup lang=\"ts\">\nimport { reactive, ref, watch } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst parentChecked = ref<CheckedState>(false)\nconst childCheckedItems = reactive([false, false])\n\nwatch(childCheckedItems, (items) => {\n  parentChecked.value = items.every(Boolean)\n    ? true\n    : items.indexOf(true) < 0\n    ? false\n    : 'indeterminate'\n})\n\nwatch(parentChecked, (parentVal) => {\n  if (parentVal === 'indeterminate') return\n  childCheckedItems.map((_, idx) => {\n    childCheckedItems[idx] = parentVal\n  })\n  return\n})\n</script>\n\n<template>\n  <div style=\"padding-left: 20px; display: flex; flex-direction: column; gap: 4px\">\n    <Checkbox.Root v-model=\"parentChecked\">\n      <Checkbox.Control data-testid=\"parent-control\">\n        <span v-if=\"parentChecked === true\">✓</span>\n        <span v-else-if=\"parentChecked === 'indeterminate'\">-</span>\n      </Checkbox.Control>\n      <Checkbox.Label> Parent Checkbox</Checkbox.Label>\n    </Checkbox.Root>\n    <div style=\"padding-left: 20px; display: flex; flex-direction: column; gap: 4px\">\n      <Checkbox.Root v-model=\"childCheckedItems[0]\">\n        <Checkbox.Control>\n          <span v-if=\"childCheckedItems[0]\">✓</span>\n        </Checkbox.Control>\n        <Checkbox.Label> Child One Checkbox</Checkbox.Label>\n      </Checkbox.Root>\n      <Checkbox.Root v-model=\"childCheckedItems[1]\">\n        <Checkbox.Control>\n          <span v-if=\"childCheckedItems[1]\">✓</span>\n        </Checkbox.Control>\n        <Checkbox.Label>Child Two Checkbox</Checkbox.Label>\n      </Checkbox.Root>\n    </div>\n  </div>\n</template>\n",
  "RenderProp": "<script setup lang=\"ts\">\nimport { reactive, ref, watch } from 'vue'\nimport { Checkbox, type CheckedState } from '@ark-ui/vue'\n\nconst checked = ref<CheckedState>(false)\nconst parentChecked = ref<CheckedState>(false)\nconst childCheckedItems = reactive([false, false])\n\nwatch(childCheckedItems, (items) => {\n  parentChecked.value = items.every(Boolean)\n    ? true\n    : items.indexOf(true) < 0\n    ? false\n    : 'indeterminate'\n})\n\nwatch(parentChecked, (parentVal) => {\n  if (parentVal === 'indeterminate') return\n  childCheckedItems.map((_, idx) => {\n    childCheckedItems[idx] = parentVal\n  })\n  return\n})\n</script>\n\n<template>\n  <Checkbox.Root v-slot=\"{ isChecked }\">\n    <Checkbox.Label>Checkbox</Checkbox.Label>\n    <Checkbox.Control>\n      <span v-if=\"isChecked\">✓</span>\n    </Checkbox.Control>\n  </Checkbox.Root>\n</template>\n"
}
