{
  "Basic": "import { DatePicker, Portal } from '@ark-ui/react'\n\nconst Basic = () => (\n  <DatePicker.Root>\n    {(api) => (\n      <>\n        <DatePicker.Control>\n          <span>View mode: {api.view}</span>\n          <DatePicker.Input />\n          <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n          <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n        </DatePicker.Control>\n        <Portal>\n          <DatePicker.Positioner>\n            <DatePicker.Content>\n              <DatePicker.YearSelect />\n              <DatePicker.MonthSelect />\n              <div>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <DatePicker.ViewTrigger>\n                  {api.view === 'day' && api.visibleRangeText.start}\n                  {api.view === 'month' && api.visibleRange.start.year}\n                  {api.view === 'year' && `${api.getDecade().start} - ${api.getDecade().end}`}\n                </DatePicker.ViewTrigger>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              {api.view === 'day' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    {api.weekDays.map((day, i) => (\n                      <DatePicker.ColumnHeader key={i} aria-label={day.long}>\n                        {day.narrow}\n                      </DatePicker.ColumnHeader>\n                    ))}\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    {api.weeks.map((week, id) => (\n                      <DatePicker.Row key={id}>\n                        {week.map((day, id) => (\n                          <DatePicker.DayCell key={id} value={day}>\n                            <DatePicker.DayCellTrigger>{day.day}</DatePicker.DayCellTrigger>\n                          </DatePicker.DayCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n              {api.view === 'month' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    {api.getMonthsGrid({ columns: 4, format: 'short' }).map((months, row) => (\n                      <DatePicker.Row key={row}>\n                        {months.map((month, index) => (\n                          <DatePicker.MonthCell key={index} value={month.value}>\n                            <DatePicker.MonthCellTrigger>{month.label}</DatePicker.MonthCellTrigger>\n                          </DatePicker.MonthCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n              {api.view === 'year' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    {api.getYearsGrid({ columns: 4 }).map((years, row) => (\n                      <DatePicker.Row key={row}>\n                        {years.map((year, index) => (\n                          <DatePicker.YearCell key={index} value={year.value}>\n                            <DatePicker.YearCellTrigger>{year.label}</DatePicker.YearCellTrigger>\n                          </DatePicker.YearCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n            </DatePicker.Content>\n          </DatePicker.Positioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker.Root>\n)\n",
  "RangeWithSingleGrid": "import { DatePicker, Portal } from '@ark-ui/react'\n\nconst RangeWithSingleGrid = () => (\n  <DatePicker.Root selectionMode=\"range\">\n    {(api) => (\n      <>\n        <DatePicker.Control>\n          <span>View mode: {api.view}</span>\n          <DatePicker.Input />\n          <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n          <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n        </DatePicker.Control>\n        <Portal>\n          <DatePicker.Positioner>\n            <DatePicker.Content>\n              <DatePicker.YearSelect />\n              <DatePicker.MonthSelect />\n              <div>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <DatePicker.ViewTrigger>\n                  {api.view === 'day' && api.visibleRangeText.start}\n                  {api.view === 'month' && api.visibleRange.start.year}\n                  {api.view === 'year' && `${api.getDecade().start} - ${api.getDecade().end}`}\n                </DatePicker.ViewTrigger>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              {api.view === 'day' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    {api.weekDays.map((day, i) => (\n                      <DatePicker.ColumnHeader key={i} aria-label={day.long}>\n                        {day.narrow}\n                      </DatePicker.ColumnHeader>\n                    ))}\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    {api.weeks.map((week, id) => (\n                      <DatePicker.Row key={id}>\n                        {week.map((day, id) => (\n                          <DatePicker.DayCell key={id} value={day}>\n                            <DatePicker.DayCellTrigger>{day.day}</DatePicker.DayCellTrigger>\n                          </DatePicker.DayCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n              {api.view === 'month' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    {api.getMonthsGrid({ columns: 4, format: 'short' }).map((months, row) => (\n                      <DatePicker.Row key={row}>\n                        {months.map((month, index) => (\n                          <DatePicker.MonthCell key={index} value={month.value}>\n                            <DatePicker.MonthCellTrigger>{month.label}</DatePicker.MonthCellTrigger>\n                          </DatePicker.MonthCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n              {api.view === 'year' && (\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    {api.getYearsGrid({ columns: 4 }).map((years, row) => (\n                      <DatePicker.Row key={row}>\n                        {years.map((year, index) => (\n                          <DatePicker.YearCell key={index} value={year.value}>\n                            <DatePicker.YearCellTrigger>{year.label}</DatePicker.YearCellTrigger>\n                          </DatePicker.YearCell>\n                        ))}\n                      </DatePicker.Row>\n                    ))}\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              )}\n            </DatePicker.Content>\n          </DatePicker.Positioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker.Root>\n)\n",
  "RangeWithTwoGrids": "import { DatePicker, Portal } from '@ark-ui/react'\n\nconst RangeWithTwoGrids = () => (\n  <DatePicker.Root selectionMode=\"range\" numOfMonths={2}>\n    {(api) => {\n      const offset = api.getOffset(1)\n      return (\n        <>\n          <DatePicker.Control>\n            <span>View mode: {api.view}</span>\n            <DatePicker.Input />\n            <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n            <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n          </DatePicker.Control>\n          <Portal>\n            <DatePicker.Positioner>\n              <DatePicker.Content>\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                  <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                  <time>{api.visibleRangeText.start}</time>\n                  <time>{api.visibleRangeText.end}</time>\n                  <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n                </div>\n                <div style={{ display: 'flex', justifyContent: 'space-between', gap: '24px' }}>\n                  <DatePicker.Grid>\n                    <DatePicker.RowHeader>\n                      {api.weekDays.map((day, i) => (\n                        <DatePicker.ColumnHeader key={i} aria-label={day.long}>\n                          {day.narrow}\n                        </DatePicker.ColumnHeader>\n                      ))}\n                    </DatePicker.RowHeader>\n                    <DatePicker.RowGroup>\n                      {api.weeks.map((week, id) => (\n                        <DatePicker.Row key={id}>\n                          {week.map((day, id) => (\n                            <DatePicker.DayCell key={id} value={day}>\n                              <DatePicker.DayCellTrigger>{day.day}</DatePicker.DayCellTrigger>\n                            </DatePicker.DayCell>\n                          ))}\n                        </DatePicker.Row>\n                      ))}\n                    </DatePicker.RowGroup>\n                  </DatePicker.Grid>\n\n                  <DatePicker.Grid>\n                    <DatePicker.RowHeader>\n                      {api.weekDays.map((day, i) => (\n                        <DatePicker.ColumnHeader key={i} aria-label={day.long}>\n                          {day.narrow}\n                        </DatePicker.ColumnHeader>\n                      ))}\n                    </DatePicker.RowHeader>\n                    <DatePicker.RowGroup>\n                      {offset.weeks.map((week, id) => (\n                        <DatePicker.Row key={id}>\n                          {week.map((day, id) => (\n                            <DatePicker.DayCell key={id} value={day} offset={offset}>\n                              <DatePicker.DayCellTrigger>{day.day}</DatePicker.DayCellTrigger>\n                            </DatePicker.DayCell>\n                          ))}\n                        </DatePicker.Row>\n                      ))}\n                    </DatePicker.RowGroup>\n                  </DatePicker.Grid>\n                </div>\n              </DatePicker.Content>\n            </DatePicker.Positioner>\n          </Portal>\n        </>\n      )\n    }}\n  </DatePicker.Root>\n)\n"
}
