{
  "Basic": "import { PinInput } from '@ark-ui/react'\n\nconst Basic = () => (\n  <PinInput.Root onValueComplete={(e) => alert(e.valueAsString)}>\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n",
  "InitialValue": "import { PinInput } from '@ark-ui/react'\n\nconst InitialValue = () => (\n  <PinInput.Root defaultValue={['1', '2', '3']}>\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n",
  "Customized": "import { PinInput } from '@ark-ui/react'\n\nconst Customized = () => (\n  <PinInput.Root placeholder=\"*\">\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n",
  "Blurred": "import { PinInput } from '@ark-ui/react'\n\nconst Blurred = () => (\n  <PinInput.Root blurOnComplete>\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n",
  "OTPMode": "import { PinInput } from '@ark-ui/react'\n\nconst OTPMode = () => (\n  <PinInput.Root otp>\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n",
  "WithMask": "import { PinInput } from '@ark-ui/react'\n\nconst WithMask = () => (\n  <PinInput.Root mask>\n    <PinInput.Label>Label</PinInput.Label>\n    <PinInput.Control>\n      {[0, 1, 2].map((id, index) => (\n        <PinInput.Input key={id} index={index} />\n      ))}\n    </PinInput.Control>\n  </PinInput.Root>\n)\n"
}
