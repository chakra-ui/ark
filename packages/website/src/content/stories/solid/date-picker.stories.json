{
  "Basic": "import { DatePicker } from '@ark-ui/solid'\nimport { Index, Show } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst Basic = () => (\n  <DatePicker.Root>\n    {(api) => (\n      <>\n        <DatePicker.Control>\n          <span>View mode: {api().view}</span>\n          <DatePicker.Input />\n          <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n          <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n        </DatePicker.Control>\n        <Portal>\n          <DatePicker.Positioner>\n            <DatePicker.Content>\n              <DatePicker.YearSelect />\n              <DatePicker.MonthSelect />\n              <div>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <DatePicker.ViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                  <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n                  <Show when={api().view === 'year'}>\n                    {api().getDecade().start} - {api().getDecade().end}\n                  </Show>\n                </DatePicker.ViewTrigger>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              <Show when={api().view === 'day'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePicker.ColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePicker.ColumnHeader>\n                      )}\n                    </Index>\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => (\n                        <DatePicker.Row>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePicker.DayCell value={day()}>\n                                <DatePicker.DayCellTrigger>{day().day}</DatePicker.DayCellTrigger>\n                              </DatePicker.DayCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n              <Show when={api().view === 'month'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    <Index each={api().getMonthsGrid({ columns: 4, format: 'long' })}>\n                      {(months) => (\n                        <DatePicker.Row>\n                          <Index each={months()}>\n                            {(month) => (\n                              <DatePicker.MonthCell value={month().value}>\n                                <DatePicker.MonthCellTrigger>\n                                  {month().label}\n                                </DatePicker.MonthCellTrigger>\n                              </DatePicker.MonthCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n              <Show when={api().view === 'year'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    <Index each={api().getYearsGrid({ columns: 4 })}>\n                      {(years) => (\n                        <DatePicker.Row>\n                          <Index each={years()}>\n                            {(year) => (\n                              <DatePicker.YearCell value={year().value}>\n                                <DatePicker.YearCellTrigger>\n                                  {year().label}\n                                </DatePicker.YearCellTrigger>\n                              </DatePicker.YearCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n            </DatePicker.Content>\n          </DatePicker.Positioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker.Root>\n)\n",
  "RangeWithSingleGrid": "import { DatePicker } from '@ark-ui/solid'\nimport { Index, Show } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst RangeWithSingleGrid = () => (\n  <DatePicker.Root selectionMode=\"range\">\n    {(api) => (\n      <>\n        <DatePicker.Control>\n          <span>View mode: {api().view}</span>\n          <DatePicker.Input />\n          <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n          <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n        </DatePicker.Control>\n        <Portal>\n          <DatePicker.Positioner>\n            <DatePicker.Content>\n              <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <DatePicker.ViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                </DatePicker.ViewTrigger>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              <DatePicker.YearSelect />\n              <DatePicker.MonthSelect />\n              <div>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <DatePicker.ViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                  <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n                  <Show when={api().view === 'year'}>\n                    {api().getDecade().start} - {api().getDecade().end}\n                  </Show>\n                </DatePicker.ViewTrigger>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              <Show when={api().view === 'day'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePicker.ColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePicker.ColumnHeader>\n                      )}\n                    </Index>\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => (\n                        <DatePicker.Row>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePicker.DayCell value={day()}>\n                                <DatePicker.DayCellTrigger>{day().day}</DatePicker.DayCellTrigger>\n                              </DatePicker.DayCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n              <Show when={api().view === 'month'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    <Index each={api().getMonthsGrid({ columns: 4, format: 'short' })}>\n                      {(months) => (\n                        <DatePicker.Row>\n                          <Index each={months()}>\n                            {(month) => (\n                              <DatePicker.MonthCell value={month().value}>\n                                <DatePicker.MonthCellTrigger>\n                                  {month().label}\n                                </DatePicker.MonthCellTrigger>\n                              </DatePicker.MonthCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n              <Show when={api().view === 'year'}>\n                <DatePicker.Grid>\n                  <DatePicker.RowGroup>\n                    <Index each={api().getYearsGrid({ columns: 4 })}>\n                      {(years) => (\n                        <DatePicker.Row>\n                          <Index each={years()}>\n                            {(year) => (\n                              <DatePicker.YearCell value={year().value}>\n                                <DatePicker.YearCellTrigger>\n                                  {year().label}\n                                </DatePicker.YearCellTrigger>\n                              </DatePicker.YearCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </Show>\n            </DatePicker.Content>\n          </DatePicker.Positioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker.Root>\n)\n",
  "RangeWithTwoGrids": "import { DatePicker } from '@ark-ui/solid'\nimport { Index } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst RangeWithTwoGrids = () => (\n  <DatePicker.Root selectionMode=\"range\" numOfMonths={2}>\n    {(api) => (\n      <>\n        <DatePicker.Control>\n          <span>View mode: {api().view}</span>\n          <DatePicker.Input />\n          <DatePicker.Trigger>ðŸ—“</DatePicker.Trigger>\n          <DatePicker.ClearTrigger>Clear</DatePicker.ClearTrigger>\n        </DatePicker.Control>\n        <Portal>\n          <DatePicker.Positioner>\n            <DatePicker.Content>\n              <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n                <DatePicker.PrevTrigger>Prev</DatePicker.PrevTrigger>\n                <time>{api().visibleRangeText.start}</time>\n                <time>{api().visibleRangeText.end}</time>\n                <DatePicker.NextTrigger>Next</DatePicker.NextTrigger>\n              </div>\n              <div style={{ display: 'flex', 'justify-content': 'space-between', gap: '24px' }}>\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePicker.ColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePicker.ColumnHeader>\n                      )}\n                    </Index>\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => {\n                        return (\n                          <DatePicker.Row>\n                            <Index each={week()}>\n                              {(day) => (\n                                <DatePicker.DayCell value={day()}>\n                                  <DatePicker.DayCellTrigger>{day().day}</DatePicker.DayCellTrigger>\n                                </DatePicker.DayCell>\n                              )}\n                            </Index>\n                          </DatePicker.Row>\n                        )\n                      }}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n\n                <DatePicker.Grid>\n                  <DatePicker.RowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePicker.ColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePicker.ColumnHeader>\n                      )}\n                    </Index>\n                  </DatePicker.RowHeader>\n                  <DatePicker.RowGroup>\n                    <Index each={api().getOffset(1).weeks}>\n                      {(week) => (\n                        <DatePicker.Row>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePicker.DayCell value={day()} offset={api().getOffset(1)}>\n                                <DatePicker.DayCellTrigger>{day().day}</DatePicker.DayCellTrigger>\n                              </DatePicker.DayCell>\n                            )}\n                          </Index>\n                        </DatePicker.Row>\n                      )}\n                    </Index>\n                  </DatePicker.RowGroup>\n                </DatePicker.Grid>\n              </div>\n            </DatePicker.Content>\n          </DatePicker.Positioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker.Root>\n)\n"
}
