{
  "Basic": "import {\n  DatePicker,\n  DatePickerClearTrigger,\n  DatePickerColumnHeader,\n  DatePickerContent,\n  DatePickerControl,\n  DatePickerDayCell,\n  DatePickerDayCellTrigger,\n  DatePickerGrid,\n  DatePickerInput,\n  DatePickerMonthCell,\n  DatePickerMonthCellTrigger,\n  DatePickerMonthSelect,\n  DatePickerNextTrigger,\n  DatePickerPositioner,\n  DatePickerPrevTrigger,\n  DatePickerRow,\n  DatePickerRowGroup,\n  DatePickerRowHeader,\n  DatePickerTrigger,\n  DatePickerViewTrigger,\n  DatePickerYearCell,\n  DatePickerYearCellTrigger,\n  DatePickerYearSelect,\n} from '@ark-ui/solid'\nimport { Index, Show } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst Basic = () => (\n  <DatePicker>\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <Portal>\n          <DatePickerPositioner>\n            <DatePickerContent>\n              <DatePickerYearSelect />\n              <DatePickerMonthSelect />\n              <div>\n                <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n                <DatePickerViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                  <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n                  <Show when={api().view === 'year'}>\n                    {api().getDecade().start} - {api().getDecade().end}\n                  </Show>\n                </DatePickerViewTrigger>\n                <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n              </div>\n              <Show when={api().view === 'day'}>\n                <DatePickerGrid>\n                  <DatePickerRowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePickerColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePickerColumnHeader>\n                      )}\n                    </Index>\n                  </DatePickerRowHeader>\n                  <DatePickerRowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => (\n                        <DatePickerRow>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePickerDayCell value={day()}>\n                                <DatePickerDayCellTrigger>{day().day}</DatePickerDayCellTrigger>\n                              </DatePickerDayCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n              <Show when={api().view === 'month'}>\n                <DatePickerGrid>\n                  <DatePickerRowGroup>\n                    <Index each={api().getMonthsGrid({ columns: 4, format: 'long' })}>\n                      {(months) => (\n                        <DatePickerRow>\n                          <Index each={months()}>\n                            {(month) => (\n                              <DatePickerMonthCell value={month().value}>\n                                <DatePickerMonthCellTrigger>\n                                  {month().label}\n                                </DatePickerMonthCellTrigger>\n                              </DatePickerMonthCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n              <Show when={api().view === 'year'}>\n                <DatePickerGrid>\n                  <DatePickerRowGroup>\n                    <Index each={api().getYearsGrid({ columns: 4 })}>\n                      {(years) => (\n                        <DatePickerRow>\n                          <Index each={years()}>\n                            {(year) => (\n                              <DatePickerYearCell value={year().value}>\n                                <DatePickerYearCellTrigger>\n                                  {year().label}\n                                </DatePickerYearCellTrigger>\n                              </DatePickerYearCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n            </DatePickerContent>\n          </DatePickerPositioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker>\n)\n",
  "RangeWithSingleGrid": "import {\n  DatePicker,\n  DatePickerClearTrigger,\n  DatePickerColumnHeader,\n  DatePickerContent,\n  DatePickerControl,\n  DatePickerDayCell,\n  DatePickerDayCellTrigger,\n  DatePickerGrid,\n  DatePickerInput,\n  DatePickerMonthCell,\n  DatePickerMonthCellTrigger,\n  DatePickerMonthSelect,\n  DatePickerNextTrigger,\n  DatePickerPositioner,\n  DatePickerPrevTrigger,\n  DatePickerRow,\n  DatePickerRowGroup,\n  DatePickerRowHeader,\n  DatePickerTrigger,\n  DatePickerViewTrigger,\n  DatePickerYearCell,\n  DatePickerYearCellTrigger,\n  DatePickerYearSelect,\n} from '@ark-ui/solid'\nimport { Index, Show } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst RangeWithSingleGrid = () => (\n  <DatePicker selectionMode=\"range\">\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <Portal>\n          <DatePickerPositioner>\n            <DatePickerContent>\n              <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n                <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n                <DatePickerViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                </DatePickerViewTrigger>\n                <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n              </div>\n              <DatePickerYearSelect />\n              <DatePickerMonthSelect />\n              <div>\n                <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n                <DatePickerViewTrigger>\n                  <Show when={api().view === 'day'}>{api().visibleRangeText.start}</Show>\n                  <Show when={api().view === 'month'}>{api().visibleRange.start.year}</Show>\n                  <Show when={api().view === 'year'}>\n                    {api().getDecade().start} - {api().getDecade().end}\n                  </Show>\n                </DatePickerViewTrigger>\n                <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n              </div>\n              <Show when={api().view === 'day'}>\n                <DatePickerGrid>\n                  <DatePickerRowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePickerColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePickerColumnHeader>\n                      )}\n                    </Index>\n                  </DatePickerRowHeader>\n                  <DatePickerRowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => (\n                        <DatePickerRow>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePickerDayCell value={day()}>\n                                <DatePickerDayCellTrigger>{day().day}</DatePickerDayCellTrigger>\n                              </DatePickerDayCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n              <Show when={api().view === 'month'}>\n                <DatePickerGrid>\n                  <DatePickerRowGroup>\n                    <Index each={api().getMonthsGrid({ columns: 4, format: 'short' })}>\n                      {(months) => (\n                        <DatePickerRow>\n                          <Index each={months()}>\n                            {(month) => (\n                              <DatePickerMonthCell value={month().value}>\n                                <DatePickerMonthCellTrigger>\n                                  {month().label}\n                                </DatePickerMonthCellTrigger>\n                              </DatePickerMonthCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n              <Show when={api().view === 'year'}>\n                <DatePickerGrid>\n                  <DatePickerRowGroup>\n                    <Index each={api().getYearsGrid({ columns: 4 })}>\n                      {(years) => (\n                        <DatePickerRow>\n                          <Index each={years()}>\n                            {(year) => (\n                              <DatePickerYearCell value={year().value}>\n                                <DatePickerYearCellTrigger>\n                                  {year().label}\n                                </DatePickerYearCellTrigger>\n                              </DatePickerYearCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </Show>\n            </DatePickerContent>\n          </DatePickerPositioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker>\n)\n",
  "RangeWithTwoGrids": "import {\n  DatePicker,\n  DatePickerClearTrigger,\n  DatePickerColumnHeader,\n  DatePickerContent,\n  DatePickerControl,\n  DatePickerDayCell,\n  DatePickerDayCellTrigger,\n  DatePickerGrid,\n  DatePickerInput,\n  DatePickerNextTrigger,\n  DatePickerPositioner,\n  DatePickerPrevTrigger,\n  DatePickerRow,\n  DatePickerRowGroup,\n  DatePickerRowHeader,\n  DatePickerTrigger,\n} from '@ark-ui/solid'\nimport { Index } from 'solid-js'\nimport { Portal } from 'solid-js/web'\n\nconst RangeWithTwoGrids = () => (\n  <DatePicker selectionMode=\"range\" numOfMonths={2}>\n    {(api) => (\n      <>\n        <DatePickerControl>\n          <span>View mode: {api().view}</span>\n          <DatePickerInput />\n          <DatePickerTrigger>ðŸ—“</DatePickerTrigger>\n          <DatePickerClearTrigger>Clear</DatePickerClearTrigger>\n        </DatePickerControl>\n        <Portal>\n          <DatePickerPositioner>\n            <DatePickerContent>\n              <div style={{ display: 'flex', 'justify-content': 'space-between' }}>\n                <DatePickerPrevTrigger>Prev</DatePickerPrevTrigger>\n                <time>{api().visibleRangeText.start}</time>\n                <time>{api().visibleRangeText.end}</time>\n                <DatePickerNextTrigger>Next</DatePickerNextTrigger>\n              </div>\n              <div style={{ display: 'flex', 'justify-content': 'space-between', gap: '24px' }}>\n                <DatePickerGrid>\n                  <DatePickerRowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePickerColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePickerColumnHeader>\n                      )}\n                    </Index>\n                  </DatePickerRowHeader>\n                  <DatePickerRowGroup>\n                    <Index each={api().weeks}>\n                      {(week) => {\n                        return (\n                          <DatePickerRow>\n                            <Index each={week()}>\n                              {(day) => (\n                                <DatePickerDayCell value={day()}>\n                                  <DatePickerDayCellTrigger>{day().day}</DatePickerDayCellTrigger>\n                                </DatePickerDayCell>\n                              )}\n                            </Index>\n                          </DatePickerRow>\n                        )\n                      }}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n\n                <DatePickerGrid>\n                  <DatePickerRowHeader>\n                    <Index each={api().weekDays}>\n                      {(day) => (\n                        <DatePickerColumnHeader aria-label={day().long}>\n                          {day().narrow}\n                        </DatePickerColumnHeader>\n                      )}\n                    </Index>\n                  </DatePickerRowHeader>\n                  <DatePickerRowGroup>\n                    <Index each={api().getOffset(1).weeks}>\n                      {(week) => (\n                        <DatePickerRow>\n                          <Index each={week()}>\n                            {(day) => (\n                              <DatePickerDayCell value={day()} offset={api().getOffset(1)}>\n                                <DatePickerDayCellTrigger>{day().day}</DatePickerDayCellTrigger>\n                              </DatePickerDayCell>\n                            )}\n                          </Index>\n                        </DatePickerRow>\n                      )}\n                    </Index>\n                  </DatePickerRowGroup>\n                </DatePickerGrid>\n              </div>\n            </DatePickerContent>\n          </DatePickerPositioner>\n        </Portal>\n      </>\n    )}\n  </DatePicker>\n)\n"
}
