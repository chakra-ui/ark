{
  "Item": {
    "asChild": { "type": "boolean", "isRequired": false },
    "item": { "type": "any", "isRequired": false }
  },
  "Root": {
    "items": {
      "type": "T[] | readonly T[]",
      "isRequired": true,
      "description": "The options of the select"
    },
    "allowCustomValue": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow custom values or free values in the input"
    },
    "asChild": { "type": "boolean", "isRequired": false },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to autofocus the input on mount"
    },
    "closeOnSelect": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to close the combobox when an item is selected."
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "defaultValue": "\"ltr\"",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is disabled"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the combobox."
    },
    "getRootNode": {
      "type": "() => Node | ShadowRoot | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "highlightedValue": {
      "type": "string",
      "isRequired": false,
      "description": "The active item's id. Used to set the `aria-activedescendant` attribute"
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  label: string\n  control: string\n  input: string\n  content: string\n  trigger: string\n  clearTrigger: string\n  item(id: string, index?: number | undefined): string\n  positioner: string\n  itemGroup(id: string | number): string\n  itemGroupLabel(id: string | number): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the combobox. Useful for composition."
    },
    "inputBehavior": {
      "type": "'none' | 'autocomplete' | 'autohighlight'",
      "isRequired": false,
      "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused item is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the item and the input is updated"
    },
    "inputValue": {
      "type": "string",
      "isRequired": false,
      "description": "The current value of the combobox's input"
    },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is required"
    },
    "isItemDisabled": {
      "type": "(item: T) => boolean",
      "isRequired": false,
      "description": "Whether the item is disabled"
    },
    "itemToString": {
      "type": "(item: T) => string",
      "isRequired": false,
      "description": "The label of the item"
    },
    "itemToValue": {
      "type": "(item: T) => string",
      "isRequired": false,
      "description": "The value of the item"
    },
    "lazyMount": {
      "type": "boolean",
      "defaultValue": "false",
      "isRequired": false,
      "description": "Whether to enable lazy mounting"
    },
    "loop": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to loop the keyboard navigation through the items"
    },
    "modelValue": { "type": "string[]", "isRequired": false },
    "multiple": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow multiple selection"
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The `name` attribute of the combobox's input. Useful for form submission"
    },
    "onExitComplete": {
      "type": "() => void",
      "isRequired": false,
      "description": "Function called when the animation ends in the closed state."
    },
    "onFocusOutside": {
      "type": "(event: FocusOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the focus is moved outside the component"
    },
    "onHighlightChange": {
      "type": "(details: HighlightChangeDetails<T>) => void",
      "isRequired": false,
      "description": "Function called when an item is highlighted using the pointer\nor keyboard navigation."
    },
    "onInputValueChange": {
      "type": "(details: InputValueChangeDetails) => void",
      "isRequired": false,
      "description": "Function called when the input's value changes"
    },
    "onInteractOutside": {
      "type": "(event: InteractOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when an interaction happens outside the component"
    },
    "onOpenChange": {
      "type": "(details: OpenChangeDetails) => void",
      "isRequired": false,
      "description": "Function called when the popup is opened"
    },
    "onPointerDownOutside": {
      "type": "(event: PointerDownOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the pointer is pressed down outside the component"
    },
    "onValueChange": {
      "type": "(details: ValueChangeDetails<T>) => void",
      "isRequired": false,
      "description": "Function called when a new item is selected"
    },
    "openOnClick": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to open the combobox popup on initial click on the input"
    },
    "placeholder": {
      "type": "string",
      "isRequired": false,
      "description": "The placeholder text of the combobox's input"
    },
    "positioning": {
      "type": "PositioningOptions",
      "isRequired": false,
      "description": "The positioning options to dynamically position the menu"
    },
    "present": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the node is present (controlled by the user)"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
    },
    "selectionBehavior": {
      "type": "'replace' | 'clear' | 'preserve'",
      "isRequired": false,
      "description": "The behavior of the combobox input when an item is selected\n\n- `replace`: The selected item string is set as the input value\n- `clear`: The input value is cleared\n- `preserve`: The input value is preserved"
    },
    "selectOnBlur": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to select the higlighted item on interaction outside the combobox"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "unmountOnExit": {
      "type": "boolean",
      "defaultValue": "false",
      "isRequired": false,
      "description": "Whether to unmount on exit."
    },
    "value": {
      "type": "string[]",
      "isRequired": false,
      "description": "The keys of the selected items"
    }
  },
  "Input": { "asChild": { "type": "boolean", "isRequired": false } },
  "Label": { "asChild": { "type": "boolean", "isRequired": false } },
  "Content": {
    "asChild": { "type": "boolean", "isRequired": false },
    "lazyMount": {
      "type": "boolean",
      "defaultValue": "false",
      "isRequired": false,
      "description": "Whether to enable lazy mounting"
    },
    "onExitComplete": {
      "type": "() => void",
      "isRequired": false,
      "description": "Function called when the animation ends in the closed state."
    },
    "present": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the node is present (controlled by the user)"
    },
    "unmountOnExit": {
      "type": "boolean",
      "defaultValue": "false",
      "isRequired": false,
      "description": "Whether to unmount on exit."
    }
  },
  "Control": { "asChild": { "type": "boolean", "isRequired": false } },
  "Trigger": { "asChild": { "type": "boolean", "isRequired": false } },
  "ItemText": { "asChild": { "type": "boolean", "isRequired": false } },
  "ItemGroup": {
    "id": { "type": "string", "isRequired": true },
    "asChild": { "type": "boolean", "isRequired": false }
  },
  "Positioner": { "asChild": { "type": "boolean", "isRequired": false } },
  "ClearTrigger": { "asChild": { "type": "boolean", "isRequired": false } },
  "ItemIndicator": { "asChild": { "type": "boolean", "isRequired": false } },
  "ItemGroupLabel": {
    "htmlFor": { "type": "string", "isRequired": true },
    "asChild": { "type": "boolean", "isRequired": false }
  }
}
