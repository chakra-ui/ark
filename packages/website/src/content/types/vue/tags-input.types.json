{
  "TagProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "TagInputProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "TagsInputProps": {
    "addOnPaste": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to add a tag when you paste values into the tag input"
    },
    "allowEditTag": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether a tag can be edited after creation.\nIf `true` and focus is on a tag, pressing `Enter`or double clicking will edit the tag."
    },
    "allowOverflow": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
    },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the input should be auto-focused"
    },
    "blurBehavior": {
      "type": "'clear' | 'add'",
      "isRequired": false,
      "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"none\"`: do nothing\n- `\"clear\"`: clear the input value"
    },
    "delimiter": {
      "type": "string",
      "isRequired": false,
      "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be disabled"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the underlying input element."
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  input: string\n  clearBtn: string\n  label: string\n  control: string\n  tag(opts: TagProps): string\n  tagDeleteTrigger(opts: TagProps): string\n  tagInput(opts: TagProps): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the tags input. Useful for composition."
    },
    "inputValue": { "type": "string", "isRequired": false, "description": "The tag input's value" },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input is invalid"
    },
    "max": { "type": "number", "isRequired": false, "description": "The max number of tags" },
    "maxLength": {
      "type": "number",
      "isRequired": false,
      "description": "The max length of the input."
    },
    "modelValue": { "type": "string[]", "isRequired": false },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute for the input. Useful for form submissions"
    },
    "onFocusOutside": {
      "type": "(event: FocusOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the focus is moved outside the combobox"
    },
    "onHighlightChange": {
      "type": "(details: HighlightChangeDetails) => void",
      "isRequired": false,
      "description": "Callback fired when a tag is highlighted by pointer or keyboard navigation"
    },
    "onInteractOutside": {
      "type": "(event: InteractOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when an interaction happens outside the combobox"
    },
    "onPointerDownOutside": {
      "type": "(event: PointerDownOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the pointer is pressed down outside the combobox"
    },
    "onValueChange": {
      "type": "(details: ValueChangeDetails) => void",
      "isRequired": false,
      "description": "Callback fired when the tag values is updated"
    },
    "onValueInvalid": {
      "type": "(details: ValidityChangeDetails) => void",
      "isRequired": false,
      "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be read-only"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "validate": {
      "type": "(details: ValidateArgs) => boolean",
      "isRequired": false,
      "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
    },
    "value": { "type": "string[]", "isRequired": false, "description": "The tag values" }
  },
  "TagsInputContext": {
    "addValue": {
      "type": "(value: string) => void",
      "isRequired": true,
      "description": "Function to add a tag to the tags."
    },
    "clearInputValue": {
      "type": "() => void",
      "isRequired": true,
      "description": "Function to clear the value of the tags entry input."
    },
    "clearTriggerProps": { "type": "ButtonHTMLAttributes & ReservedProps", "isRequired": true },
    "clearValue": {
      "type": "(id?: string | undefined) => void",
      "isRequired": true,
      "description": "Function to clear the value of the tags."
    },
    "controlProps": { "type": "Attrs<HTMLAttributes>", "isRequired": true },
    "count": { "type": "number", "isRequired": true, "description": "The number of the tags." },
    "focus": {
      "type": "() => void",
      "isRequired": true,
      "description": "Function to focus the tags entry input."
    },
    "getTagDeleteTriggerProps": {
      "type": "(options: TagProps) => ButtonHTMLAttributes & ReservedProps",
      "isRequired": true
    },
    "getTagInputProps": {
      "type": "(options: TagProps) => InputHTMLAttributes & ReservedProps",
      "isRequired": true
    },
    "getTagProps": { "type": "(options: TagProps) => Attrs<HTMLAttributes>", "isRequired": true },
    "getTagState": {
      "type": "(props: TagProps) => TagState",
      "isRequired": true,
      "description": "Returns the state of a tag"
    },
    "hiddenInputProps": { "type": "InputHTMLAttributes & ReservedProps", "isRequired": true },
    "inputProps": { "type": "InputHTMLAttributes & ReservedProps", "isRequired": true },
    "inputValue": {
      "type": "string",
      "isRequired": true,
      "description": "The value of the tags entry input."
    },
    "isAtMax": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether the tags have reached the max limit."
    },
    "isEmpty": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether the tags are empty"
    },
    "labelProps": { "type": "LabelHTMLAttributes & ReservedProps", "isRequired": true },
    "rootProps": { "type": "Attrs<HTMLAttributes>", "isRequired": true },
    "setInputValue": {
      "type": "(value: string) => void",
      "isRequired": true,
      "description": "Function to set the value of the tags entry input."
    },
    "setValue": {
      "type": "(value: string[]) => void",
      "isRequired": true,
      "description": "Function to set the value of the tags."
    },
    "setValueAtIndex": {
      "type": "(index: number, value: string) => void",
      "isRequired": true,
      "description": "Function to set the value of a tag at the given index."
    },
    "value": {
      "type": "string[]",
      "isRequired": true,
      "description": "The value of the tags as an array of strings."
    },
    "valueAsString": {
      "type": "string",
      "isRequired": true,
      "description": "The value of the tags as a string."
    }
  },
  "TagDeleteTriggerProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  }
}
