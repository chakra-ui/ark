{
  "Root": {
    "aria-label": {
      "type": "string",
      "isRequired": false,
      "description": "Human readable label for the dialog, in event the dialog title is not rendered"
    },
    "closeOnEsc": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to close the dialog when the escape key is pressed"
    },
    "closeOnOutsideClick": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to close the dialog when the outside is clicked"
    },
    "defaultOpen": {
      "type": "boolean",
      "isRequired": false,
      "description": "The initial open state of the dialog."
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "finalFocusEl": {
      "type": "HTMLElement | (() => MaybeElement)",
      "isRequired": false,
      "description": "Element to receive focus when the dialog is closed"
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  trigger: string\n  container: string\n  backdrop: string\n  content: string\n  closeTrigger: string\n  title: string\n  description: string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the dialog. Useful for composition."
    },
    "initialFocusEl": {
      "type": "HTMLElement | (() => MaybeElement)",
      "isRequired": false,
      "description": "Element to receive focus when the dialog is opened"
    },
    "modal": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to prevent pointer interaction outside the element and hide all content below it"
    },
    "onEsc": {
      "type": "VoidFunction",
      "isRequired": false,
      "description": "Callback to be invoked when the escape key is pressed"
    },
    "onOpenChange": {
      "type": "(details: OpenChangeDetails) => void",
      "isRequired": false,
      "description": "Callback to be invoked when the dialog is opened or closed"
    },
    "onOutsideClick": {
      "type": "VoidFunction",
      "isRequired": false,
      "description": "Callback to be invoked when the outside is clicked"
    },
    "open": { "type": "boolean", "isRequired": false, "description": "Whether the dialog is open" },
    "preventScroll": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to prevent scrolling behind the dialog when it's opened"
    },
    "restoreFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to restore focus to the element that had focus before the dialog was opened"
    },
    "role": {
      "type": "'dialog' | 'alertdialog'",
      "isRequired": false,
      "description": "The dialog's role"
    },
    "trapFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to trap focus inside the dialog when it's opened"
    }
  },
  "Title": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Content": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    },
    "lazyMount": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to enable lazy mounting"
    },
    "onExitComplete": { "type": "() => void", "isRequired": false },
    "present": { "type": "boolean", "isRequired": false },
    "unmountOnExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to unmount on exit."
    }
  },
  "Trigger": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Backdrop": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    },
    "lazyMount": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to enable lazy mounting"
    },
    "onExitComplete": { "type": "() => void", "isRequired": false },
    "present": { "type": "boolean", "isRequired": false },
    "unmountOnExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to unmount on exit."
    }
  },
  "Container": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Description": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "CloseTrigger": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  }
}
