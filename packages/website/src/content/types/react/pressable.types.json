{
  "Root": {
    "allowTextSelectionOnPress": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether text selection should be enabled on the pressable element."
    },
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    },
    "cancelOnPointerExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether press events should be canceled when the pointer leaves the target while pressed.\n\nBy default, this is `false`, which means if the pointer returns back over the target while\nstill pressed, onPressStart will be fired again.\n\nIf set to `true`, the press is canceled when the pointer leaves the target and\nonPressStart will not be fired if the pointer returns."
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the element is disabled"
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "longPressDelay": {
      "type": "number",
      "isRequired": false,
      "description": "The amount of time (in milliseconds) to wait before firing the `onLongPress` event."
    },
    "onLongPress": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when the element has been pressed for 500 milliseconds"
    },
    "onPress": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when the press is released over the target."
    },
    "onPressEnd": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target."
    },
    "onPressStart": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press interaction starts."
    },
    "onPressUp": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not."
    },
    "preventFocusOnPress": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the target should not receive focus on press."
    }
  },
  "Use": {
    "allowTextSelectionOnPress": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether text selection should be enabled on the pressable element."
    },
    "cancelOnPointerExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether press events should be canceled when the pointer leaves the target while pressed.\n\nBy default, this is `false`, which means if the pointer returns back over the target while\nstill pressed, onPressStart will be fired again.\n\nIf set to `true`, the press is canceled when the pointer leaves the target and\nonPressStart will not be fired if the pointer returns."
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the element is disabled"
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "longPressDelay": {
      "type": "number",
      "isRequired": false,
      "description": "The amount of time (in milliseconds) to wait before firing the `onLongPress` event."
    },
    "onLongPress": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when the element has been pressed for 500 milliseconds"
    },
    "onPress": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when the press is released over the target."
    },
    "onPressEnd": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target."
    },
    "onPressStart": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press interaction starts."
    },
    "onPressUp": {
      "type": "(event: PressEvent) => void",
      "isRequired": false,
      "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not."
    },
    "preventFocusOnPress": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the target should not receive focus on press."
    }
  }
}
