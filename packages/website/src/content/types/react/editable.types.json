{
  "Area": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Root": {
    "activationMode": {
      "type": "ActivationMode",
      "defaultValue": "\"focus\"",
      "isRequired": false,
      "description": "The activation mode for the preview element.\n\n- \"focus\" - Enter edit mode when the preview element is focused\n- \"dblclick\" - Enter edit mode when the preview element is double-clicked\n- \"none\" - No interaction with the preview element will trigger edit mode."
    },
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    },
    "autoResize": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the editable should auto-resize to fit the content."
    },
    "defaultValue": {
      "type": "string",
      "isRequired": false,
      "description": "The initial value of the editable."
    },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "defaultValue": "\"ltr\"",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the editable is disabled"
    },
    "finalFocusEl": {
      "type": "() => HTMLElement | null",
      "isRequired": false,
      "description": "The element that should receive focus when the editable is closed.\nBy default, it will focus on the trigger element."
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the underlying input."
    },
    "getRootNode": {
      "type": "() => Node | ShadowRoot | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  area: string\n  label: string\n  preview: string\n  input: string\n  controls: string\n  submitTrigger: string\n  cancelTrigger: string\n  editTrigger: string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the editable. Useful for composition."
    },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the input's value is invalid."
    },
    "maxLength": {
      "type": "number",
      "isRequired": false,
      "description": "The maximum number of characters allowed in the editable"
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute of the editable component. Used for form submission."
    },
    "onEdit": {
      "type": "() => void",
      "isRequired": false,
      "description": "The callback that is called when in the edit mode."
    },
    "onFocusOutside": {
      "type": "(event: FocusOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the focus is moved outside the component"
    },
    "onInteractOutside": {
      "type": "(event: InteractOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when an interaction happens outside the component"
    },
    "onPointerDownOutside": {
      "type": "(event: PointerDownOutsideEvent) => void",
      "isRequired": false,
      "description": "Function called when the pointer is pressed down outside the component"
    },
    "onValueChange": {
      "type": "(details: ValueChangeDetails) => void",
      "isRequired": false,
      "description": "The callback that is called when the editable's value is changed"
    },
    "onValueCommit": {
      "type": "(details: ValueChangeDetails) => void",
      "isRequired": false,
      "description": "The callback that is called when the editable's value is submitted."
    },
    "onValueRevert": {
      "type": "(details: ValueChangeDetails) => void",
      "isRequired": false,
      "description": "The callback that is called when the esc key is pressed or the cancel button is clicked"
    },
    "placeholder": {
      "type": "string | { edit: string; preview: string }",
      "isRequired": false,
      "description": "The placeholder value to show when the `value` is empty"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the editable is readonly"
    },
    "selectOnFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to select the text in the input when it is focused."
    },
    "startWithEditView": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to start with the edit mode active."
    },
    "submitMode": {
      "type": "SubmitMode",
      "defaultValue": "\"enter\"",
      "isRequired": false,
      "description": "The action that triggers submit in the edit mode:\n\n- \"enter\" - Trigger submit when the enter key is pressed\n- \"blur\" - Trigger submit when the editable is blurred\n- \"none\" - No action will trigger submit. You need to use the submit button\n- \"both\" - Pressing `Enter` and blurring the input will trigger submit"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "value": {
      "type": "string",
      "isRequired": false,
      "description": "The value of the editable in both edit and preview mode"
    }
  },
  "Input": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Label": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Control": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "Preview": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "EditTrigger": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "CancelTrigger": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  },
  "SubmitTrigger": {
    "asChild": {
      "type": "boolean",
      "isRequired": false,
      "description": "Render as a different element type."
    }
  }
}
