{
  "Basic": "const Basic = () => (\n  <Checkbox>\n    <CheckboxLabel>Checkbox</CheckboxLabel>\n    <CheckboxInput />\n    <CheckboxControl />\n  </Checkbox>\n)",
  "RenderProp": "const RenderProp = () => (\n  <Checkbox>\n    {(state) => (\n      <>\n        <CheckboxLabel>Checkbox</CheckboxLabel>\n        <CheckboxInput data-peer />\n        <CheckboxControl>\n          {state.isChecked && <span>âœ“</span>}\n          {state.isIndeterminate && <span>-</span>}\n        </CheckboxControl>\n      </>\n    )}\n  </Checkbox>\n)",
  "IndeterminateExample": "const IndeterminateExample = () => {\n  const [checkedItems, setCheckedItems] = useState([false, false])\n\n  const allChecked = checkedItems.every(Boolean)\n  const someChecked = checkedItems.some(Boolean) && !allChecked\n\n  return (\n    <>\n      <Checkbox\n        checked={allChecked}\n        indeterminate={someChecked}\n        onChange={(e) => setCheckedItems([e.checked === true, e.checked === true])}\n      >\n        <CheckboxLabel>Parent Checkbox</CheckboxLabel>\n        <CheckboxInput />\n        <CheckboxControl />\n      </Checkbox>\n      <div>\n        <Checkbox\n          checked={checkedItems[0]}\n          onChange={(e) => setCheckedItems([e.checked === true, checkedItems[1]])}\n        >\n          <CheckboxLabel>Child Checkbox 1</CheckboxLabel>\n          <CheckboxInput />\n          <CheckboxControl />\n        </Checkbox>\n        <Checkbox\n          checked={checkedItems[1]}\n          onChange={(e) => setCheckedItems([checkedItems[0], e.checked === true])}\n        >\n          <CheckboxLabel>Child Checkbox 2</CheckboxLabel>\n          <CheckboxInput />\n          <CheckboxControl />\n        </Checkbox>\n      </div>\n    </>\n  )\n}"
}
