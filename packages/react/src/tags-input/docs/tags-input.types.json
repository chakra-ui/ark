{
  "TagProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "TagDeleteTriggerProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "TagInputProps": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "TagsInputProps": {
    "addOnPaste": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to add a tag when you paste values into the tag input"
    },
    "allowEditTag": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether a tag can be edited after creation.\nIf `true` and focus is on a tag, pressing `Enter`or double clicking will edit the tag."
    },
    "allowOverflow": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
    },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the input should be auto-focused"
    },
    "blurBehavior": {
      "type": "'clear' | 'add'",
      "isRequired": false,
      "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"none\"`: do nothing\n- `\"clear\"`: clear the input value"
    },
    "defaultValue": { "type": "string[]", "isRequired": false },
    "delimiter": {
      "type": "string",
      "isRequired": false,
      "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
    },
    "dir": {
      "type": "Direction",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be disabled"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the underlying input element."
    },
    "getRootNode": {
      "type": "() => Node | ShadowRoot | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  input: string\n  clearBtn: string\n  label: string\n  control: string\n  tag(opts: TagProps): string\n  tagDeleteTrigger(opts: TagProps): string\n  tagInput(opts: TagProps): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the tags input. Useful for composition."
    },
    "inputValue": { "type": "string", "isRequired": false, "description": "The tag input's value" },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input is invalid"
    },
    "max": { "type": "number", "isRequired": false, "description": "The max number of tags" },
    "maxLength": {
      "type": "number",
      "isRequired": false,
      "description": "The max length of the input."
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute for the input. Useful for form submissions"
    },
    "onChange": {
      "type": "(details: { values: string[] }) => void",
      "isRequired": false,
      "description": "Callback fired when the tag values is updated"
    },
    "onHighlight": {
      "type": "(details: { value: string | null }) => void",
      "isRequired": false,
      "description": "Callback fired when a tag is focused by pointer or keyboard navigation"
    },
    "onInvalid": {
      "type": "(details: { reason: ValidityState }) => void",
      "isRequired": false,
      "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
    },
    "onTagUpdate": {
      "type": "(details: { value: string; index: number }) => void",
      "isRequired": false,
      "description": "Callback fired when a tag's value is updated"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be read-only"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "validate": {
      "type": "(details: { inputValue: string; values: string[] }) => boolean",
      "isRequired": false,
      "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
    },
    "value": { "type": "string[]", "isRequired": false, "description": "The tag values" }
  },
  "UseTagsInputProps": {
    "addOnPaste": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to add a tag when you paste values into the tag input"
    },
    "allowEditTag": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether a tag can be edited after creation.\nIf `true` and focus is on a tag, pressing `Enter`or double clicking will edit the tag."
    },
    "allowOverflow": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
    },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the input should be auto-focused"
    },
    "blurBehavior": {
      "type": "'clear' | 'add'",
      "isRequired": false,
      "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"none\"`: do nothing\n- `\"clear\"`: clear the input value"
    },
    "defaultValue": { "type": "string[]", "isRequired": false },
    "delimiter": {
      "type": "string",
      "isRequired": false,
      "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
    },
    "dir": {
      "type": "Direction",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be disabled"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the underlying input element."
    },
    "getRootNode": {
      "type": "() => Node | ShadowRoot | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  input: string\n  clearBtn: string\n  label: string\n  control: string\n  tag(opts: TagProps): string\n  tagDeleteTrigger(opts: TagProps): string\n  tagInput(opts: TagProps): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the tags input. Useful for composition."
    },
    "inputValue": { "type": "string", "isRequired": false, "description": "The tag input's value" },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input is invalid"
    },
    "max": { "type": "number", "isRequired": false, "description": "The max number of tags" },
    "maxLength": {
      "type": "number",
      "isRequired": false,
      "description": "The max length of the input."
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute for the input. Useful for form submissions"
    },
    "onChange": {
      "type": "(details: { values: string[] }) => void",
      "isRequired": false,
      "description": "Callback fired when the tag values is updated"
    },
    "onHighlight": {
      "type": "(details: { value: string | null }) => void",
      "isRequired": false,
      "description": "Callback fired when a tag is focused by pointer or keyboard navigation"
    },
    "onInvalid": {
      "type": "(details: { reason: ValidityState }) => void",
      "isRequired": false,
      "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
    },
    "onTagUpdate": {
      "type": "(details: { value: string; index: number }) => void",
      "isRequired": false,
      "description": "Callback fired when a tag's value is updated"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be read-only"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "validate": {
      "type": "(details: { inputValue: string; values: string[] }) => boolean",
      "isRequired": false,
      "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
    },
    "value": { "type": "string[]", "isRequired": false, "description": "The tag values" }
  },
  "UseTagsInputReturn": {
    "addValue": { "type": "(value: string) => void", "isRequired": true },
    "clearAll": { "type": "() => void", "isRequired": true },
    "clearInputValue": { "type": "() => void", "isRequired": true },
    "clearTriggerProps": {
      "type": "DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>",
      "isRequired": true
    },
    "controlProps": { "type": "HTMLAttributes<HTMLElement>", "isRequired": true },
    "count": { "type": "number", "isRequired": true },
    "deleteValue": { "type": "(id: string) => void", "isRequired": true },
    "focus": { "type": "() => void", "isRequired": true },
    "getTagDeleteTriggerProps": {
      "type": "(\n  options: TagProps,\n) => DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>",
      "isRequired": true
    },
    "getTagInputProps": {
      "type": "(\n  options: TagProps,\n) => DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
      "isRequired": true
    },
    "getTagProps": {
      "type": "(options: TagProps) => HTMLAttributes<HTMLElement>",
      "isRequired": true
    },
    "hiddenInputProps": {
      "type": "DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
      "isRequired": true
    },
    "inputProps": {
      "type": "DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
      "isRequired": true
    },
    "inputValue": { "type": "string", "isRequired": true },
    "isAtMax": { "type": "boolean", "isRequired": true },
    "isEmpty": { "type": "boolean", "isRequired": true },
    "labelProps": {
      "type": "DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>",
      "isRequired": true
    },
    "rootProps": { "type": "HTMLAttributes<HTMLElement>", "isRequired": true },
    "setInputValue": { "type": "(value: string) => void", "isRequired": true },
    "setValue": { "type": "(value: string[]) => void", "isRequired": true },
    "setValueAtIndex": { "type": "(index: number, value: string) => void", "isRequired": true },
    "value": { "type": "string[]", "isRequired": true },
    "valueAsString": { "type": "string", "isRequired": true }
  }
}
