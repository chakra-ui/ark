{
  "ComboboxProps": {
    "items": { "type": "T[]", "isRequired": true, "description": "The options of the select" },
    "allowCustomValue": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow custom values or free values in the input"
    },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to autofocus the input on mount"
    },
    "closeOnSelect": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to close the combobox when an item is selected."
    },
    "defaultValue": { "type": "string[]", "isRequired": false },
    "dir": {
      "type": "'ltr' | 'rtl'",
      "isRequired": false,
      "description": "The document's text/writing direction."
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is disabled"
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the combobox."
    },
    "getRootNode": {
      "type": "() => ShadowRoot | Node | Document",
      "isRequired": false,
      "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
    },
    "highlightedValue": {
      "type": "string",
      "isRequired": false,
      "description": "The active item's id. Used to set the `aria-activedescendant` attribute"
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  label: string\n  control: string\n  input: string\n  content: string\n  trigger: string\n  clearTrigger: string\n  item(id: string, index?: number | undefined): string\n  positioner: string\n  itemGroup(id: string | number): string\n  itemGroupLabel(id: string | number): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the combobox. Useful for composition."
    },
    "inputBehavior": {
      "type": "'none' | 'autohighlight' | 'autocomplete'",
      "isRequired": false,
      "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused item is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the item and the input is updated"
    },
    "inputValue": {
      "type": "string",
      "isRequired": false,
      "description": "The current value of the combobox's input"
    },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is required"
    },
    "isItemDisabled": {
      "type": "(item: T) => boolean",
      "isRequired": false,
      "description": "Whether the item is disabled"
    },
    "itemToString": {
      "type": "(item: T) => string",
      "isRequired": false,
      "description": "The label of the item"
    },
    "itemToValue": {
      "type": "(item: T) => string",
      "isRequired": false,
      "description": "The value of the item"
    },
    "loop": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to loop the keyboard navigation through the items"
    },
    "multiple": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow multiple selection"
    },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The `name` attribute of the combobox's input. Useful for form submission"
    },
    "onChange": {
      "type": "(details: ValueChangeDetails<T>) => void",
      "isRequired": false,
      "description": "Function called when a new item is selected"
    },
    "onClose": {
      "type": "VoidFunction",
      "isRequired": false,
      "description": "Function called when the popup is closed"
    },
    "onFocusOutside": { "type": "(event: FocusOutsideEvent) => void", "isRequired": false },
    "onHighlight": {
      "type": "(details: HighlightChangeDetails<T>) => void",
      "isRequired": false,
      "description": "Function called when an item is highlighted using the pointer\nor keyboard navigation."
    },
    "onInputChange": {
      "type": "(details: InputValueChangeDetails) => void",
      "isRequired": false,
      "description": "Function called when the input's value changes"
    },
    "onInteractOutside": { "type": "(event: InteractOutsideEvent) => void", "isRequired": false },
    "onOpen": {
      "type": "VoidFunction",
      "isRequired": false,
      "description": "Function called when the popup is opened"
    },
    "onPointerDownOutside": {
      "type": "(event: PointerDownOutsideEvent) => void",
      "isRequired": false
    },
    "openOnClick": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to open the combobox popup on initial click on the input"
    },
    "placeholder": {
      "type": "string",
      "isRequired": false,
      "description": "The placeholder text of the combobox's input"
    },
    "positioning": {
      "type": "PositioningOptions",
      "isRequired": false,
      "description": "The positioning options to dynamically position the menu"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
    },
    "selectionBehavior": {
      "type": "'replace' | 'clear' | 'preserve'",
      "isRequired": false,
      "description": "The behavior of the combobox input when an item is selected\n\n- `replace`: The selected item string is set as the input value\n- `clear`: The input value is cleared\n- `preserve`: The input value is preserved"
    },
    "selectOnBlur": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to select the higlighted item on interaction outside the combobox"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "value": {
      "type": "string[]",
      "isRequired": false,
      "description": "The keys of the selected items"
    }
  },
  "ComboboxContext": {
    "clearTriggerProps": {
      "type": "WithoutRef<\n  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n>",
      "isRequired": true
    },
    "clearValue": {
      "type": "(value?: string | undefined) => void",
      "isRequired": true,
      "description": "Function to clear the value of the combobox"
    },
    "close": {
      "type": "() => void",
      "isRequired": true,
      "description": "Function to close the combobox"
    },
    "contentProps": { "type": "WithoutRef<HTMLAttributes<HTMLElement>>", "isRequired": true },
    "controlProps": { "type": "WithoutRef<HTMLAttributes<HTMLElement>>", "isRequired": true },
    "focus": {
      "type": "() => void",
      "isRequired": true,
      "description": "Function to focus on the combobox input"
    },
    "getItemGroupLabelProps": {
      "type": "(props: ItemGroupLabelProps) => WithoutRef<HTMLAttributes<HTMLElement>>",
      "isRequired": true
    },
    "getItemGroupProps": {
      "type": "(props: ItemGroupProps) => WithoutRef<HTMLAttributes<HTMLElement>>",
      "isRequired": true
    },
    "getItemIndicatorProps": {
      "type": "(props: ItemProps) => WithoutRef<HTMLAttributes<HTMLElement>>",
      "isRequired": true
    },
    "getItemProps": {
      "type": "(props: ItemProps) => WithoutRef<HTMLAttributes<HTMLElement>>",
      "isRequired": true
    },
    "getItemState": {
      "type": "(props: ItemProps) => ItemState",
      "isRequired": true,
      "description": "Returns the state of a combobox item"
    },
    "getItemTextProps": {
      "type": "(props: ItemProps) => WithoutRef<HTMLAttributes<HTMLElement>>",
      "isRequired": true
    },
    "hasSelectedItems": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether there's a selected item"
    },
    "highlightValue": {
      "type": "(value: string) => void",
      "isRequired": true,
      "description": "The value of the combobox input"
    },
    "inputProps": {
      "type": "WithoutRef<\n  DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n>",
      "isRequired": true
    },
    "inputValue": {
      "type": "string",
      "isRequired": true,
      "description": "The value of the combobox input"
    },
    "isFocused": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether the combobox is focused"
    },
    "isInputValueEmpty": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether the combobox input value is empty"
    },
    "isOpen": {
      "type": "boolean",
      "isRequired": true,
      "description": "Whether the combobox is open"
    },
    "labelProps": {
      "type": "WithoutRef<\n  DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>\n>",
      "isRequired": true
    },
    "open": {
      "type": "() => void",
      "isRequired": true,
      "description": "Function to open the combobox"
    },
    "positionerProps": { "type": "WithoutRef<HTMLAttributes<HTMLElement>>", "isRequired": true },
    "rootProps": { "type": "WithoutRef<HTMLAttributes<HTMLElement>>", "isRequired": true },
    "selectedItems": { "type": "T[]", "isRequired": true, "description": "The selected items" },
    "selectValue": {
      "type": "(value: string) => void",
      "isRequired": true,
      "description": "Function to select a value"
    },
    "setCollection": {
      "type": "(collection: Collection<T>) => void",
      "isRequired": true,
      "description": "Function to set the collection of items"
    },
    "setInputValue": {
      "type": "(value: string) => void",
      "isRequired": true,
      "description": "Function to set the input value of the combobox"
    },
    "setValue": {
      "type": "(value: string[]) => void",
      "isRequired": true,
      "description": "Function to set the value of the combobox"
    },
    "triggerProps": {
      "type": "WithoutRef<\n  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n>",
      "isRequired": true
    },
    "value": { "type": "string[]", "isRequired": true, "description": "The selected item keys" },
    "valueAsString": {
      "type": "string",
      "isRequired": true,
      "description": "The string representation of the selected items"
    },
    "highlightedItem": { "type": "T", "isRequired": false, "description": "The highlighted item" },
    "highlightedValue": {
      "type": "string",
      "isRequired": false,
      "description": "The value of the highlighted item"
    }
  },
  "ComboboxItemProps": { "item": { "type": "any", "isRequired": false } },
  "ComboboxContentProps": {
    "lazyMount": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to enable lazy mounting. Defaults to `false`."
    },
    "onExitComplete": { "type": "() => void", "isRequired": false },
    "present": { "type": "boolean", "isRequired": false },
    "unmountOnExit": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to unmount on exit. Defaults to `false`."
    }
  },
  "ComboboxItemGroupProps": { "id": { "type": "string", "isRequired": true } },
  "ComboboxItemGroupLabelProps": { "htmlFor": { "type": "string", "isRequired": true } }
}
