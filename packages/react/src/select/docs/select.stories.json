{
  "Basic": "const Basic = () => {\n  const items = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n  return (\n    <Select items={items} onChange={(e) => console.log(e.items, e.value)}>\n      <SelectLabel>Framework:</SelectLabel>\n      <SelectTrigger>\n        <SelectValue placeholder=\"Select a framework\" />\n      </SelectTrigger>\n      <SelectClearTrigger>Clear</SelectClearTrigger>\n      <Portal>\n        <SelectPositioner>\n          <SelectContent>\n            <SelectItemGroup id=\"framework\">\n              <SelectItemGroupLabel htmlFor=\"framework\">Frameworks</SelectItemGroupLabel>\n              {items.map((item) => (\n                <SelectItem key={item.value} item={item}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectItemGroup>\n          </SelectContent>\n        </SelectPositioner>\n      </Portal>\n    </Select>\n  )\n}",
  "Controlled": "const Controlled = () => {\n  const [selectedItems, setSelectedItems] = useState<Item[]>([])\n\n  const items = [\n    { name: 'React', value: 'react' },\n    { name: 'Solid', value: 'solid' },\n    { name: 'Vue', value: 'vue' },\n  ]\n\n  return (\n    <>\n      <pre>{JSON.stringify(selectedItems, null, 2)}</pre>\n      <Select items={items} multiple onChange={(e) => setSelectedItems(e.items)}>\n        {(api) => (\n          <>\n            <SelectLabel>Framework:</SelectLabel>\n            <SelectTrigger>{api.valueAsString || 'Select option'}</SelectTrigger>\n            <SelectClearTrigger>Clear</SelectClearTrigger>\n            <Portal>\n              <SelectPositioner>\n                <SelectContent>\n                  <SelectItemGroup id=\"framework\">\n                    <SelectItemGroupLabel htmlFor=\"framework\">Frameworks</SelectItemGroupLabel>\n                    {items.map((item) => (\n                      <SelectItem key={item.value} item={item}>\n                        {item.name}\n                      </SelectItem>\n                    ))}\n                  </SelectItemGroup>\n                </SelectContent>\n              </SelectPositioner>\n            </Portal>\n          </>\n        )}\n      </Select>\n    </>\n  )\n}",
  "StringItems": "const StringItems = () => {\n  const items = ['React', 'Solid', 'Vue']\n  return (\n    <Select\n      items={items}\n      itemToValue={(item) => item}\n      itemToString={(item) => `${item.framework} (${item.stars})`}\n    >\n      {(api) => (\n        <>\n          <SelectLabel>Framework:</SelectLabel>\n          <SelectTrigger>{api.valueAsString || 'Select option'}</SelectTrigger>\n          <SelectClearTrigger>Clear</SelectClearTrigger>\n          <Portal>\n            <SelectPositioner>\n              <SelectContent>\n                <SelectItemGroup id=\"framework\">\n                  <SelectItemGroupLabel htmlFor=\"framework\">Frameworks</SelectItemGroupLabel>\n                  {items.map((item) => (\n                    <SelectItem key={item} item={item}>\n                      {item}\n                    </SelectItem>\n                  ))}\n                </SelectItemGroup>\n              </SelectContent>\n            </SelectPositioner>\n          </Portal>\n        </>\n      )}\n    </Select>\n  )\n}",
  "ItemsWithoutValue": "const ItemsWithoutValue = () => {\n  const items = [\n    { framework: 'React', stars: '100' },\n    { framework: 'Solid', stars: '30' },\n    { framework: 'Vue', stars: '1' },\n    { framework: 'Svelte', stars: '40', disabled: true },\n  ]\n  return (\n    <Select\n      items={items}\n      itemToValue={(item) => item.framework}\n      itemToString={(item) => `${item.framework} (${item.stars})`}\n      isItemDisabled={(item) => (item.disabled ? true : false)}\n    >\n      {(api) => (\n        <>\n          <SelectLabel>Framework:</SelectLabel>\n          <SelectTrigger>{api.valueAsString || 'Select option'}</SelectTrigger>\n          <SelectClearTrigger>Clear</SelectClearTrigger>\n          <Portal>\n            <SelectPositioner>\n              <SelectContent>\n                <SelectItemGroup id=\"framework\">\n                  <SelectItemGroupLabel htmlFor=\"framework\">Frameworks</SelectItemGroupLabel>\n                  {items.map((item) => (\n                    <SelectItem key={item.framework} item={item}>\n                      {item.framework} ({item.stars})\n                    </SelectItem>\n                  ))}\n                </SelectItemGroup>\n              </SelectContent>\n            </SelectPositioner>\n          </Portal>\n        </>\n      )}\n    </Select>\n  )\n}"
}
