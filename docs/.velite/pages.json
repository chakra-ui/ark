[
  {
    "id": "animation",
    "title": "Animation",
    "description": "Learn how to animate components with Ark UI.",
    "metadata": {
      "readingTime": 1,
      "wordCount": 1
    },
    "content": "<p>TBD</p>",
    "toc": [],
    "code": "const{jsx:n}=arguments[0];function _createMdxContent(t){const e={p:\"p\",...t.components};return n(e.p,{children:\"TBD\"})}return{default:function(t={}){const{wrapper:e}=t.components||{};return e?n(e,{...t,children:n(_createMdxContent,{...t})}):_createMdxContent(t)}};",
    "slug": "guides/animation",
    "href": "/docs/guides/animation",
    "category": "guides"
  },
  {
    "id": "composition",
    "title": "Composition",
    "description": "How to compose your UI with Ark UI",
    "metadata": {
      "readingTime": 1,
      "wordCount": 0
    },
    "content": "",
    "toc": [],
    "code": "const{Fragment:n,jsx:t}=arguments[0];function _createMdxContent(e){return t(n,{})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?t(e,{...n,children:t(_createMdxContent,{...n})}):_createMdxContent()}};",
    "slug": "guides/composition",
    "href": "/docs/guides/composition",
    "category": "guides"
  },
  {
    "id": "styling",
    "title": "Styling",
    "description": "Learn how to style Ark UI components.",
    "metadata": {
      "readingTime": 1,
      "wordCount": 1
    },
    "content": "<p>TBD</p>",
    "toc": [],
    "code": "const{jsx:n}=arguments[0];function _createMdxContent(t){const e={p:\"p\",...t.components};return n(e.p,{children:\"TBD\"})}return{default:function(t={}){const{wrapper:e}=t.components||{};return e?n(e,{...t,children:n(_createMdxContent,{...t})}):_createMdxContent(t)}};",
    "slug": "guides/styling",
    "href": "/docs/guides/styling",
    "category": "guides"
  },
  {
    "id": "changelog",
    "title": "Changelog",
    "description": "Stay up-to-date with the latest changes in Ark UI",
    "metadata": {
      "readingTime": 1,
      "wordCount": 0
    },
    "content": "",
    "toc": [],
    "code": "const{Fragment:n,jsx:t}=arguments[0];function _createMdxContent(e){return t(n,{})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?t(e,{...n,children:t(_createMdxContent,{...n})}):_createMdxContent()}};",
    "slug": "overview/changelog",
    "href": "/docs/overview/changelog",
    "category": "overview"
  },
  {
    "id": "getting-started",
    "title": "Getting Started",
    "description": "A Step-by-step Guide to Using Ark UI",
    "metadata": {
      "readingTime": 1,
      "wordCount": 186
    },
    "content": "<h2>Quickstart</h2>\n<p>Running tight on schedule? No worries! Check out our quickstart examples to get started with Ark UI in seconds.</p>\n<quickstart>\n<h2>Setup Guide</h2>\n<steps>\n<step title=\"Prerequisite\" number=\"1\">\n<p>Before you start, ensure that you have a proper project setup. If not, please follow your preffered application framework setup guide and once you've completed that, come back to this guide.</p>\n</step>\n<step title=\"Install Ark UI\" number=\"2\">\n<p>Let's start by installing the Ark UI package. Make sure to pick the either the React, Solid or Vue package based on your project setup.</p>\n<pre><code class=\"language-bash\" metastring=\"multi\">npm install @ark-ui/react\n</code></pre>\n</step>\n<step number=\"3\" title=\"Add a component\">\n<p>In this guide, we will be adding a Slider component. Copy the following code to your project.</p>\n<story id=\"Basic\" component=\"slider\">\n</story></step>\n<step number=\"4\" title=\"Style a component\">\n<p>Ark UI is a headless component library that doesn't include default styles.\nNowadays, projects often use CSS-in-JS libraries like <a href=\"https://panda-css.com/\">Panda CSS</a> or frameworks like <a href=\"https://tailwindcss.com/\">Tailwind</a> to style their components.</p>\n<p>However, if you prefer to write your own CSS, you can leverage the <code>data-scope</code> and <code>data-part</code> attributes to style your components.</p>\n<pre><code class=\"language-css\">/* Targets the slider root part */\n[data-scope='slider'][data-part='root'] {\n  display: flex;\n  flex-direction: column;\n}\n</code></pre>\n<p>To learn more about how to style components in Ark UI, checkout our <a href=\"/docs/styling/overview\">Styling Components guide</a>.\n\n</p></step></steps></quickstart>",
    "toc": [
      {
        "title": "Quickstart",
        "url": "#quickstart",
        "items": []
      },
      {
        "title": "Setup Guide",
        "url": "#setup-guide",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:t,jsxs:n}=arguments[0];function _createMdxContent(r){const o={a:\"a\",code:\"code\",h2:\"h2\",p:\"p\",pre:\"pre\",...r.components},{Quickstart:i,Step:c,Steps:a,Story:s}=o;return i||_missingMdxReference(\"Quickstart\",!0),c||_missingMdxReference(\"Step\",!0),a||_missingMdxReference(\"Steps\",!0),s||_missingMdxReference(\"Story\",!0),n(e,{children:[t(o.h2,{children:\"Quickstart\"}),\"\\n\",t(o.p,{children:\"Running tight on schedule? No worries! Check out our quickstart examples to get started with Ark UI in seconds.\"}),\"\\n\",t(i,{}),\"\\n\",t(o.h2,{children:\"Setup Guide\"}),\"\\n\",n(a,{children:[t(c,{title:\"Prerequisite\",number:\"1\",children:t(o.p,{children:\"Before you start, ensure that you have a proper project setup. If not, please follow your preffered application framework setup guide and once you've completed that, come back to this guide.\"})}),n(c,{title:\"Install Ark UI\",number:\"2\",children:[t(o.p,{children:\"Let's start by installing the Ark UI package. Make sure to pick the either the React, Solid or Vue package based on your project setup.\"}),t(o.pre,{children:t(o.code,{className:\"language-bash\",children:\"npm install @ark-ui/react\\n\"})})]}),n(c,{number:\"3\",title:\"Add a component\",children:[t(o.p,{children:\"In this guide, we will be adding a Slider component. Copy the following code to your project.\"}),t(s,{id:\"Basic\",component:\"slider\"})]}),n(c,{number:\"4\",title:\"Style a component\",children:[n(o.p,{children:[\"Ark UI is a headless component library that doesn't include default styles.\\nNowadays, projects often use CSS-in-JS libraries like \",t(o.a,{href:\"https://panda-css.com/\",children:\"Panda CSS\"}),\" or frameworks like \",t(o.a,{href:\"https://tailwindcss.com/\",children:\"Tailwind\"}),\" to style their components.\"]}),n(o.p,{children:[\"However, if you prefer to write your own CSS, you can leverage the \",t(o.code,{children:\"data-scope\"}),\" and \",t(o.code,{children:\"data-part\"}),\" attributes to style your components.\"]}),t(o.pre,{children:t(o.code,{className:\"language-css\",children:\"/* Targets the slider root part */\\n[data-scope='slider'][data-part='root'] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\"})}),n(o.p,{children:[\"To learn more about how to style components in Ark UI, checkout our \",t(o.a,{href:\"/docs/styling/overview\",children:\"Styling Components guide\"}),\".\"]})]})]})]})}return{default:function(e={}){const{wrapper:n}=e.components||{};return n?t(n,{...e,children:t(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "overview/getting-started",
    "href": "/docs/overview/getting-started",
    "category": "overview"
  },
  {
    "id": "introduction",
    "title": "Introduction",
    "description": "The headless component library for a wide range of JavaScript frameworks",
    "metadata": {
      "readingTime": 1,
      "wordCount": 92
    },
    "content": "<h2>Motivation</h2>\n<p>Most popular component libraries are designed to work with a specific JavaScript framework.\nWhile this setup works fine for individuals and small businesses,\nit can pose challenges for larger organizations or agencies dealing with various clients or teams that use different technology stacks.</p>\n<h2>Solution</h2>\n<p>The goal of Ark UI is to provide a comprehensive selection of components for implementing complex,\ninteractive, and accessible UI components across a wide range of JavaScript frameworks.\nBuilding a company-wide design system or a component library for a client has never been more straightforward.</p>\n<h2>FAQ</h2>\n<faq></faq>",
    "toc": [
      {
        "title": "Motivation",
        "url": "#motivation",
        "items": []
      },
      {
        "title": "Solution",
        "url": "#solution",
        "items": []
      },
      {
        "title": "FAQ",
        "url": "#faq",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(r){const t={h2:\"h2\",p:\"p\",...r.components},{Faq:i}=t;return i||function(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}(\"Faq\",!0),o(e,{children:[n(t.h2,{children:\"Motivation\"}),\"\\n\",n(t.p,{children:\"Most popular component libraries are designed to work with a specific JavaScript framework.\\nWhile this setup works fine for individuals and small businesses,\\nit can pose challenges for larger organizations or agencies dealing with various clients or teams that use different technology stacks.\"}),\"\\n\",n(t.h2,{children:\"Solution\"}),\"\\n\",n(t.p,{children:\"The goal of Ark UI is to provide a comprehensive selection of components for implementing complex,\\ninteractive, and accessible UI components across a wide range of JavaScript frameworks.\\nBuilding a company-wide design system or a component library for a client has never been more straightforward.\"}),\"\\n\",n(t.h2,{children:\"FAQ\"}),\"\\n\",n(i,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};",
    "slug": "overview/introduction",
    "href": "/docs/overview/introduction",
    "category": "overview"
  },
  {
    "id": "environment",
    "title": "Environment",
    "description": "TBD",
    "metadata": {
      "readingTime": 1,
      "wordCount": 0
    },
    "content": "",
    "toc": [],
    "code": "const{Fragment:n,jsx:t}=arguments[0];function _createMdxContent(e){return t(n,{})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?t(e,{...n,children:t(_createMdxContent,{...n})}):_createMdxContent()}};",
    "slug": "providers/environment",
    "href": "/docs/providers/environment",
    "category": "providers"
  },
  {
    "id": "locale",
    "title": "Locale",
    "description": "Setup components for a custom locale like RTL, LTR or a custom language.",
    "metadata": {
      "readingTime": 1,
      "wordCount": 0
    },
    "content": "",
    "toc": [],
    "code": "const{Fragment:n,jsx:t}=arguments[0];function _createMdxContent(e){return t(n,{})}return{default:function(n={}){const{wrapper:e}=n.components||{};return e?t(e,{...n,children:t(_createMdxContent,{...n})}):_createMdxContent()}};",
    "slug": "providers/locale",
    "href": "/docs/providers/locale",
    "category": "providers"
  },
  {
    "id": "accordion",
    "title": "Accordion",
    "description": "A collapsible component for displaying content in a vertical stack.",
    "resources": {
      "zag": "accordion",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/accordion/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 348
    },
    "content": "<h2>Usage</h2>\n<pre><code class=\"language-tsx\" metastring=\"live story=Basic\">&#x3C;Accordion.Root defaultValue={['React']}>\n  {['React', 'Solid', 'Vue'].map((item, id) => (\n    &#x3C;Accordion.Item key={id} value={item}>\n      &#x3C;Accordion.ItemTrigger>\n        {item}\n        &#x3C;Accordion.ItemIndicator>\n          &#x3C;ChevronDownIcon />\n        &#x3C;/Accordion.ItemIndicator>\n      &#x3C;/Accordion.ItemTrigger>\n      &#x3C;Accordion.ItemContent>\n        &#x3C;div>\n          {item} is a JavaScript library focused on building user interfaces.\n        &#x3C;/div>\n      &#x3C;/Accordion.ItemContent>\n    &#x3C;/Accordion.Item>\n  ))}\n&#x3C;/Accordion.Root>\n</code></pre>\n<h2>Anatomy</h2>\n<p>Understanding the Accordion's anatomy is crucial for proper setup:</p>\n<blockquote>\n<p>Each component part is marked with a <code>data-part</code> attribute for easy DOM\nidentification.</p>\n</blockquote>\n<anatomy id=\"accordion\">\n<h2>Animation</h2>\n<p>You can use CSS animations to create smooth transitions for opening and closing Accordion items. Utilize the <code>data-state</code> attribute in combination with the <code>--height</code> CSS variable to animate the open and closed states of <code>Accordion.ItemContent</code>.</p>\n<pre><code class=\"language-css\">@keyframes slideDown {\n  from { height: 0; }\n  to { height: var(--height); }\n}\n\n@keyframes slideUp {\n  from { height: var(--height); }\n  to { height: 0; }\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='open'] {\n  animation: slideDown 250ms;\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='closed'] {\n  animation: slideUp 200ms;\n}\n</code></pre>\n<h2>Examples</h2>\n<h3>Collapsible Panels</h3>\n<p>To create a collapsible Accordion where all panels can be closed simultaneously,\nutilize the <code>collapsible</code> prop:</p>\n<pre><code class=\"language-tsx\" metastring=\"live story=Collapsible\">&#x3C;Accordion.Root defaultValue={['React']} collapsible>\n  {['React', 'Solid', 'Vue'].map((item, id) => (\n    &#x3C;Accordion.Item key={id} value={item}>\n      &#x3C;Accordion.ItemTrigger>\n        {item}\n        &#x3C;Accordion.ItemIndicator>\n          &#x3C;ChevronDownIcon />\n        &#x3C;/Accordion.ItemIndicator>\n      &#x3C;/Accordion.ItemTrigger>\n      &#x3C;Accordion.ItemContent>\n        &#x3C;div>{item} is a JavaScript library for building user interfaces.&#x3C;/div>\n      &#x3C;/Accordion.ItemContent>\n    &#x3C;/Accordion.Item>\n  ))}\n&#x3C;/Accordion.Root>\n</code></pre>\n<h3>Multiple Panels Open</h3>\n<p>For an Accordion that allows keeping multiple panels open, apply the <code>multiple</code>\nprop:</p>\n<pre><code class=\"language-tsx\" metastring=\"live story=Multiple\">&#x3C;Accordion.Root defaultValue={['React']} multiple>\n  {['React', 'Solid', 'Vue'].map((item, id) => (\n    &#x3C;Accordion.Item key={id} value={item}>\n      &#x3C;Accordion.ItemTrigger>\n        {item}\n        &#x3C;Accordion.ItemIndicator>\n          &#x3C;ChevronDownIcon />\n        &#x3C;/Accordion.ItemIndicator>\n      &#x3C;/Accordion.ItemTrigger>\n      &#x3C;Accordion.ItemContent>\n        &#x3C;div>{item} is a JavaScript library for building user interfaces.&#x3C;/div>\n      &#x3C;/Accordion.ItemContent>\n    &#x3C;/Accordion.Item>\n  ))}\n&#x3C;/Accordion.Root>\n</code></pre>\n<h3>Accessing the Accordion API</h3>\n<p>For advanced control, access the Accordion API using a function as a child\ncomponent:</p>\n<story id=\"render-prop\">\n<h3>Controlled Accordion</h3>\n<p>To manage the Accordion's state, use the <code>value</code> prop and update it with the\n<code>onValueChange</code> event:</p>\n<story id=\"controlled\">\n<h3>Changing Orientation</h3>\n<p>Set the Accordion's orientation to vertical with the <code>orientation</code> prop:</p>\n<story id=\"vertical\">\n<h3>Disabling an Accordion Item</h3>\n<p>Disable any Accordion Item using the <code>disabled</code> prop:</p>\n<story id=\"disabled\">\n<h2>API Reference</h2>\n<p>Explore our detailed API Reference for further customization:</p>\n<componenttypes></componenttypes></story></story></story></story></anatomy>",
    "toc": [
      {
        "title": "Usage",
        "url": "#usage",
        "items": []
      },
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Animation",
        "url": "#animation",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Collapsible Panels",
            "url": "#collapsible-panels",
            "items": []
          },
          {
            "title": "Multiple Panels Open",
            "url": "#multiple-panels-open",
            "items": []
          },
          {
            "title": "Accessing the Accordion API",
            "url": "#accessing-the-accordion-api",
            "items": []
          },
          {
            "title": "Controlled Accordion",
            "url": "#controlled-accordion",
            "items": []
          },
          {
            "title": "Changing Orientation",
            "url": "#changing-orientation",
            "items": []
          },
          {
            "title": "Disabling an Accordion Item",
            "url": "#disabling-an-accordion-item",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:n,jsx:e,jsxs:o}=arguments[0];function _createMdxContent(i){const t={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",...i.components},{Anatomy:c,ComponentTypes:r,Story:d}=t;return c||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),o(n,{children:[e(t.h2,{children:\"Usage\"}),\"\\n\",e(t.pre,{children:e(t.code,{className:\"language-tsx\",children:\"<Accordion.Root defaultValue={['React']}>\\n  {['React', 'Solid', 'Vue'].map((item, id) => (\\n    <Accordion.Item key={id} value={item}>\\n      <Accordion.ItemTrigger>\\n        {item}\\n        <Accordion.ItemIndicator>\\n          <ChevronDownIcon />\\n        </Accordion.ItemIndicator>\\n      </Accordion.ItemTrigger>\\n      <Accordion.ItemContent>\\n        <div>\\n          {item} is a JavaScript library focused on building user interfaces.\\n        </div>\\n      </Accordion.ItemContent>\\n    </Accordion.Item>\\n  ))}\\n</Accordion.Root>\\n\"})}),\"\\n\",e(t.h2,{children:\"Anatomy\"}),\"\\n\",e(t.p,{children:\"Understanding the Accordion's anatomy is crucial for proper setup:\"}),\"\\n\",o(t.blockquote,{children:[\"\\n\",o(t.p,{children:[\"Each component part is marked with a \",e(t.code,{children:\"data-part\"}),\" attribute for easy DOM\\nidentification.\"]}),\"\\n\"]}),\"\\n\",e(c,{id:\"accordion\"}),\"\\n\",e(t.h2,{children:\"Animation\"}),\"\\n\",o(t.p,{children:[\"You can use CSS animations to create smooth transitions for opening and closing Accordion items. Utilize the \",e(t.code,{children:\"data-state\"}),\" attribute in combination with the \",e(t.code,{children:\"--height\"}),\" CSS variable to animate the open and closed states of \",e(t.code,{children:\"Accordion.ItemContent\"}),\".\"]}),\"\\n\",e(t.pre,{children:e(t.code,{className:\"language-css\",children:\"@keyframes slideDown {\\n  from { height: 0; }\\n  to { height: var(--height); }\\n}\\n\\n@keyframes slideUp {\\n  from { height: var(--height); }\\n  to { height: 0; }\\n}\\n\\n[data-scope='accordion'][data-part='item-content'][data-state='open'] {\\n  animation: slideDown 250ms;\\n}\\n\\n[data-scope='accordion'][data-part='item-content'][data-state='closed'] {\\n  animation: slideUp 200ms;\\n}\\n\"})}),\"\\n\",e(t.h2,{children:\"Examples\"}),\"\\n\",e(t.h3,{children:\"Collapsible Panels\"}),\"\\n\",o(t.p,{children:[\"To create a collapsible Accordion where all panels can be closed simultaneously,\\nutilize the \",e(t.code,{children:\"collapsible\"}),\" prop:\"]}),\"\\n\",e(t.pre,{children:e(t.code,{className:\"language-tsx\",children:\"<Accordion.Root defaultValue={['React']} collapsible>\\n  {['React', 'Solid', 'Vue'].map((item, id) => (\\n    <Accordion.Item key={id} value={item}>\\n      <Accordion.ItemTrigger>\\n        {item}\\n        <Accordion.ItemIndicator>\\n          <ChevronDownIcon />\\n        </Accordion.ItemIndicator>\\n      </Accordion.ItemTrigger>\\n      <Accordion.ItemContent>\\n        <div>{item} is a JavaScript library for building user interfaces.</div>\\n      </Accordion.ItemContent>\\n    </Accordion.Item>\\n  ))}\\n</Accordion.Root>\\n\"})}),\"\\n\",e(t.h3,{children:\"Multiple Panels Open\"}),\"\\n\",o(t.p,{children:[\"For an Accordion that allows keeping multiple panels open, apply the \",e(t.code,{children:\"multiple\"}),\"\\nprop:\"]}),\"\\n\",e(t.pre,{children:e(t.code,{className:\"language-tsx\",children:\"<Accordion.Root defaultValue={['React']} multiple>\\n  {['React', 'Solid', 'Vue'].map((item, id) => (\\n    <Accordion.Item key={id} value={item}>\\n      <Accordion.ItemTrigger>\\n        {item}\\n        <Accordion.ItemIndicator>\\n          <ChevronDownIcon />\\n        </Accordion.ItemIndicator>\\n      </Accordion.ItemTrigger>\\n      <Accordion.ItemContent>\\n        <div>{item} is a JavaScript library for building user interfaces.</div>\\n      </Accordion.ItemContent>\\n    </Accordion.Item>\\n  ))}\\n</Accordion.Root>\\n\"})}),\"\\n\",e(t.h3,{children:\"Accessing the Accordion API\"}),\"\\n\",e(t.p,{children:\"For advanced control, access the Accordion API using a function as a child\\ncomponent:\"}),\"\\n\",e(d,{id:\"render-prop\"}),\"\\n\",e(t.h3,{children:\"Controlled Accordion\"}),\"\\n\",o(t.p,{children:[\"To manage the Accordion's state, use the \",e(t.code,{children:\"value\"}),\" prop and update it with the\\n\",e(t.code,{children:\"onValueChange\"}),\" event:\"]}),\"\\n\",e(d,{id:\"controlled\"}),\"\\n\",e(t.h3,{children:\"Changing Orientation\"}),\"\\n\",o(t.p,{children:[\"Set the Accordion's orientation to vertical with the \",e(t.code,{children:\"orientation\"}),\" prop:\"]}),\"\\n\",e(d,{id:\"vertical\"}),\"\\n\",e(t.h3,{children:\"Disabling an Accordion Item\"}),\"\\n\",o(t.p,{children:[\"Disable any Accordion Item using the \",e(t.code,{children:\"disabled\"}),\" prop:\"]}),\"\\n\",e(d,{id:\"disabled\"}),\"\\n\",e(t.h2,{children:\"API Reference\"}),\"\\n\",e(t.p,{children:\"Explore our detailed API Reference for further customization:\"}),\"\\n\",e(r,{})]})}return{default:function(n={}){const{wrapper:o}=n.components||{};return o?e(o,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};function _missingMdxReference(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/accordion",
    "href": "/docs/components/accordion",
    "category": "components"
  },
  {
    "id": "avatar",
    "title": "Avatar",
    "description": "A graphical representation of the user, often used in profile sections.",
    "resources": {
      "zag": "avatar"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 66
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the avatar correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"avatar\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Avatar</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Handling Events</h3>\n<p><code>Avatar</code> allows you to listen for loading state changes.</p>\n<story id=\"Events\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Handling Events",
            "url": "#handling-events",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:a,Story:d}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),a||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the avatar correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"avatar\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Avatar\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Handling Events\"}),\"\\n\",t(r.p,{children:[n(r.code,{children:\"Avatar\"}),\" allows you to listen for loading state changes.\"]}),\"\\n\",n(d,{id:\"Events\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(a,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/avatar",
    "href": "/docs/components/avatar",
    "category": "components"
  },
  {
    "id": "carousel",
    "title": "Carousel",
    "description": "A slideshow component that cycles through elements.",
    "resources": {
      "zag": "carousel",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/carousel/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 105
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the carousel correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"carousel\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Carousel</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled Carousel</h3>\n<p>To create a controlled Carousel component, you can manage the state of the\ncarousel using the <code>index</code> prop and update it when the <code>onIndexChange</code> event\nhandler is called:</p>\n<story id=\"Controlled\">\n<h3>Customizing the Carousel</h3>\n<p>You can customize the Carousel component by setting various props. Here's an\nexample of a customized Carousel:</p>\n<story id=\"Customized\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Carousel",
            "url": "#controlled-carousel",
            "items": []
          },
          {
            "title": "Customizing the Carousel",
            "url": "#customizing-the-carousel",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(t){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:d,Story:a}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),o(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the carousel correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",o(r.blockquote,{children:[\"\\n\",o(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"carousel\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",o(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Carousel\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Controlled Carousel\"}),\"\\n\",o(r.p,{children:[\"To create a controlled Carousel component, you can manage the state of the\\ncarousel using the \",n(r.code,{children:\"index\"}),\" prop and update it when the \",n(r.code,{children:\"onIndexChange\"}),\" event\\nhandler is called:\"]}),\"\\n\",n(a,{id:\"Controlled\"}),\"\\n\",n(r.h3,{children:\"Customizing the Carousel\"}),\"\\n\",n(r.p,{children:\"You can customize the Carousel component by setting various props. Here's an\\nexample of a customized Carousel:\"}),\"\\n\",n(a,{id:\"Customized\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/carousel",
    "href": "/docs/components/carousel",
    "category": "components"
  },
  {
    "id": "checkbox",
    "title": "Checkbox",
    "description": "A control element that allows for multiple selections within a set.",
    "resources": {
      "zag": "checkbox",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 234
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the checkbox correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"checkbox\">\n<h3>Design impact on the asChild property</h3>\n<p>The <code>Checkbox.Root</code> element of the checkbox is a <code>label</code> element. This is\nbecause the checkbox is a form control and should be associated with a label to\nprovide context and meaning to the user. Otherwise, the HTML and accessibility\nstructure will be invalid.</p>\n<blockquote>\n<p>If you need to use the <code>asChild</code> property, make sure that the <code>label</code> element\nis the direct child of the <code>Checkbox.Root</code> component.</p>\n</blockquote>\n<h2>Examples</h2>\n<p>Learn how to use the <code>Checkbox</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled Checkbox</h3>\n<p>To create a controlled Checkbox component, manage the state of the checked\nstatus using the <code>checked</code> prop and update it when the <code>onCheckedChange</code> event\nhandler is called:</p>\n<story id=\"Controlled\">\n<h3>Indeterminate Checkbox</h3>\n<p>In some cases, you may need a checkbox to represent a state that is neither\nchecked nor unchecked, known as the indeterminate state. This can be achieved by\nsetting the <code>checked</code> prop to <code>indeterminate</code>:</p>\n<story id=\"Indeterminate\">\n<h3>Render Prop Usage</h3>\n<p>For cases where you need more flexibility in rendering, the Checkbox component\noffers the use of a render prop. The render prop function gives you access to\nthe checkbox's API, allowing you to customize the checkbox control's rendering:</p>\n<story id=\"RenderProp\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": [
          {
            "title": "Design impact on the asChild property",
            "url": "#design-impact-on-the-aschild-property",
            "items": []
          }
        ]
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Checkbox",
            "url": "#controlled-checkbox",
            "items": []
          },
          {
            "title": "Indeterminate Checkbox",
            "url": "#indeterminate-checkbox",
            "items": []
          },
          {
            "title": "Render Prop Usage",
            "url": "#render-prop-usage",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const c={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:i,ComponentTypes:h,Story:d}=c;return r||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),h||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(c.h2,{children:\"Anatomy\"}),\"\\n\",n(c.p,{children:\"To set up the checkbox correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"Each part includes a \",n(c.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"checkbox\"}),\"\\n\",n(c.h3,{children:\"Design impact on the asChild property\"}),\"\\n\",t(c.p,{children:[\"The \",n(c.code,{children:\"Checkbox.Root\"}),\" element of the checkbox is a \",n(c.code,{children:\"label\"}),\" element. This is\\nbecause the checkbox is a form control and should be associated with a label to\\nprovide context and meaning to the user. Otherwise, the HTML and accessibility\\nstructure will be invalid.\"]}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"If you need to use the \",n(c.code,{children:\"asChild\"}),\" property, make sure that the \",n(c.code,{children:\"label\"}),\" element\\nis the direct child of the \",n(c.code,{children:\"Checkbox.Root\"}),\" component.\"]}),\"\\n\"]}),\"\\n\",n(c.h2,{children:\"Examples\"}),\"\\n\",t(c.p,{children:[\"Learn how to use the \",n(c.code,{children:\"Checkbox\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(c.h3,{children:\"Controlled Checkbox\"}),\"\\n\",t(c.p,{children:[\"To create a controlled Checkbox component, manage the state of the checked\\nstatus using the \",n(c.code,{children:\"checked\"}),\" prop and update it when the \",n(c.code,{children:\"onCheckedChange\"}),\" event\\nhandler is called:\"]}),\"\\n\",n(d,{id:\"Controlled\"}),\"\\n\",n(c.h3,{children:\"Indeterminate Checkbox\"}),\"\\n\",t(c.p,{children:[\"In some cases, you may need a checkbox to represent a state that is neither\\nchecked nor unchecked, known as the indeterminate state. This can be achieved by\\nsetting the \",n(c.code,{children:\"checked\"}),\" prop to \",n(c.code,{children:\"indeterminate\"}),\":\"]}),\"\\n\",n(d,{id:\"Indeterminate\"}),\"\\n\",n(c.h3,{children:\"Render Prop Usage\"}),\"\\n\",n(c.p,{children:\"For cases where you need more flexibility in rendering, the Checkbox component\\noffers the use of a render prop. The render prop function gives you access to\\nthe checkbox's API, allowing you to customize the checkbox control's rendering:\"}),\"\\n\",n(d,{id:\"RenderProp\"}),\"\\n\",n(c.h2,{children:\"API Reference\"}),\"\\n\",n(h,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/checkbox",
    "href": "/docs/components/checkbox",
    "category": "components"
  },
  {
    "id": "clipboard",
    "title": "Clipboard",
    "description": "A component to copy text to the clipboard",
    "resources": {
      "zag": "clipboard"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 55
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the Clipboard correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"clipboard\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Clipboard</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": []
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",p:\"p\",...o.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:d,Story:a}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the Clipboard correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"clipboard\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Clipboard\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/clipboard",
    "href": "/docs/components/clipboard",
    "category": "components"
  },
  {
    "id": "collapsible",
    "title": "Collapsible",
    "description": "An interactive component that can be expanded or collapsed.",
    "resources": {
      "zag": "collapsible"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 182
    },
    "content": "<componentpreview>\n<h2>Animation</h2>\n<p>You can use CSS animations to create smooth transitions for opening and closing the Collapsible content.\nUtilize the <code>data-state</code> attribute in combination with the <code>--height</code> CSS variable to animate the open and closed states.</p>\n<pre><code class=\"language-css\">@keyframes slideDown {\n  from { height: 0; }\n  to { height: var(--height); }\n}\n\n@keyframes slideUp {\n  from { height: var(--height); }\n  to { height: 0; }\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='open'] {\n  animation: slideDown 250ms;\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='closed'] {\n  animation: slideUp 200ms;\n}\n</code></pre>\n<h2>Examples</h2>\n<p>Learn how to use the <code>Collapsible</code> component in your project. Let's examine\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Events</h3>\n<p>You can listen for the <code>onExitComplete</code> event to know when the <code>Collapsible.Content</code> is no longer visible:</p>\n<story id=\"OnExitComplete\">\n<h3>Lazy Mount</h3>\n<p>To delay the mounting of the <code>Collapsible.Content</code>, use the <code>lazyMount</code> prop:</p>\n<story id=\"LazyMount\">\n<h3>Unmount on Exit</h3>\n<p>To remove the <code>Collapsible.Content</code> from the DOM when it is not visible, use the\n<code>unmountOnExit</code> prop:</p>\n<story id=\"UnmountOnExit\">\n<h3>Combining Lazy Mount and Unmount on Exit</h3>\n<p>Both <code>lazyMount</code> and <code>unmountOnExit</code> can be combined to ensure that the component is\nmounted only when the <code>Collapsible</code> is expanded and unmounted when it is collapsed:</p>\n<story id=\"LazyMountAndUnmountOnExit\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></componentpreview>",
    "toc": [
      {
        "title": "Animation",
        "url": "#animation",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Events",
            "url": "#events",
            "items": []
          },
          {
            "title": "Lazy Mount",
            "url": "#lazy-mount",
            "items": []
          },
          {
            "title": "Unmount on Exit",
            "url": "#unmount-on-exit",
            "items": []
          },
          {
            "title": "Combining Lazy Mount and Unmount on Exit",
            "url": "#combining-lazy-mount-and-unmount-on-exit",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:n,jsx:e,jsxs:t}=arguments[0];function _createMdxContent(o){const i={code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",...o.components},{ComponentPreview:c,ComponentTypes:d,Story:r}=i;return c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),r||_missingMdxReference(\"Story\",!0),t(n,{children:[e(c,{}),\"\\n\",e(i.h2,{children:\"Animation\"}),\"\\n\",t(i.p,{children:[\"You can use CSS animations to create smooth transitions for opening and closing the Collapsible content.\\nUtilize the \",e(i.code,{children:\"data-state\"}),\" attribute in combination with the \",e(i.code,{children:\"--height\"}),\" CSS variable to animate the open and closed states.\"]}),\"\\n\",e(i.pre,{children:e(i.code,{className:\"language-css\",children:\"@keyframes slideDown {\\n  from { height: 0; }\\n  to { height: var(--height); }\\n}\\n\\n@keyframes slideUp {\\n  from { height: var(--height); }\\n  to { height: 0; }\\n}\\n\\n[data-scope='accordion'][data-part='item-content'][data-state='open'] {\\n  animation: slideDown 250ms;\\n}\\n\\n[data-scope='accordion'][data-part='item-content'][data-state='closed'] {\\n  animation: slideUp 200ms;\\n}\\n\"})}),\"\\n\",e(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",e(i.code,{children:\"Collapsible\"}),\" component in your project. Let's examine\\nthe most basic example:\"]}),\"\\n\",e(r,{id:\"Basic\"}),\"\\n\",e(i.h3,{children:\"Events\"}),\"\\n\",t(i.p,{children:[\"You can listen for the \",e(i.code,{children:\"onExitComplete\"}),\" event to know when the \",e(i.code,{children:\"Collapsible.Content\"}),\" is no longer visible:\"]}),\"\\n\",e(r,{id:\"OnExitComplete\"}),\"\\n\",e(i.h3,{children:\"Lazy Mount\"}),\"\\n\",t(i.p,{children:[\"To delay the mounting of the \",e(i.code,{children:\"Collapsible.Content\"}),\", use the \",e(i.code,{children:\"lazyMount\"}),\" prop:\"]}),\"\\n\",e(r,{id:\"LazyMount\"}),\"\\n\",e(i.h3,{children:\"Unmount on Exit\"}),\"\\n\",t(i.p,{children:[\"To remove the \",e(i.code,{children:\"Collapsible.Content\"}),\" from the DOM when it is not visible, use the\\n\",e(i.code,{children:\"unmountOnExit\"}),\" prop:\"]}),\"\\n\",e(r,{id:\"UnmountOnExit\"}),\"\\n\",e(i.h3,{children:\"Combining Lazy Mount and Unmount on Exit\"}),\"\\n\",t(i.p,{children:[\"Both \",e(i.code,{children:\"lazyMount\"}),\" and \",e(i.code,{children:\"unmountOnExit\"}),\" can be combined to ensure that the component is\\nmounted only when the \",e(i.code,{children:\"Collapsible\"}),\" is expanded and unmounted when it is collapsed:\"]}),\"\\n\",e(r,{id:\"LazyMountAndUnmountOnExit\"}),\"\\n\",e(i.h2,{children:\"API Reference\"}),\"\\n\",e(d,{})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};function _missingMdxReference(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/collapsible",
    "href": "/docs/components/collapsible",
    "category": "components"
  },
  {
    "id": "color-picker",
    "title": "Color Picker",
    "description": "A component that allows users to select a color from a color picker.",
    "resources": {
      "zag": "color-picker"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 89
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the color picker correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"color-picker\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>ColorPicker</code> component in your project. Let's take a look\nat the most basic example</p>\n<story id=\"Basic\">\n<h3>Controlled Color Picker</h3>\n<p>To create a controlled Color Picker component, manage the state of the current\ncolor using the <code>value</code> prop and update it when the <code>onValueChange</code> or\n<code>onValueChangeEnd</code> event handler is called:</p>\n<story id=\"Controlled\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Color Picker",
            "url": "#controlled-color-picker",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(t){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:d,Story:l}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),l||_missingMdxReference(\"Story\",!0),o(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the color picker correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",o(r.blockquote,{children:[\"\\n\",o(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"color-picker\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",o(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"ColorPicker\"}),\" component in your project. Let's take a look\\nat the most basic example\"]}),\"\\n\",n(l,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Controlled Color Picker\"}),\"\\n\",o(r.p,{children:[\"To create a controlled Color Picker component, manage the state of the current\\ncolor using the \",n(r.code,{children:\"value\"}),\" prop and update it when the \",n(r.code,{children:\"onValueChange\"}),\" or\\n\",n(r.code,{children:\"onValueChangeEnd\"}),\" event handler is called:\"]}),\"\\n\",n(l,{id:\"Controlled\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/color-picker",
    "href": "/docs/components/color-picker",
    "category": "components"
  },
  {
    "id": "combobox",
    "title": "Combobox",
    "description": "A single input field that combines the functionality of a select and input.",
    "resources": {
      "zag": "combobox",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/combobox/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 186
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the combobox correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"combobox\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Combobox</code> component in your project. Let's take a look at\nthe most basic example</p>\n<story id=\"Basic\">\n<h3>Advanced Customization</h3>\n<p>Extended example that shows usage with complex item objects, including disabled\nstate for certain options.</p>\n<story id=\"Advanced\">\n<h2>TypeScript Caveats in Vue</h2>\n<p>Under the hood for React and Solid frameworks, we supply a complex prop type\nwith a generic so that the type of the <code>items</code> prop matches the param type in\nthe function signatures for props such as the <code>isItemDisabled</code> prop, say. (See\nthe api reference table below) Unfortunately, generic typing is not supported in\nVue for components that contain props with slots and/or emits. Therefore, you\nwill not expect updated typing in this way.</p>\n<p>If you have a solution or a workaround to this problem, we would love the\ncontribution and request that you\n<a href=\"https://github.com/chakra-ui/ark/discussions/new?category=ideas\">open a Github idea discussion</a>\nto let us know a PoC you have to share!</p>\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Advanced Customization",
            "url": "#advanced-customization",
            "items": []
          }
        ]
      },
      {
        "title": "TypeScript Caveats in Vue",
        "url": "#typescript-caveats-in-vue",
        "items": []
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const i={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:a,ComponentTypes:c,Story:s}=i;return r||_missingMdxReference(\"Anatomy\",!0),a||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),s||_missingMdxReference(\"Story\",!0),t(e,{children:[n(a,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the combobox correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"combobox\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"Combobox\"}),\" component in your project. Let's take a look at\\nthe most basic example\"]}),\"\\n\",n(s,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Advanced Customization\"}),\"\\n\",n(i.p,{children:\"Extended example that shows usage with complex item objects, including disabled\\nstate for certain options.\"}),\"\\n\",n(s,{id:\"Advanced\"}),\"\\n\",n(i.h2,{children:\"TypeScript Caveats in Vue\"}),\"\\n\",t(i.p,{children:[\"Under the hood for React and Solid frameworks, we supply a complex prop type\\nwith a generic so that the type of the \",n(i.code,{children:\"items\"}),\" prop matches the param type in\\nthe function signatures for props such as the \",n(i.code,{children:\"isItemDisabled\"}),\" prop, say. (See\\nthe api reference table below) Unfortunately, generic typing is not supported in\\nVue for components that contain props with slots and/or emits. Therefore, you\\nwill not expect updated typing in this way.\"]}),\"\\n\",t(i.p,{children:[\"If you have a solution or a workaround to this problem, we would love the\\ncontribution and request that you\\n\",n(i.a,{href:\"https://github.com/chakra-ui/ark/discussions/new?category=ideas\",children:\"open a Github idea discussion\"}),\"\\nto let us know a PoC you have to share!\"]}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/combobox",
    "href": "/docs/components/combobox",
    "category": "components"
  },
  {
    "id": "date-picker",
    "title": "Date Picker",
    "description": "A component that allows users to select a date from a calendar.",
    "resources": {
      "zag": "date-picker"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 121
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the date picker correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"date-picker\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>DatePicker</code> component in your project. Let's take a look\nat the most basic example</p>\n<story id=\"Basic\">\n<h3>Range Selection</h3>\n<p>To create a Date Picker that allows a range selection, set the <code>selectionMode</code>\nprop to <code>range</code>.</p>\n<story id=\"Range\">\n<h3>Standalone Date Picker</h3>\n<p>In some cases, you might want to display a non-dismissible date picker. This can\nbe achieved by setting the <code>open</code> prop to <code>true</code> and <code>closeOnSelect</code> prop to\n<code>false</code>.</p>\n<blockquote>\n<p>Important to note that standalone date picker doesn't use the <code>Portal</code>,\n<code>Positioner</code> and <code>Content</code> components.</p>\n</blockquote>\n<story id=\"Standalone\">\n<h2>API Reference</h2>\n<componenttypes id=\"date-picker\"></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Range Selection",
            "url": "#range-selection",
            "items": []
          },
          {
            "title": "Standalone Date Picker",
            "url": "#standalone-date-picker",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const c={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:i,ComponentTypes:d,Story:a}=c;return r||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(c.h2,{children:\"Anatomy\"}),\"\\n\",n(c.p,{children:\"To set up the date picker correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"Each part includes a \",n(c.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"date-picker\"}),\"\\n\",n(c.h2,{children:\"Examples\"}),\"\\n\",t(c.p,{children:[\"Learn how to use the \",n(c.code,{children:\"DatePicker\"}),\" component in your project. Let's take a look\\nat the most basic example\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(c.h3,{children:\"Range Selection\"}),\"\\n\",t(c.p,{children:[\"To create a Date Picker that allows a range selection, set the \",n(c.code,{children:\"selectionMode\"}),\"\\nprop to \",n(c.code,{children:\"range\"}),\".\"]}),\"\\n\",n(a,{id:\"Range\"}),\"\\n\",n(c.h3,{children:\"Standalone Date Picker\"}),\"\\n\",t(c.p,{children:[\"In some cases, you might want to display a non-dismissible date picker. This can\\nbe achieved by setting the \",n(c.code,{children:\"open\"}),\" prop to \",n(c.code,{children:\"true\"}),\" and \",n(c.code,{children:\"closeOnSelect\"}),\" prop to\\n\",n(c.code,{children:\"false\"}),\".\"]}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"Important to note that standalone date picker doesn't use the \",n(c.code,{children:\"Portal\"}),\",\\n\",n(c.code,{children:\"Positioner\"}),\" and \",n(c.code,{children:\"Content\"}),\" components.\"]}),\"\\n\"]}),\"\\n\",n(a,{id:\"Standalone\"}),\"\\n\",n(c.h2,{children:\"API Reference\"}),\"\\n\",n(d,{id:\"date-picker\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/date-picker",
    "href": "/docs/components/date-picker",
    "category": "components"
  },
  {
    "id": "dialog",
    "title": "Dialog",
    "description": "A modal window that appears on top of the main content.",
    "resources": {
      "zag": "dialog",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 191
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To use the dialog component correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"dialog\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Dialog</code> component in your project. Let's take a look at\nthe most basic example</p>\n<story id=\"Basic\">\n<h3>Controlled Dialog</h3>\n<p>To create a controlled Dialog component, manage the state of the dialog using\nthe <code>open</code> and <code>onOpenChange</code> props:</p>\n<story id=\"Controlled\">\n<h3>Lazy Mounting</h3>\n<p>Lazy mounting is a feature that allows the content of a dialog to be rendered\nonly when the dialog is first opened. This is useful for performance\noptimization, especially when dialog content is large or complex. To enable lazy\nmounting, use the <code>lazyMount</code> prop on the <code>Dialog.Root</code> component.</p>\n<p>In addition, the <code>unmountOnExit</code> prop can be used in conjunction with\n<code>lazyMount</code> to unmount the dialog content when the Dialog is closed, freeing up\nresources. The next time the dialog is activated, its content will be\nre-rendered.</p>\n<story id=\"LazyMount\">\n<h3>Using Render Function</h3>\n<p>The Dialog component supports the use of a render function as a child for more\ncontrol. This allows access to dialog states like <code>isOpen</code>:</p>\n<story id=\"RenderFn\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Dialog",
            "url": "#controlled-dialog",
            "items": []
          },
          {
            "title": "Lazy Mounting",
            "url": "#lazy-mounting",
            "items": []
          },
          {
            "title": "Using Render Function",
            "url": "#using-render-function",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(t){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components},{Anatomy:r,ComponentPreview:c,ComponentTypes:d,Story:a}=i;return r||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),o(e,{children:[n(c,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To use the dialog component correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",o(i.blockquote,{children:[\"\\n\",o(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"dialog\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",o(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"Dialog\"}),\" component in your project. Let's take a look at\\nthe most basic example\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Controlled Dialog\"}),\"\\n\",o(i.p,{children:[\"To create a controlled Dialog component, manage the state of the dialog using\\nthe \",n(i.code,{children:\"open\"}),\" and \",n(i.code,{children:\"onOpenChange\"}),\" props:\"]}),\"\\n\",n(a,{id:\"Controlled\"}),\"\\n\",n(i.h3,{children:\"Lazy Mounting\"}),\"\\n\",o(i.p,{children:[\"Lazy mounting is a feature that allows the content of a dialog to be rendered\\nonly when the dialog is first opened. This is useful for performance\\noptimization, especially when dialog content is large or complex. To enable lazy\\nmounting, use the \",n(i.code,{children:\"lazyMount\"}),\" prop on the \",n(i.code,{children:\"Dialog.Root\"}),\" component.\"]}),\"\\n\",o(i.p,{children:[\"In addition, the \",n(i.code,{children:\"unmountOnExit\"}),\" prop can be used in conjunction with\\n\",n(i.code,{children:\"lazyMount\"}),\" to unmount the dialog content when the Dialog is closed, freeing up\\nresources. The next time the dialog is activated, its content will be\\nre-rendered.\"]}),\"\\n\",n(a,{id:\"LazyMount\"}),\"\\n\",n(i.h3,{children:\"Using Render Function\"}),\"\\n\",o(i.p,{children:[\"The Dialog component supports the use of a render function as a child for more\\ncontrol. This allows access to dialog states like \",n(i.code,{children:\"isOpen\"}),\":\"]}),\"\\n\",n(a,{id:\"RenderFn\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/dialog",
    "href": "/docs/components/dialog",
    "category": "components"
  },
  {
    "id": "editable",
    "title": "Editable",
    "description": "A component that allows users to edit text in place.",
    "resources": {
      "zag": "editable"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 207
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the editable correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"editable\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Editable</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Using custom controls</h3>\n<p>In some cases, you might need to use custom controls to toggle the edit and read\nmode. We use the render prop pattern to provide access to the internal state of\nthe component.</p>\n<story id=\"CustomControls\">\n<h3>Auto-resizing the editable</h3>\n<p>To auto-grow the editable as the content changes, set the <code>autoResize</code> prop to\n<code>true</code>.</p>\n<pre><code class=\"language-tsx\">&#x3C;Editable.Root placeholder=\"Placeholder\" autoResize>\n  {/*...*/}\n&#x3C;/Editable.Root>\n</code></pre>\n<h3>Setting a maxWidth</h3>\n<p>It is a common pattern to set a maximum of the editable as it auto-grows. To\nachieve this, set the <code>maxWidth</code> prop to the desired value.</p>\n<pre><code class=\"language-tsx\">&#x3C;Editable.Root placeholder=\"Placeholder\" autoResize maxWidth=\"320px\">\n  {/*...*/}\n&#x3C;/Editable.Root>\n</code></pre>\n<h3>Editing with double click</h3>\n<p>The editable supports two modes of activating the \"edit\" state:</p>\n<ul>\n<li>when the preview part is focused (with pointer or keyboard).</li>\n<li>when the preview part is double-clicked.</li>\n</ul>\n<p>To change the mode to double-click, pass the prop <code>activationMode=\"dblclick\"</code>.</p>\n<pre><code class=\"language-tsx\">&#x3C;Editable.Root placeholder=\"Placeholder\" activationMode=\"dblclick\">\n  {/*...*/}\n&#x3C;/Editable.Root>\n</code></pre>\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Using custom controls",
            "url": "#using-custom-controls",
            "items": []
          },
          {
            "title": "Auto-resizing the editable",
            "url": "#auto-resizing-the-editable",
            "items": []
          },
          {
            "title": "Setting a maxWidth",
            "url": "#setting-a-maxwidth",
            "items": []
          },
          {
            "title": "Editing with double click",
            "url": "#editing-with-double-click",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:t,jsxs:n}=arguments[0];function _createMdxContent(o){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...o.components},{Anatomy:d,ComponentPreview:r,ComponentTypes:c,Story:l}=i;return d||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),l||_missingMdxReference(\"Story\",!0),n(e,{children:[t(r,{}),\"\\n\",t(i.h2,{children:\"Anatomy\"}),\"\\n\",t(i.p,{children:\"To set up the editable correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",n(i.blockquote,{children:[\"\\n\",n(i.p,{children:[\"Each part includes a \",t(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",t(d,{id:\"editable\"}),\"\\n\",t(i.h2,{children:\"Examples\"}),\"\\n\",n(i.p,{children:[\"Learn how to use the \",t(i.code,{children:\"Editable\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",t(l,{id:\"Basic\"}),\"\\n\",t(i.h3,{children:\"Using custom controls\"}),\"\\n\",t(i.p,{children:\"In some cases, you might need to use custom controls to toggle the edit and read\\nmode. We use the render prop pattern to provide access to the internal state of\\nthe component.\"}),\"\\n\",t(l,{id:\"CustomControls\"}),\"\\n\",t(i.h3,{children:\"Auto-resizing the editable\"}),\"\\n\",n(i.p,{children:[\"To auto-grow the editable as the content changes, set the \",t(i.code,{children:\"autoResize\"}),\" prop to\\n\",t(i.code,{children:\"true\"}),\".\"]}),\"\\n\",t(i.pre,{children:t(i.code,{className:\"language-tsx\",children:'<Editable.Root placeholder=\"Placeholder\" autoResize>\\n  {/*...*/}\\n</Editable.Root>\\n'})}),\"\\n\",t(i.h3,{children:\"Setting a maxWidth\"}),\"\\n\",n(i.p,{children:[\"It is a common pattern to set a maximum of the editable as it auto-grows. To\\nachieve this, set the \",t(i.code,{children:\"maxWidth\"}),\" prop to the desired value.\"]}),\"\\n\",t(i.pre,{children:t(i.code,{className:\"language-tsx\",children:'<Editable.Root placeholder=\"Placeholder\" autoResize maxWidth=\"320px\">\\n  {/*...*/}\\n</Editable.Root>\\n'})}),\"\\n\",t(i.h3,{children:\"Editing with double click\"}),\"\\n\",t(i.p,{children:'The editable supports two modes of activating the \"edit\" state:'}),\"\\n\",n(i.ul,{children:[\"\\n\",t(i.li,{children:\"when the preview part is focused (with pointer or keyboard).\"}),\"\\n\",t(i.li,{children:\"when the preview part is double-clicked.\"}),\"\\n\"]}),\"\\n\",n(i.p,{children:[\"To change the mode to double-click, pass the prop \",t(i.code,{children:'activationMode=\"dblclick\"'}),\".\"]}),\"\\n\",t(i.pre,{children:t(i.code,{className:\"language-tsx\",children:'<Editable.Root placeholder=\"Placeholder\" activationMode=\"dblclick\">\\n  {/*...*/}\\n</Editable.Root>\\n'})}),\"\\n\",t(i.h2,{children:\"API Reference\"}),\"\\n\",t(c,{})]})}return{default:function(e={}){const{wrapper:n}=e.components||{};return n?t(n,{...e,children:t(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/editable",
    "href": "/docs/components/editable",
    "category": "components"
  },
  {
    "id": "file-upload",
    "title": "File Upload",
    "description": "A component that is used to upload multiple files.",
    "resources": {
      "zag": "file-upload"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 57
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the file upload component correctly, you'll need to understand its\nanatomy and how we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"file-upload\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>FileUpload</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": []
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",p:\"p\",...o.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:d,Story:a}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the file upload component correctly, you'll need to understand its\\nanatomy and how we name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"file-upload\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"FileUpload\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/file-upload",
    "href": "/docs/components/file-upload",
    "category": "components"
  },
  {
    "id": "hover-card",
    "title": "Hover Card",
    "description": "A card that appears when a user hovers over an element.",
    "resources": {
      "zag": "hover-card"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 135
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the hover card correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"hover-card\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>HoverCard</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled HoverCard</h3>\n<p>The controlled <code>HoverCard</code> component provides an interface for managing the\nstate of the hover card using the <code>open</code> and <code>onOpenChange</code> props:</p>\n<story id=\"Controlled\">\n<h3>Custom Positioning</h3>\n<p>The <code>HoverCard</code> component can be customized in its placement and distance from\nthe trigger element through the <code>positioning</code> prop:</p>\n<story id=\"Positioning\">\n<h3>Render Prop Usage</h3>\n<p>The <code>HoverCard</code> component can also accept a render prop, giving the user more\ncontrol over rendering behavior. This is useful for dynamically updating the\ntrigger based on the state of the <code>HoverCard</code>:</p>\n<story id=\"RenderProp\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled HoverCard",
            "url": "#controlled-hovercard",
            "items": []
          },
          {
            "title": "Custom Positioning",
            "url": "#custom-positioning",
            "items": []
          },
          {
            "title": "Render Prop Usage",
            "url": "#render-prop-usage",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(r){const t={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...r.components},{Anatomy:i,ComponentPreview:d,ComponentTypes:c,Story:h}=t;return i||_missingMdxReference(\"Anatomy\",!0),d||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),h||_missingMdxReference(\"Story\",!0),o(e,{children:[n(d,{}),\"\\n\",n(t.h2,{children:\"Anatomy\"}),\"\\n\",n(t.p,{children:\"To set up the hover card correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",o(t.blockquote,{children:[\"\\n\",o(t.p,{children:[\"Each part includes a \",n(t.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"hover-card\"}),\"\\n\",n(t.h2,{children:\"Examples\"}),\"\\n\",o(t.p,{children:[\"Learn how to use the \",n(t.code,{children:\"HoverCard\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(h,{id:\"Basic\"}),\"\\n\",n(t.h3,{children:\"Controlled HoverCard\"}),\"\\n\",o(t.p,{children:[\"The controlled \",n(t.code,{children:\"HoverCard\"}),\" component provides an interface for managing the\\nstate of the hover card using the \",n(t.code,{children:\"open\"}),\" and \",n(t.code,{children:\"onOpenChange\"}),\" props:\"]}),\"\\n\",n(h,{id:\"Controlled\"}),\"\\n\",n(t.h3,{children:\"Custom Positioning\"}),\"\\n\",o(t.p,{children:[\"The \",n(t.code,{children:\"HoverCard\"}),\" component can be customized in its placement and distance from\\nthe trigger element through the \",n(t.code,{children:\"positioning\"}),\" prop:\"]}),\"\\n\",n(h,{id:\"Positioning\"}),\"\\n\",n(t.h3,{children:\"Render Prop Usage\"}),\"\\n\",o(t.p,{children:[\"The \",n(t.code,{children:\"HoverCard\"}),\" component can also accept a render prop, giving the user more\\ncontrol over rendering behavior. This is useful for dynamically updating the\\ntrigger based on the state of the \",n(t.code,{children:\"HoverCard\"}),\":\"]}),\"\\n\",n(h,{id:\"RenderProp\"}),\"\\n\",n(t.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/hover-card",
    "href": "/docs/components/hover-card",
    "category": "components"
  },
  {
    "id": "menu",
    "title": "Menu",
    "description": "A list of options that appears when a user interacts with a button.",
    "resources": {
      "zag": "menu",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/menubar/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 230
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the menu correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"menu\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Menu</code> component in your project. Let's take a look at the\nmost basic example:</p>\n<story id=\"Basic\">\n<h3>Listening to item selection</h3>\n<p>Pass the <code>onSelect</code> prop to the Menu component to perform some custom logic when\nan item is selected. The callback is invoked with the <code>id</code> of the item.</p>\n<story id=\"Controlled\">\n<h3>Grouping menu items</h3>\n<p>When the number of menu items gets much, it might be useful to group related\nmenu items. To achieve this, render the <code>Menu.ItemGroup</code> component around the\n<code>Menu.Item</code> components. The <code>Menu.ItemGroupLabel</code> component can be used to add a\nlabel to the group.</p>\n<story id=\"Group\">\n<h3>Separating menu items</h3>\n<p>To separate menu items, render the <code>Menu.Separator</code> component.</p>\n<story id=\"Separator\">\n<h3>Context menu</h3>\n<p>To show the menu when a trigger element is right-clicked, use the\n<code>Menu.ContextTrigger</code> component.</p>\n<p>Context menus are also opened during a long-press of roughly <code>700ms</code> when the\npointer is pen or touch.</p>\n<story id=\"Context\">\n<h3>Nested menu</h3>\n<p>To show a nested menu, render another <code>Menu</code> component and use the\n<code>Menu.TriggerItem</code> component to open the submenu.</p>\n<story id=\"Nested\">\n<h3>Checkbox</h3>\n<p>To add a checkbox to a menu item, use the <code>Menu.Checkbox</code> component.</p>\n<story id=\"Checkbox\">\n<h3>Radio Group</h3>\n<p>To group radio option items, use the <code>Menu.RadioGroup</code> component.</p>\n<story id=\"RadioGroup\">\n<h2>API Reference</h2>\n<componenttypes id=\"menu\"></componenttypes></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Listening to item selection",
            "url": "#listening-to-item-selection",
            "items": []
          },
          {
            "title": "Grouping menu items",
            "url": "#grouping-menu-items",
            "items": []
          },
          {
            "title": "Separating menu items",
            "url": "#separating-menu-items",
            "items": []
          },
          {
            "title": "Context menu",
            "url": "#context-menu",
            "items": []
          },
          {
            "title": "Nested menu",
            "url": "#nested-menu",
            "items": []
          },
          {
            "title": "Checkbox",
            "url": "#checkbox",
            "items": []
          },
          {
            "title": "Radio Group",
            "url": "#radio-group",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(t){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components},{Anatomy:i,ComponentPreview:c,ComponentTypes:d,Story:h}=r;return i||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),h||_missingMdxReference(\"Story\",!0),o(e,{children:[n(c,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the menu correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",o(r.blockquote,{children:[\"\\n\",o(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"menu\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",o(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Menu\"}),\" component in your project. Let's take a look at the\\nmost basic example:\"]}),\"\\n\",n(h,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Listening to item selection\"}),\"\\n\",o(r.p,{children:[\"Pass the \",n(r.code,{children:\"onSelect\"}),\" prop to the Menu component to perform some custom logic when\\nan item is selected. The callback is invoked with the \",n(r.code,{children:\"id\"}),\" of the item.\"]}),\"\\n\",n(h,{id:\"Controlled\"}),\"\\n\",n(r.h3,{children:\"Grouping menu items\"}),\"\\n\",o(r.p,{children:[\"When the number of menu items gets much, it might be useful to group related\\nmenu items. To achieve this, render the \",n(r.code,{children:\"Menu.ItemGroup\"}),\" component around the\\n\",n(r.code,{children:\"Menu.Item\"}),\" components. The \",n(r.code,{children:\"Menu.ItemGroupLabel\"}),\" component can be used to add a\\nlabel to the group.\"]}),\"\\n\",n(h,{id:\"Group\"}),\"\\n\",n(r.h3,{children:\"Separating menu items\"}),\"\\n\",o(r.p,{children:[\"To separate menu items, render the \",n(r.code,{children:\"Menu.Separator\"}),\" component.\"]}),\"\\n\",n(h,{id:\"Separator\"}),\"\\n\",n(r.h3,{children:\"Context menu\"}),\"\\n\",o(r.p,{children:[\"To show the menu when a trigger element is right-clicked, use the\\n\",n(r.code,{children:\"Menu.ContextTrigger\"}),\" component.\"]}),\"\\n\",o(r.p,{children:[\"Context menus are also opened during a long-press of roughly \",n(r.code,{children:\"700ms\"}),\" when the\\npointer is pen or touch.\"]}),\"\\n\",n(h,{id:\"Context\"}),\"\\n\",n(r.h3,{children:\"Nested menu\"}),\"\\n\",o(r.p,{children:[\"To show a nested menu, render another \",n(r.code,{children:\"Menu\"}),\" component and use the\\n\",n(r.code,{children:\"Menu.TriggerItem\"}),\" component to open the submenu.\"]}),\"\\n\",n(h,{id:\"Nested\"}),\"\\n\",n(r.h3,{children:\"Checkbox\"}),\"\\n\",o(r.p,{children:[\"To add a checkbox to a menu item, use the \",n(r.code,{children:\"Menu.Checkbox\"}),\" component.\"]}),\"\\n\",n(h,{id:\"Checkbox\"}),\"\\n\",n(r.h3,{children:\"Radio Group\"}),\"\\n\",o(r.p,{children:[\"To group radio option items, use the \",n(r.code,{children:\"Menu.RadioGroup\"}),\" component.\"]}),\"\\n\",n(h,{id:\"RadioGroup\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{id:\"menu\"})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/menu",
    "href": "/docs/components/menu",
    "category": "components"
  },
  {
    "id": "number-input",
    "title": "Number Input",
    "description": "A field that allows user input of numeric values.",
    "resources": {
      "zag": "number-input",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 290
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the number input correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"number-input\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>NumberInput</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Setting a minimum and maximum value</h3>\n<p>Pass the <code>min</code> prop or <code>max</code> prop to set an upper and lower limit for the input.\nBy default, the input will restrict the value to stay within the specified\nrange.</p>\n<story id=\"MinMax\">\n<h3>Adjusting the precision of the value</h3>\n<p>In some cases, you might need the value to be rounded to specific decimal\npoints. Set the <code>formatOptions</code> and provide <code>Intl.NumberFormatOptions</code> such as\n<code>maximumFractionDigits</code> or <code>minimumFractionDigits</code>.</p>\n<story id=\"FractionDigits\">\n<h3>Scrubbing the input value</h3>\n<p>The NumberInput supports the scrubber interaction pattern. To use this pattern,\nrender the <code>NumberInput.Scrubber</code> component. It uses the Pointer lock API and\ntracks the pointer movement. It also renders a virtual cursor which mimics the\nreal cursor's pointer.</p>\n<story id=\"Scrubber\">\n<h3>Using the mouse wheel to change value</h3>\n<p>The NumberInput exposes a way to increment/decrement the value using the mouse\nwheel event. To activate this, set the <code>allowMouseWheel</code> prop to <code>true</code>.</p>\n<story id=\"MouseWheel\">\n<h3>Clamp value when user blurs the input</h3>\n<p>In most cases, users can type custom values in the input field. If the typed\nvalue is greater than the max, the value is reset to max when the user blur out\nof the input.</p>\n<p>To disable this behavior, pass <code>clampValueOnBlur</code> and set to <code>false</code>.</p>\n<story id=\"NoClamp\">\n<h3>Usage within forms</h3>\n<p>To use the number input within forms, set the <code>name</code> prop.</p>\n<story id=\"FormUsage\">\n<h3>Format and parse value</h3>\n<p>To apply custom formatting to the input's value, set the <code>formatOptions</code> and\nprovide <code>Intl.NumberFormatOptions</code> such as <code>style</code> and <code>currency</code>.</p>\n<story id=\"Formatted\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Setting a minimum and maximum value",
            "url": "#setting-a-minimum-and-maximum-value",
            "items": []
          },
          {
            "title": "Adjusting the precision of the value",
            "url": "#adjusting-the-precision-of-the-value",
            "items": []
          },
          {
            "title": "Scrubbing the input value",
            "url": "#scrubbing-the-input-value",
            "items": []
          },
          {
            "title": "Using the mouse wheel to change value",
            "url": "#using-the-mouse-wheel-to-change-value",
            "items": []
          },
          {
            "title": "Clamp value when user blurs the input",
            "url": "#clamp-value-when-user-blurs-the-input",
            "items": []
          },
          {
            "title": "Usage within forms",
            "url": "#usage-within-forms",
            "items": []
          },
          {
            "title": "Format and parse value",
            "url": "#format-and-parse-value",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(r){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...r.components},{Anatomy:o,ComponentPreview:c,ComponentTypes:h,Story:d}=i;return o||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),h||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the number input correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(o,{id:\"number-input\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"NumberInput\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Setting a minimum and maximum value\"}),\"\\n\",t(i.p,{children:[\"Pass the \",n(i.code,{children:\"min\"}),\" prop or \",n(i.code,{children:\"max\"}),\" prop to set an upper and lower limit for the input.\\nBy default, the input will restrict the value to stay within the specified\\nrange.\"]}),\"\\n\",n(d,{id:\"MinMax\"}),\"\\n\",n(i.h3,{children:\"Adjusting the precision of the value\"}),\"\\n\",t(i.p,{children:[\"In some cases, you might need the value to be rounded to specific decimal\\npoints. Set the \",n(i.code,{children:\"formatOptions\"}),\" and provide \",n(i.code,{children:\"Intl.NumberFormatOptions\"}),\" such as\\n\",n(i.code,{children:\"maximumFractionDigits\"}),\" or \",n(i.code,{children:\"minimumFractionDigits\"}),\".\"]}),\"\\n\",n(d,{id:\"FractionDigits\"}),\"\\n\",n(i.h3,{children:\"Scrubbing the input value\"}),\"\\n\",t(i.p,{children:[\"The NumberInput supports the scrubber interaction pattern. To use this pattern,\\nrender the \",n(i.code,{children:\"NumberInput.Scrubber\"}),\" component. It uses the Pointer lock API and\\ntracks the pointer movement. It also renders a virtual cursor which mimics the\\nreal cursor's pointer.\"]}),\"\\n\",n(d,{id:\"Scrubber\"}),\"\\n\",n(i.h3,{children:\"Using the mouse wheel to change value\"}),\"\\n\",t(i.p,{children:[\"The NumberInput exposes a way to increment/decrement the value using the mouse\\nwheel event. To activate this, set the \",n(i.code,{children:\"allowMouseWheel\"}),\" prop to \",n(i.code,{children:\"true\"}),\".\"]}),\"\\n\",n(d,{id:\"MouseWheel\"}),\"\\n\",n(i.h3,{children:\"Clamp value when user blurs the input\"}),\"\\n\",n(i.p,{children:\"In most cases, users can type custom values in the input field. If the typed\\nvalue is greater than the max, the value is reset to max when the user blur out\\nof the input.\"}),\"\\n\",t(i.p,{children:[\"To disable this behavior, pass \",n(i.code,{children:\"clampValueOnBlur\"}),\" and set to \",n(i.code,{children:\"false\"}),\".\"]}),\"\\n\",n(d,{id:\"NoClamp\"}),\"\\n\",n(i.h3,{children:\"Usage within forms\"}),\"\\n\",t(i.p,{children:[\"To use the number input within forms, set the \",n(i.code,{children:\"name\"}),\" prop.\"]}),\"\\n\",n(d,{id:\"FormUsage\"}),\"\\n\",n(i.h3,{children:\"Format and parse value\"}),\"\\n\",t(i.p,{children:[\"To apply custom formatting to the input's value, set the \",n(i.code,{children:\"formatOptions\"}),\" and\\nprovide \",n(i.code,{children:\"Intl.NumberFormatOptions\"}),\" such as \",n(i.code,{children:\"style\"}),\" and \",n(i.code,{children:\"currency\"}),\".\"]}),\"\\n\",n(d,{id:\"Formatted\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(h,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/number-input",
    "href": "/docs/components/number-input",
    "category": "components"
  },
  {
    "id": "pagination",
    "title": "Pagination",
    "description": "A navigation component that allows users to browse through pages.",
    "resources": {
      "zag": "pagination"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 110
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the pagination correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"pagination\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Pagination</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled Pagination</h3>\n<p>To create a controlled Pagination component, manage the state of the current\npage using the <code>page</code> prop and update it when the <code>onPageChange</code> event handler\nis called:</p>\n<story id=\"Controlled\">\n<h3>Customizing Pagination</h3>\n<p>You can customize the Pagination component by setting various props such as\n<code>dir</code>, <code>pageSize</code>, <code>siblingCount</code>, and <code>translations</code>. Here's an example of a\ncustomized Pagination:</p>\n<story id=\"Customized\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Pagination",
            "url": "#controlled-pagination",
            "items": []
          },
          {
            "title": "Customizing Pagination",
            "url": "#customizing-pagination",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:c,ComponentTypes:a,Story:d}=i;return r||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),a||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the pagination correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"pagination\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"Pagination\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Controlled Pagination\"}),\"\\n\",t(i.p,{children:[\"To create a controlled Pagination component, manage the state of the current\\npage using the \",n(i.code,{children:\"page\"}),\" prop and update it when the \",n(i.code,{children:\"onPageChange\"}),\" event handler\\nis called:\"]}),\"\\n\",n(d,{id:\"Controlled\"}),\"\\n\",n(i.h3,{children:\"Customizing Pagination\"}),\"\\n\",t(i.p,{children:[\"You can customize the Pagination component by setting various props such as\\n\",n(i.code,{children:\"dir\"}),\", \",n(i.code,{children:\"pageSize\"}),\", \",n(i.code,{children:\"siblingCount\"}),\", and \",n(i.code,{children:\"translations\"}),\". Here's an example of a\\ncustomized Pagination:\"]}),\"\\n\",n(d,{id:\"Customized\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(a,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/pagination",
    "href": "/docs/components/pagination",
    "category": "components"
  },
  {
    "id": "pin-input",
    "title": "Pin Input",
    "description": "For pin or verification codes with auto-focus transfer and masking options.",
    "resources": {
      "zag": "pin-input"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 263
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the pin input correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"pin-input\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>PinInput</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Setting a default value</h3>\n<p>To set the initial value of the pin input, set the <code>defaultValue</code> prop.</p>\n<story id=\"InitialValue\">\n<h3>Changing the placeholder</h3>\n<p>To customize the default pin input placeholder <code>○</code> for each input, pass the\nplaceholder prop and set it to your desired value.</p>\n<story id=\"Customized\">\n<h3>Blur on complete</h3>\n<p>By default, the last input maintains focus when filled, and we invoke the\n<code>onValueComplete</code> callback. To blur the last input when the user completes the\ninput, set the prop <code>blurOnComplete</code> to <code>true</code>.</p>\n<story id=\"Blurred\">\n<h3>Using OTP mode</h3>\n<p>To trigger smartphone OTP auto-suggestion, it is recommended to set the\n<code>autocomplete</code> attribute to \"one-time-code\". The pin input component provides\nsupport for this automatically when you set the <code>otp</code> prop to true.</p>\n<story id=\"OTPMode\">\n<h3>Securing the text input</h3>\n<p>When collecting private or sensitive information using the pin input, you might\nneed to mask the value entered, similar to <code>&#x3C;input type=\"password\"/></code>. Pass the\n<code>mask</code> prop to <code>true</code>.</p>\n<story id=\"WithMask\">\n<h3>Listening for changes</h3>\n<p>The pin input component invokes several callback functions when the user enters:</p>\n<ul>\n<li><code>onValueChange</code> — Callback invoked when the value is changed.</li>\n<li><code>onValueComplete</code> — Callback invoked when all fields have been completed (by\ntyping or pasting).</li>\n<li><code>onValueInvalid</code> — Callback invoked when an invalid value is entered into the\ninput. An invalid value is any value that doesn't match the specified \"type\".</li>\n</ul>\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Setting a default value",
            "url": "#setting-a-default-value",
            "items": []
          },
          {
            "title": "Changing the placeholder",
            "url": "#changing-the-placeholder",
            "items": []
          },
          {
            "title": "Blur on complete",
            "url": "#blur-on-complete",
            "items": []
          },
          {
            "title": "Using OTP mode",
            "url": "#using-otp-mode",
            "items": []
          },
          {
            "title": "Securing the text input",
            "url": "#securing-the-text-input",
            "items": []
          },
          {
            "title": "Listening for changes",
            "url": "#listening-for-changes",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const o={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...i.components},{Anatomy:l,ComponentPreview:r,ComponentTypes:d,Story:c}=o;return l||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),c||_missingMdxReference(\"Story\",!0),t(e,{children:[n(r,{}),\"\\n\",n(o.h2,{children:\"Anatomy\"}),\"\\n\",n(o.p,{children:\"To set up the pin input correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(o.blockquote,{children:[\"\\n\",t(o.p,{children:[\"Each part includes a \",n(o.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(l,{id:\"pin-input\"}),\"\\n\",n(o.h2,{children:\"Examples\"}),\"\\n\",t(o.p,{children:[\"Learn how to use the \",n(o.code,{children:\"PinInput\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(c,{id:\"Basic\"}),\"\\n\",n(o.h3,{children:\"Setting a default value\"}),\"\\n\",t(o.p,{children:[\"To set the initial value of the pin input, set the \",n(o.code,{children:\"defaultValue\"}),\" prop.\"]}),\"\\n\",n(c,{id:\"InitialValue\"}),\"\\n\",n(o.h3,{children:\"Changing the placeholder\"}),\"\\n\",t(o.p,{children:[\"To customize the default pin input placeholder \",n(o.code,{children:\"○\"}),\" for each input, pass the\\nplaceholder prop and set it to your desired value.\"]}),\"\\n\",n(c,{id:\"Customized\"}),\"\\n\",n(o.h3,{children:\"Blur on complete\"}),\"\\n\",t(o.p,{children:[\"By default, the last input maintains focus when filled, and we invoke the\\n\",n(o.code,{children:\"onValueComplete\"}),\" callback. To blur the last input when the user completes the\\ninput, set the prop \",n(o.code,{children:\"blurOnComplete\"}),\" to \",n(o.code,{children:\"true\"}),\".\"]}),\"\\n\",n(c,{id:\"Blurred\"}),\"\\n\",n(o.h3,{children:\"Using OTP mode\"}),\"\\n\",t(o.p,{children:[\"To trigger smartphone OTP auto-suggestion, it is recommended to set the\\n\",n(o.code,{children:\"autocomplete\"}),' attribute to \"one-time-code\". The pin input component provides\\nsupport for this automatically when you set the ',n(o.code,{children:\"otp\"}),\" prop to true.\"]}),\"\\n\",n(c,{id:\"OTPMode\"}),\"\\n\",n(o.h3,{children:\"Securing the text input\"}),\"\\n\",t(o.p,{children:[\"When collecting private or sensitive information using the pin input, you might\\nneed to mask the value entered, similar to \",n(o.code,{children:'<input type=\"password\"/>'}),\". Pass the\\n\",n(o.code,{children:\"mask\"}),\" prop to \",n(o.code,{children:\"true\"}),\".\"]}),\"\\n\",n(c,{id:\"WithMask\"}),\"\\n\",n(o.h3,{children:\"Listening for changes\"}),\"\\n\",n(o.p,{children:\"The pin input component invokes several callback functions when the user enters:\"}),\"\\n\",t(o.ul,{children:[\"\\n\",t(o.li,{children:[n(o.code,{children:\"onValueChange\"}),\" — Callback invoked when the value is changed.\"]}),\"\\n\",t(o.li,{children:[n(o.code,{children:\"onValueComplete\"}),\" — Callback invoked when all fields have been completed (by\\ntyping or pasting).\"]}),\"\\n\",t(o.li,{children:[n(o.code,{children:\"onValueInvalid\"}),' — Callback invoked when an invalid value is entered into the\\ninput. An invalid value is any value that doesn\\'t match the specified \"type\".']}),\"\\n\"]}),\"\\n\",n(o.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/pin-input",
    "href": "/docs/components/pin-input",
    "category": "components"
  },
  {
    "id": "popover",
    "title": "Popover",
    "description": "An overlay that displays additional information or options when triggered.",
    "resources": {
      "zag": "popover"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 297
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the popover correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"popover\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Popover</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Using a Portal</h3>\n<p>By default, the popover is rendered in the same DOM hierarchy as the trigger. To\nrender the popover within a portal, set the <code>portalled</code> prop to <code>true</code>.</p>\n<blockquote>\n<p>Note: This requires that you render the component within a <code>Portal</code> based on\nthe framework you use.</p>\n</blockquote>\n<story id=\"Portalled\">\n<h3>Adding an arrow</h3>\n<p>To render an arrow within the popover, render the component <code>Popover.Arrow</code> and\n<code>Popover.ArrowTip</code> as children of <code>Popover.Positioner</code>.</p>\n<story id=\"Arrow\">\n<h3>Listening for open and close events</h3>\n<p>When the popover is opened or closed, we invoke the <code>onOpenChange</code> callback.</p>\n<story id=\"OnOpenChange\">\n<h3>Control the open state</h3>\n<p>Use the <code>isOpen</code> prop to control the open state of the popover.</p>\n<story id=\"Controlled\">\n<h3>Modifying the close behavior</h3>\n<p>The popover is designed to close on blur and when the <kbd>esc</kbd> key is\npressed.</p>\n<p>To prevent it from closing on blur (clicking or focusing outside), pass the\n<code>closeOnInteractOutside</code> prop and set it to <code>false</code>.</p>\n<p>To prevent it from closing when the <kbd>esc</kbd> key is pressed, pass the\n<code>closeOnEsc</code> prop and set it to <code>false</code>.</p>\n<story id=\"CloseBehavior\">\n<h3>Changing the placement</h3>\n<p>To change the placement of the popover, set the <code>positioning</code> prop.</p>\n<story id=\"Positioning\">\n<h3>Changing the modality</h3>\n<p>In some cases, you might want the popover to be modal. This means that it'll:</p>\n<ul>\n<li>trap focus within its content</li>\n<li>block scrolling on the body</li>\n<li>disable pointer interactions outside the popover</li>\n<li>hide content behind the popover from screen readers</li>\n</ul>\n<p>To make the popover modal, set the <code>modal</code> prop to <code>true</code>. When <code>modal={true}</code>,\nwe set the <code>portalled</code> attribute to <code>true</code> as well.</p>\n<story id=\"Modal\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Using a Portal",
            "url": "#using-a-portal",
            "items": []
          },
          {
            "title": "Adding an arrow",
            "url": "#adding-an-arrow",
            "items": []
          },
          {
            "title": "Listening for open and close events",
            "url": "#listening-for-open-and-close-events",
            "items": []
          },
          {
            "title": "Control the open state",
            "url": "#control-the-open-state",
            "items": []
          },
          {
            "title": "Modifying the close behavior",
            "url": "#modifying-the-close-behavior",
            "items": []
          },
          {
            "title": "Changing the placement",
            "url": "#changing-the-placement",
            "items": []
          },
          {
            "title": "Changing the modality",
            "url": "#changing-the-modality",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(r){const t={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...r.components},{Anatomy:i,ComponentPreview:d,ComponentTypes:c,Story:h}=t;return i||_missingMdxReference(\"Anatomy\",!0),d||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),h||_missingMdxReference(\"Story\",!0),o(e,{children:[n(d,{}),\"\\n\",n(t.h2,{children:\"Anatomy\"}),\"\\n\",n(t.p,{children:\"To set up the popover correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",o(t.blockquote,{children:[\"\\n\",o(t.p,{children:[\"Each part includes a \",n(t.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"popover\"}),\"\\n\",n(t.h2,{children:\"Examples\"}),\"\\n\",o(t.p,{children:[\"Learn how to use the \",n(t.code,{children:\"Popover\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(h,{id:\"Basic\"}),\"\\n\",n(t.h3,{children:\"Using a Portal\"}),\"\\n\",o(t.p,{children:[\"By default, the popover is rendered in the same DOM hierarchy as the trigger. To\\nrender the popover within a portal, set the \",n(t.code,{children:\"portalled\"}),\" prop to \",n(t.code,{children:\"true\"}),\".\"]}),\"\\n\",o(t.blockquote,{children:[\"\\n\",o(t.p,{children:[\"Note: This requires that you render the component within a \",n(t.code,{children:\"Portal\"}),\" based on\\nthe framework you use.\"]}),\"\\n\"]}),\"\\n\",n(h,{id:\"Portalled\"}),\"\\n\",n(t.h3,{children:\"Adding an arrow\"}),\"\\n\",o(t.p,{children:[\"To render an arrow within the popover, render the component \",n(t.code,{children:\"Popover.Arrow\"}),\" and\\n\",n(t.code,{children:\"Popover.ArrowTip\"}),\" as children of \",n(t.code,{children:\"Popover.Positioner\"}),\".\"]}),\"\\n\",n(h,{id:\"Arrow\"}),\"\\n\",n(t.h3,{children:\"Listening for open and close events\"}),\"\\n\",o(t.p,{children:[\"When the popover is opened or closed, we invoke the \",n(t.code,{children:\"onOpenChange\"}),\" callback.\"]}),\"\\n\",n(h,{id:\"OnOpenChange\"}),\"\\n\",n(t.h3,{children:\"Control the open state\"}),\"\\n\",o(t.p,{children:[\"Use the \",n(t.code,{children:\"isOpen\"}),\" prop to control the open state of the popover.\"]}),\"\\n\",n(h,{id:\"Controlled\"}),\"\\n\",n(t.h3,{children:\"Modifying the close behavior\"}),\"\\n\",o(t.p,{children:[\"The popover is designed to close on blur and when the \",n(\"kbd\",{children:\"esc\"}),\" key is\\npressed.\"]}),\"\\n\",o(t.p,{children:[\"To prevent it from closing on blur (clicking or focusing outside), pass the\\n\",n(t.code,{children:\"closeOnInteractOutside\"}),\" prop and set it to \",n(t.code,{children:\"false\"}),\".\"]}),\"\\n\",o(t.p,{children:[\"To prevent it from closing when the \",n(\"kbd\",{children:\"esc\"}),\" key is pressed, pass the\\n\",n(t.code,{children:\"closeOnEsc\"}),\" prop and set it to \",n(t.code,{children:\"false\"}),\".\"]}),\"\\n\",n(h,{id:\"CloseBehavior\"}),\"\\n\",n(t.h3,{children:\"Changing the placement\"}),\"\\n\",o(t.p,{children:[\"To change the placement of the popover, set the \",n(t.code,{children:\"positioning\"}),\" prop.\"]}),\"\\n\",n(h,{id:\"Positioning\"}),\"\\n\",n(t.h3,{children:\"Changing the modality\"}),\"\\n\",n(t.p,{children:\"In some cases, you might want the popover to be modal. This means that it'll:\"}),\"\\n\",o(t.ul,{children:[\"\\n\",n(t.li,{children:\"trap focus within its content\"}),\"\\n\",n(t.li,{children:\"block scrolling on the body\"}),\"\\n\",n(t.li,{children:\"disable pointer interactions outside the popover\"}),\"\\n\",n(t.li,{children:\"hide content behind the popover from screen readers\"}),\"\\n\"]}),\"\\n\",o(t.p,{children:[\"To make the popover modal, set the \",n(t.code,{children:\"modal\"}),\" prop to \",n(t.code,{children:\"true\"}),\". When \",n(t.code,{children:\"modal={true}\"}),\",\\nwe set the \",n(t.code,{children:\"portalled\"}),\" attribute to \",n(t.code,{children:\"true\"}),\" as well.\"]}),\"\\n\",n(h,{id:\"Modal\"}),\"\\n\",n(t.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/popover",
    "href": "/docs/components/popover",
    "category": "components"
  },
  {
    "id": "presence",
    "title": "Presence",
    "description": "Helps control the rendering and unmounting of your content based on a given state.",
    "metadata": {
      "readingTime": 1,
      "wordCount": 135
    },
    "content": "<p>import { Story, ComponentPreview } from '<del>/components/docs'\nimport ComponentTypes from '</del>/components/docs/component-types.astro'</p>\n<componentpreview>\n<h2>Examples</h2>\n<p>By default the child component starts out as hidden and remains hidden after the\n<code>present</code> state is toggled off. This is useful for situations where the element\nneeds to be hidden initially and continue to stay hidden after its presence is\nno longer required.</p>\n<story id=\"Basic\">\n<h3>Lazy Mount</h3>\n<p>To delay the mounting of a child component until the <code>present</code> prop is set to\ntrue, use the <code>lazyMount</code> prop:</p>\n<story id=\"LazyMount\">\n<h3>Unmount on Exit</h3>\n<p>To remove the child component from the DOM when it's not present, use the\n<code>unmountOnExit</code> prop:</p>\n<story id=\"UnmountOnExit\">\n<h3>Combining Lazy Mount and Unmount on Exit</h3>\n<p>Both <code>lazyMount</code> and <code>unmountOnExit</code> can be combined for a component to be\nmounted only when it's present and to be unmounted when it's no longer present:</p>\n<story id=\"LazyMountAndUnmountOnExit\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></componentpreview>",
    "toc": [
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Lazy Mount",
            "url": "#lazy-mount",
            "items": []
          },
          {
            "title": "Unmount on Exit",
            "url": "#unmount-on-exit",
            "items": []
          },
          {
            "title": "Combining Lazy Mount and Unmount on Exit",
            "url": "#combining-lazy-mount-and-unmount-on-exit",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:n,jsx:e,jsxs:t}=arguments[0],o=arguments[0].baseUrl;if(!o)throw new Error(\"Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`\");const{Story:r,ComponentPreview:i}=await import(_resolveDynamicMdxSpecifier(\"~/components/docs\")),{default:d}=await import(_resolveDynamicMdxSpecifier(\"~/components/docs/component-types.astro\"));function _createMdxContent(o){const c={code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components};return t(n,{children:[e(i,{}),\"\\n\",e(c.h2,{children:\"Examples\"}),\"\\n\",t(c.p,{children:[\"By default the child component starts out as hidden and remains hidden after the\\n\",e(c.code,{children:\"present\"}),\" state is toggled off. This is useful for situations where the element\\nneeds to be hidden initially and continue to stay hidden after its presence is\\nno longer required.\"]}),\"\\n\",e(r,{id:\"Basic\"}),\"\\n\",e(c.h3,{children:\"Lazy Mount\"}),\"\\n\",t(c.p,{children:[\"To delay the mounting of a child component until the \",e(c.code,{children:\"present\"}),\" prop is set to\\ntrue, use the \",e(c.code,{children:\"lazyMount\"}),\" prop:\"]}),\"\\n\",e(r,{id:\"LazyMount\"}),\"\\n\",e(c.h3,{children:\"Unmount on Exit\"}),\"\\n\",t(c.p,{children:[\"To remove the child component from the DOM when it's not present, use the\\n\",e(c.code,{children:\"unmountOnExit\"}),\" prop:\"]}),\"\\n\",e(r,{id:\"UnmountOnExit\"}),\"\\n\",e(c.h3,{children:\"Combining Lazy Mount and Unmount on Exit\"}),\"\\n\",t(c.p,{children:[\"Both \",e(c.code,{children:\"lazyMount\"}),\" and \",e(c.code,{children:\"unmountOnExit\"}),\" can be combined for a component to be\\nmounted only when it's present and to be unmounted when it's no longer present:\"]}),\"\\n\",e(r,{id:\"LazyMountAndUnmountOnExit\"}),\"\\n\",e(c.h2,{children:\"API Reference\"}),\"\\n\",e(d,{})]})}return{default:function(n={}){const{wrapper:t}=n.components||{};return t?e(t,{...n,children:e(_createMdxContent,{...n})}):_createMdxContent(n)}};function _resolveDynamicMdxSpecifier(n){if(\"string\"!=typeof n)return n;try{return new URL(n),n}catch{}return n.startsWith(\"/\")||n.startsWith(\"./\")||n.startsWith(\"../\")?new URL(n,o).href:n}",
    "slug": "components/presence",
    "href": "/docs/components/presence",
    "category": "components"
  },
  {
    "id": "circular-progress",
    "title": "Progress - Circular",
    "description": "An element that shows either determinate or indeterminate progress.",
    "resources": {
      "zag": "circular-progress",
      "w3c": "https://w3c.github.io/aria/#progressbar"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 187
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the progress correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"circular-progress\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Progress</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Setting the initial value</h3>\n<p>To set the progress's initial value, set the <code>defaultValue</code> prop to a number.</p>\n<story id=\"InitialValue\">\n<h3>Specifying the maximum</h3>\n<p>By default, the maximum is <code>100</code>. If that's not what you want, you can easily\nspecify a different bound by changing the value of the <code>max</code> prop. You can do\nthe same with the minimum value by setting the <code>min</code> prop.</p>\n<p>For example, to show the user a progress from <code>10</code> to <code>30</code>, you can use:</p>\n<story id=\"MinMax\">\n<h3>Using the indeterminate state</h3>\n<p>The progress component is determinate by default, with the value and max set to\n50 and 100 respectively.</p>\n<p>Set the <code>state</code> to <code>indeterminate</code> in <code>Progress.Indicator</code>:</p>\n<story id=\"Indeterminate\">\n<h3>Showing a value text</h3>\n<p>Progress bars can only be interpreted by sighted users. To include a text\ndescription to support assistive technologies like screen readers, use the\n<code>value</code> part in <code>translations</code>.</p>\n<story id=\"ValueText\">\n<h2>API Reference</h2>\n<componenttypes id=\"progress\"></componenttypes></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Setting the initial value",
            "url": "#setting-the-initial-value",
            "items": []
          },
          {
            "title": "Specifying the maximum",
            "url": "#specifying-the-maximum",
            "items": []
          },
          {
            "title": "Using the indeterminate state",
            "url": "#using-the-indeterminate-state",
            "items": []
          },
          {
            "title": "Showing a value text",
            "url": "#showing-a-value-text",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...i.components},{Anatomy:o,ComponentPreview:c,ComponentTypes:d,Story:s}=r;return o||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),s||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the progress correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(o,{id:\"circular-progress\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Progress\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(s,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Setting the initial value\"}),\"\\n\",t(r.p,{children:[\"To set the progress's initial value, set the \",n(r.code,{children:\"defaultValue\"}),\" prop to a number.\"]}),\"\\n\",n(s,{id:\"InitialValue\"}),\"\\n\",n(r.h3,{children:\"Specifying the maximum\"}),\"\\n\",t(r.p,{children:[\"By default, the maximum is \",n(r.code,{children:\"100\"}),\". If that's not what you want, you can easily\\nspecify a different bound by changing the value of the \",n(r.code,{children:\"max\"}),\" prop. You can do\\nthe same with the minimum value by setting the \",n(r.code,{children:\"min\"}),\" prop.\"]}),\"\\n\",t(r.p,{children:[\"For example, to show the user a progress from \",n(r.code,{children:\"10\"}),\" to \",n(r.code,{children:\"30\"}),\", you can use:\"]}),\"\\n\",n(s,{id:\"MinMax\"}),\"\\n\",n(r.h3,{children:\"Using the indeterminate state\"}),\"\\n\",n(r.p,{children:\"The progress component is determinate by default, with the value and max set to\\n50 and 100 respectively.\"}),\"\\n\",t(r.p,{children:[\"Set the \",n(r.code,{children:\"state\"}),\" to \",n(r.code,{children:\"indeterminate\"}),\" in \",n(r.code,{children:\"Progress.Indicator\"}),\":\"]}),\"\\n\",n(s,{id:\"Indeterminate\"}),\"\\n\",n(r.h3,{children:\"Showing a value text\"}),\"\\n\",t(r.p,{children:[\"Progress bars can only be interpreted by sighted users. To include a text\\ndescription to support assistive technologies like screen readers, use the\\n\",n(r.code,{children:\"value\"}),\" part in \",n(r.code,{children:\"translations\"}),\".\"]}),\"\\n\",n(s,{id:\"ValueText\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{id:\"progress\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/progress-circular",
    "href": "/docs/components/progress-circular",
    "category": "components"
  },
  {
    "id": "linear-progress",
    "title": "Progress - Linear",
    "description": "An element that shows either determinate or indeterminate progress.",
    "resources": {
      "zag": "linear-progress",
      "w3c": "https://w3c.github.io/aria/#progressbar"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 231
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the progress correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"linear-progress\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Progress</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Setting the initial value</h3>\n<p>To set the progress's initial value, set the <code>defaultValue</code> prop to a number.</p>\n<story id=\"InitialValue\">\n<h3>Specifying the minimum and maximum</h3>\n<p>By default, the maximum is <code>100</code>. If that's not what you want, you can easily\nspecify a different bound by changing the value of the <code>max</code> prop. You can do\nthe same with the minimum value by setting the <code>min</code> prop.</p>\n<p>For example, to show the user a progress from <code>10</code> to <code>30</code>, you can use:</p>\n<story id=\"MinMax\">\n<h3>Using the indeterminate state</h3>\n<p>The progress component is determinate by default, with the value and max set to\n50 and 100 respectively.</p>\n<p>Set the <code>state</code> to <code>indeterminate</code> in <code>Progress.Indicator</code>:</p>\n<story id=\"Indeterminate\">\n<h3>Showing a value text</h3>\n<p>Progress bars can only be interpreted by sighted users. To include a text\ndescription to support assistive technologies like screen readers, use the\n<code>value</code> part in <code>translations</code>.</p>\n<story id=\"ValueText\">\n<h3>Changing the orientation</h3>\n<p>By default, the progress is assumed to be horizontal. To change the orientation\nto vertical, set the orientation property in the machine's context to vertical.</p>\n<blockquote>\n<p>Don't forget to change the styles of the vertical progress by specifying its\nheight</p>\n</blockquote>\n<story id=\"Vertical\">\n<h2>API Reference</h2>\n<componenttypes id=\"progress\"></componenttypes></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Setting the initial value",
            "url": "#setting-the-initial-value",
            "items": []
          },
          {
            "title": "Specifying the minimum and maximum",
            "url": "#specifying-the-minimum-and-maximum",
            "items": []
          },
          {
            "title": "Using the indeterminate state",
            "url": "#using-the-indeterminate-state",
            "items": []
          },
          {
            "title": "Showing a value text",
            "url": "#showing-a-value-text",
            "items": []
          },
          {
            "title": "Changing the orientation",
            "url": "#changing-the-orientation",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const o={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...i.components},{Anatomy:r,ComponentPreview:c,ComponentTypes:a,Story:d}=o;return r||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),a||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(o.h2,{children:\"Anatomy\"}),\"\\n\",n(o.p,{children:\"To set up the progress correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(o.blockquote,{children:[\"\\n\",t(o.p,{children:[\"Each part includes a \",n(o.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"linear-progress\"}),\"\\n\",n(o.h2,{children:\"Examples\"}),\"\\n\",t(o.p,{children:[\"Learn how to use the \",n(o.code,{children:\"Progress\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(o.h3,{children:\"Setting the initial value\"}),\"\\n\",t(o.p,{children:[\"To set the progress's initial value, set the \",n(o.code,{children:\"defaultValue\"}),\" prop to a number.\"]}),\"\\n\",n(d,{id:\"InitialValue\"}),\"\\n\",n(o.h3,{children:\"Specifying the minimum and maximum\"}),\"\\n\",t(o.p,{children:[\"By default, the maximum is \",n(o.code,{children:\"100\"}),\". If that's not what you want, you can easily\\nspecify a different bound by changing the value of the \",n(o.code,{children:\"max\"}),\" prop. You can do\\nthe same with the minimum value by setting the \",n(o.code,{children:\"min\"}),\" prop.\"]}),\"\\n\",t(o.p,{children:[\"For example, to show the user a progress from \",n(o.code,{children:\"10\"}),\" to \",n(o.code,{children:\"30\"}),\", you can use:\"]}),\"\\n\",n(d,{id:\"MinMax\"}),\"\\n\",n(o.h3,{children:\"Using the indeterminate state\"}),\"\\n\",n(o.p,{children:\"The progress component is determinate by default, with the value and max set to\\n50 and 100 respectively.\"}),\"\\n\",t(o.p,{children:[\"Set the \",n(o.code,{children:\"state\"}),\" to \",n(o.code,{children:\"indeterminate\"}),\" in \",n(o.code,{children:\"Progress.Indicator\"}),\":\"]}),\"\\n\",n(d,{id:\"Indeterminate\"}),\"\\n\",n(o.h3,{children:\"Showing a value text\"}),\"\\n\",t(o.p,{children:[\"Progress bars can only be interpreted by sighted users. To include a text\\ndescription to support assistive technologies like screen readers, use the\\n\",n(o.code,{children:\"value\"}),\" part in \",n(o.code,{children:\"translations\"}),\".\"]}),\"\\n\",n(d,{id:\"ValueText\"}),\"\\n\",n(o.h3,{children:\"Changing the orientation\"}),\"\\n\",n(o.p,{children:\"By default, the progress is assumed to be horizontal. To change the orientation\\nto vertical, set the orientation property in the machine's context to vertical.\"}),\"\\n\",t(o.blockquote,{children:[\"\\n\",n(o.p,{children:\"Don't forget to change the styles of the vertical progress by specifying its\\nheight\"}),\"\\n\"]}),\"\\n\",n(d,{id:\"Vertical\"}),\"\\n\",n(o.h2,{children:\"API Reference\"}),\"\\n\",n(a,{id:\"progress\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/progress-linear",
    "href": "/docs/components/progress-linear",
    "category": "components"
  },
  {
    "id": "radio-group",
    "title": "Radio Group",
    "description": "Allows single selection from multiple options.",
    "resources": {
      "zag": "radio-group",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/radio/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 188
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the radio group correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"radio-group\">\n<h3>Design impact on the asChild property</h3>\n<p>The <code>RadioGroup.Item</code> element of the radio group is a <code>label</code> element. This is\nbecause the radio group is a form control and should be associated with a label\nto provide context and meaning to the user. Otherwise, the HTML and\naccessibility structure will be invalid.</p>\n<blockquote>\n<p>If you need to use the <code>asChild</code> property, make sure that the <code>label</code> element\nis the direct child of the <code>RadioGroup.Item</code> component.</p>\n</blockquote>\n<h2>Examples</h2>\n<p>Learn how to use the <code>RadioGroup</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Disabling the radio group</h3>\n<p>To make a radio group disabled, set the <code>disabled</code> prop to <code>true</code>.</p>\n<story id=\"Disabled\">\n<h3>Setting the initial value</h3>\n<p>To set the radio group's initial value, set the <code>defaultValue</code> prop to the value\nof the radio item to be selected by default.</p>\n<story id=\"InitialValue\">\n<h3>Listening for changes</h3>\n<p>When the radio group value changes, the <code>onValueChange</code> callback is invoked.</p>\n<story id=\"OnEvent\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": [
          {
            "title": "Design impact on the asChild property",
            "url": "#design-impact-on-the-aschild-property",
            "items": []
          }
        ]
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Disabling the radio group",
            "url": "#disabling-the-radio-group",
            "items": []
          },
          {
            "title": "Setting the initial value",
            "url": "#setting-the-initial-value",
            "items": []
          },
          {
            "title": "Listening for changes",
            "url": "#listening-for-changes",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:d,ComponentTypes:c,Story:a}=i;return r||_missingMdxReference(\"Anatomy\",!0),d||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(d,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the radio group correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"radio-group\"}),\"\\n\",n(i.h3,{children:\"Design impact on the asChild property\"}),\"\\n\",t(i.p,{children:[\"The \",n(i.code,{children:\"RadioGroup.Item\"}),\" element of the radio group is a \",n(i.code,{children:\"label\"}),\" element. This is\\nbecause the radio group is a form control and should be associated with a label\\nto provide context and meaning to the user. Otherwise, the HTML and\\naccessibility structure will be invalid.\"]}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"If you need to use the \",n(i.code,{children:\"asChild\"}),\" property, make sure that the \",n(i.code,{children:\"label\"}),\" element\\nis the direct child of the \",n(i.code,{children:\"RadioGroup.Item\"}),\" component.\"]}),\"\\n\"]}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"RadioGroup\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Disabling the radio group\"}),\"\\n\",t(i.p,{children:[\"To make a radio group disabled, set the \",n(i.code,{children:\"disabled\"}),\" prop to \",n(i.code,{children:\"true\"}),\".\"]}),\"\\n\",n(a,{id:\"Disabled\"}),\"\\n\",n(i.h3,{children:\"Setting the initial value\"}),\"\\n\",t(i.p,{children:[\"To set the radio group's initial value, set the \",n(i.code,{children:\"defaultValue\"}),\" prop to the value\\nof the radio item to be selected by default.\"]}),\"\\n\",n(a,{id:\"InitialValue\"}),\"\\n\",n(i.h3,{children:\"Listening for changes\"}),\"\\n\",t(i.p,{children:[\"When the radio group value changes, the \",n(i.code,{children:\"onValueChange\"}),\" callback is invoked.\"]}),\"\\n\",n(a,{id:\"OnEvent\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/radio-group",
    "href": "/docs/components/radio-group",
    "category": "components"
  },
  {
    "id": "rating-group",
    "title": "Rating Group",
    "description": "Allows users to rate items using a set of icons.",
    "resources": {
      "zag": "rating-group"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 170
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the rating correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"rating-group\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>RatingGroup</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Using half ratings</h3>\n<p>Allow <code>0.5</code> value steps by setting the <code>allowHalf</code> prop to <code>true</code>. Ensure to\nrender the correct icon if the <code>isHalf</code> value is set in the Rating components\nrender callback.</p>\n<story id=\"HalfRatings\">\n<h3>Using a default value</h3>\n<story id=\"InitialValue\">\n<h3>Controlled</h3>\n<p>When using the <code>RatingGroup</code> component, you can use the <code>value</code> and\n<code>onValueChange</code> props to control the state.</p>\n<story id=\"Controlled\">\n<h3>Disabling the rating group</h3>\n<p>To make the rating group disabled, set the <code>disabled</code> prop to <code>true</code>.</p>\n<story id=\"Disabled\">\n<h3>Readonly rating group</h3>\n<p>To make the rating group readonly, set the <code>readOnly</code> prop to <code>true</code>.</p>\n<story id=\"ReadOnly\">\n<h3>Usage within forms</h3>\n<p>To use the rating group within forms, pass the prop <code>name</code>. It will render a\nhidden input and ensure the value changes get propagated to the form correctly.</p>\n<story id=\"FormUsage\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Using half ratings",
            "url": "#using-half-ratings",
            "items": []
          },
          {
            "title": "Using a default value",
            "url": "#using-a-default-value",
            "items": []
          },
          {
            "title": "Controlled",
            "url": "#controlled",
            "items": []
          },
          {
            "title": "Disabling the rating group",
            "url": "#disabling-the-rating-group",
            "items": []
          },
          {
            "title": "Readonly rating group",
            "url": "#readonly-rating-group",
            "items": []
          },
          {
            "title": "Usage within forms",
            "url": "#usage-within-forms",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:i,ComponentPreview:d,ComponentTypes:c,Story:a}=r;return i||_missingMdxReference(\"Anatomy\",!0),d||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(d,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the rating correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"rating-group\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"RatingGroup\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Using half ratings\"}),\"\\n\",t(r.p,{children:[\"Allow \",n(r.code,{children:\"0.5\"}),\" value steps by setting the \",n(r.code,{children:\"allowHalf\"}),\" prop to \",n(r.code,{children:\"true\"}),\". Ensure to\\nrender the correct icon if the \",n(r.code,{children:\"isHalf\"}),\" value is set in the Rating components\\nrender callback.\"]}),\"\\n\",n(a,{id:\"HalfRatings\"}),\"\\n\",n(r.h3,{children:\"Using a default value\"}),\"\\n\",n(a,{id:\"InitialValue\"}),\"\\n\",n(r.h3,{children:\"Controlled\"}),\"\\n\",t(r.p,{children:[\"When using the \",n(r.code,{children:\"RatingGroup\"}),\" component, you can use the \",n(r.code,{children:\"value\"}),\" and\\n\",n(r.code,{children:\"onValueChange\"}),\" props to control the state.\"]}),\"\\n\",n(a,{id:\"Controlled\"}),\"\\n\",n(r.h3,{children:\"Disabling the rating group\"}),\"\\n\",t(r.p,{children:[\"To make the rating group disabled, set the \",n(r.code,{children:\"disabled\"}),\" prop to \",n(r.code,{children:\"true\"}),\".\"]}),\"\\n\",n(a,{id:\"Disabled\"}),\"\\n\",n(r.h3,{children:\"Readonly rating group\"}),\"\\n\",t(r.p,{children:[\"To make the rating group readonly, set the \",n(r.code,{children:\"readOnly\"}),\" prop to \",n(r.code,{children:\"true\"}),\".\"]}),\"\\n\",n(a,{id:\"ReadOnly\"}),\"\\n\",n(r.h3,{children:\"Usage within forms\"}),\"\\n\",t(r.p,{children:[\"To use the rating group within forms, pass the prop \",n(r.code,{children:\"name\"}),\". It will render a\\nhidden input and ensure the value changes get propagated to the form correctly.\"]}),\"\\n\",n(a,{id:\"FormUsage\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/rating-group",
    "href": "/docs/components/rating-group",
    "category": "components"
  },
  {
    "id": "segment-group",
    "title": "Segment Group",
    "description": "Organizes and navigates between sections in a view.",
    "resources": {
      "zag": "radio-group"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 114
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the segmented control correctly, you'll need to understand its anatomy\nand how we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"segmented-control\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>SegmentGroup</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Initial Value</h3>\n<p>To set a default segment on initial render, use the <code>defaultValue</code> prop:</p>\n<story id=\"InitialValue\">\n<h3>Controlled Segment Group</h3>\n<p>To create a controlled SegmentGroup component, manage the current selected\nsegment using the <code>value</code> prop and update it when the <code>onValueChange</code> event\nhandler is called:</p>\n<story id=\"Controlled\">\n<h3>Disabled Segment</h3>\n<p>To disable a segment, simply pass the <code>disabled</code> prop to the <code>SegmentGroup.Item</code>\ncomponent:</p>\n<story id=\"Disabled\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Initial Value",
            "url": "#initial-value",
            "items": []
          },
          {
            "title": "Controlled Segment Group",
            "url": "#controlled-segment-group",
            "items": []
          },
          {
            "title": "Disabled Segment",
            "url": "#disabled-segment",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:d,ComponentPreview:i,ComponentTypes:c,Story:l}=r;return d||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),l||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the segmented control correctly, you'll need to understand its anatomy\\nand how we name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(d,{id:\"segmented-control\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"SegmentGroup\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(l,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Initial Value\"}),\"\\n\",t(r.p,{children:[\"To set a default segment on initial render, use the \",n(r.code,{children:\"defaultValue\"}),\" prop:\"]}),\"\\n\",n(l,{id:\"InitialValue\"}),\"\\n\",n(r.h3,{children:\"Controlled Segment Group\"}),\"\\n\",t(r.p,{children:[\"To create a controlled SegmentGroup component, manage the current selected\\nsegment using the \",n(r.code,{children:\"value\"}),\" prop and update it when the \",n(r.code,{children:\"onValueChange\"}),\" event\\nhandler is called:\"]}),\"\\n\",n(l,{id:\"Controlled\"}),\"\\n\",n(r.h3,{children:\"Disabled Segment\"}),\"\\n\",t(r.p,{children:[\"To disable a segment, simply pass the \",n(r.code,{children:\"disabled\"}),\" prop to the \",n(r.code,{children:\"SegmentGroup.Item\"}),\"\\ncomponent:\"]}),\"\\n\",n(l,{id:\"Disabled\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/segment-group",
    "href": "/docs/components/segment-group",
    "category": "components"
  },
  {
    "id": "select",
    "title": "Select",
    "description": "Displays a list of options for the user to pick from.",
    "resources": {
      "zag": "select",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 215
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the select correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"select\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Select</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Advanced Customization</h3>\n<p>For advanced customizations and item properties like <code>disabled</code>:</p>\n<story id=\"Advanced\">\n<h3>Multiple Selection</h3>\n<p>To enable <code>multiple</code> item selection:</p>\n<story id=\"Multiple\">\n<h3>Controlled Component</h3>\n<p>For scenarios where you want to control the Select component's state:</p>\n<story id=\"Controlled\">\n<h3>Usage with a Form Library</h3>\n<p>See how to use the Select component with popular form libraries:</p>\n<story id=\"FormLibrary\">\n<h2>TypeScript Caveats in Vue</h2>\n<p>Under the hood for React and Solid frameworks, we supply a complex prop type with a generic so that the type of the <code>items</code> prop matches the param type in the function signatures for props such as the <code>isItemDisabled</code> prop, say. (See the api reference table below) Unfortunately, generic typing is not supported in Vue for components that contain props with slots and/or emits. Therefore, you will not expect updated typing in this way.</p>\n<p>If you have a solution or a workaround to this problem, we would love the contribution and request that you <a href=\"https://github.com/chakra-ui/ark/discussions/new?category=ideas\">open a Github idea discussion</a> to let us know a PoC you have to share!</p>\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Advanced Customization",
            "url": "#advanced-customization",
            "items": []
          },
          {
            "title": "Multiple Selection",
            "url": "#multiple-selection",
            "items": []
          },
          {
            "title": "Controlled Component",
            "url": "#controlled-component",
            "items": []
          },
          {
            "title": "Usage with a Form Library",
            "url": "#usage-with-a-form-library",
            "items": []
          }
        ]
      },
      {
        "title": "TypeScript Caveats in Vue",
        "url": "#typescript-caveats-in-vue",
        "items": []
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:i,ComponentPreview:c,ComponentTypes:a,Story:d}=r;return i||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),a||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the select correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"select\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Select\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Advanced Customization\"}),\"\\n\",t(r.p,{children:[\"For advanced customizations and item properties like \",n(r.code,{children:\"disabled\"}),\":\"]}),\"\\n\",n(d,{id:\"Advanced\"}),\"\\n\",n(r.h3,{children:\"Multiple Selection\"}),\"\\n\",t(r.p,{children:[\"To enable \",n(r.code,{children:\"multiple\"}),\" item selection:\"]}),\"\\n\",n(d,{id:\"Multiple\"}),\"\\n\",n(r.h3,{children:\"Controlled Component\"}),\"\\n\",n(r.p,{children:\"For scenarios where you want to control the Select component's state:\"}),\"\\n\",n(d,{id:\"Controlled\"}),\"\\n\",n(r.h3,{children:\"Usage with a Form Library\"}),\"\\n\",n(r.p,{children:\"See how to use the Select component with popular form libraries:\"}),\"\\n\",n(d,{id:\"FormLibrary\"}),\"\\n\",n(r.h2,{children:\"TypeScript Caveats in Vue\"}),\"\\n\",t(r.p,{children:[\"Under the hood for React and Solid frameworks, we supply a complex prop type with a generic so that the type of the \",n(r.code,{children:\"items\"}),\" prop matches the param type in the function signatures for props such as the \",n(r.code,{children:\"isItemDisabled\"}),\" prop, say. (See the api reference table below) Unfortunately, generic typing is not supported in Vue for components that contain props with slots and/or emits. Therefore, you will not expect updated typing in this way.\"]}),\"\\n\",t(r.p,{children:[\"If you have a solution or a workaround to this problem, we would love the contribution and request that you \",n(r.a,{href:\"https://github.com/chakra-ui/ark/discussions/new?category=ideas\",children:\"open a Github idea discussion\"}),\" to let us know a PoC you have to share!\"]}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(a,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/select",
    "href": "/docs/components/select",
    "category": "components"
  },
  {
    "id": "slider",
    "title": "Slider",
    "description": "A control element that allows for a range of selections.",
    "resources": {
      "zag": "slider",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/slider/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 340
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the slider correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"slider\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Slider</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Range Slider</h3>\n<p>You can add multiple thumbs to the slider by adding multiple <code>Slider.Thumb</code></p>\n<story id=\"Range\">\n<h3>Adding marks</h3>\n<p>You can add marks to the slider track by using the <code>Slider.MarkerGroup</code> and\n<code>Slider.Marker</code> components.</p>\n<p>Position the <code>Slider.Marker</code> components relative to the track by providing the\n<code>value</code> prop.</p>\n<story id=\"WithMarks\">\n<h3>Setting the initial value</h3>\n<p>To set the slider's initial value, set the <code>defaultValue</code> prop to the array of\nnumbers.</p>\n<story id=\"InitialValue\">\n<h3>Specifying the minimum and maximum</h3>\n<p>By default, the minimum is <code>0</code> and the maximum is <code>100</code>. If that's not what you\nwant, you can easily specify different bounds by changing the values of the\n<code>min</code> and/or <code>max</code> props.</p>\n<p>For example, to ask the user for a value between <code>-10</code> and <code>10</code>, you can use:</p>\n<story id=\"MinMax\">\n<h3>Setting the value's granularity</h3>\n<p>By default, the granularity, is <code>1</code>, meaning that the value is always an\ninteger. You can change the step attribute to control the granularity.</p>\n<p>For example, If you need a value between <code>5</code> and <code>10</code>, accurate to two decimal\nplaces, you should set the value of step to <code>0.01</code>:</p>\n<story id=\"Step\">\n<h3>Listening for changes</h3>\n<p>When the slider value changes, the <code>onValueChange</code> and <code>onValueChangeEnd</code>\ncallbacks are invoked. You can use this to set up custom behaviors in your app.</p>\n<story id=\"OnEvent\">\n<h3>Changing the orientation</h3>\n<p>By default, the slider is assumed to be horizontal. To change the orientation to\nvertical, set the orientation property in the machine's context to vertical.</p>\n<p>In this mode, the slider will use the arrow up and down keys to\nincrement/decrement its value.</p>\n<blockquote>\n<p>Don't forget to change the styles of the vertical slider by specifying its\nheight</p>\n</blockquote>\n<story id=\"Vertical\">\n<h3>Changing the origin</h3>\n<p>By default, the slider's origin is at the start of the track. To change the\norigin to the center of the track, set the <code>origin</code> prop to <code>center</code>.</p>\n<story id=\"CenterOrigin\">\n<h2>API Reference</h2>\n<componenttypes id=\"slider\"></componenttypes></story></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Range Slider",
            "url": "#range-slider",
            "items": []
          },
          {
            "title": "Adding marks",
            "url": "#adding-marks",
            "items": []
          },
          {
            "title": "Setting the initial value",
            "url": "#setting-the-initial-value",
            "items": []
          },
          {
            "title": "Specifying the minimum and maximum",
            "url": "#specifying-the-minimum-and-maximum",
            "items": []
          },
          {
            "title": "Setting the value's granularity",
            "url": "#setting-the-values-granularity",
            "items": []
          },
          {
            "title": "Listening for changes",
            "url": "#listening-for-changes",
            "items": []
          },
          {
            "title": "Changing the orientation",
            "url": "#changing-the-orientation",
            "items": []
          },
          {
            "title": "Changing the origin",
            "url": "#changing-the-origin",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...i.components},{Anatomy:o,ComponentPreview:d,ComponentTypes:c,Story:a}=r;return o||_missingMdxReference(\"Anatomy\",!0),d||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),a||_missingMdxReference(\"Story\",!0),t(e,{children:[n(d,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the slider correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(o,{id:\"slider\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Slider\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(a,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Range Slider\"}),\"\\n\",t(r.p,{children:[\"You can add multiple thumbs to the slider by adding multiple \",n(r.code,{children:\"Slider.Thumb\"})]}),\"\\n\",n(a,{id:\"Range\"}),\"\\n\",n(r.h3,{children:\"Adding marks\"}),\"\\n\",t(r.p,{children:[\"You can add marks to the slider track by using the \",n(r.code,{children:\"Slider.MarkerGroup\"}),\" and\\n\",n(r.code,{children:\"Slider.Marker\"}),\" components.\"]}),\"\\n\",t(r.p,{children:[\"Position the \",n(r.code,{children:\"Slider.Marker\"}),\" components relative to the track by providing the\\n\",n(r.code,{children:\"value\"}),\" prop.\"]}),\"\\n\",n(a,{id:\"WithMarks\"}),\"\\n\",n(r.h3,{children:\"Setting the initial value\"}),\"\\n\",t(r.p,{children:[\"To set the slider's initial value, set the \",n(r.code,{children:\"defaultValue\"}),\" prop to the array of\\nnumbers.\"]}),\"\\n\",n(a,{id:\"InitialValue\"}),\"\\n\",n(r.h3,{children:\"Specifying the minimum and maximum\"}),\"\\n\",t(r.p,{children:[\"By default, the minimum is \",n(r.code,{children:\"0\"}),\" and the maximum is \",n(r.code,{children:\"100\"}),\". If that's not what you\\nwant, you can easily specify different bounds by changing the values of the\\n\",n(r.code,{children:\"min\"}),\" and/or \",n(r.code,{children:\"max\"}),\" props.\"]}),\"\\n\",t(r.p,{children:[\"For example, to ask the user for a value between \",n(r.code,{children:\"-10\"}),\" and \",n(r.code,{children:\"10\"}),\", you can use:\"]}),\"\\n\",n(a,{id:\"MinMax\"}),\"\\n\",n(r.h3,{children:\"Setting the value's granularity\"}),\"\\n\",t(r.p,{children:[\"By default, the granularity, is \",n(r.code,{children:\"1\"}),\", meaning that the value is always an\\ninteger. You can change the step attribute to control the granularity.\"]}),\"\\n\",t(r.p,{children:[\"For example, If you need a value between \",n(r.code,{children:\"5\"}),\" and \",n(r.code,{children:\"10\"}),\", accurate to two decimal\\nplaces, you should set the value of step to \",n(r.code,{children:\"0.01\"}),\":\"]}),\"\\n\",n(a,{id:\"Step\"}),\"\\n\",n(r.h3,{children:\"Listening for changes\"}),\"\\n\",t(r.p,{children:[\"When the slider value changes, the \",n(r.code,{children:\"onValueChange\"}),\" and \",n(r.code,{children:\"onValueChangeEnd\"}),\"\\ncallbacks are invoked. You can use this to set up custom behaviors in your app.\"]}),\"\\n\",n(a,{id:\"OnEvent\"}),\"\\n\",n(r.h3,{children:\"Changing the orientation\"}),\"\\n\",n(r.p,{children:\"By default, the slider is assumed to be horizontal. To change the orientation to\\nvertical, set the orientation property in the machine's context to vertical.\"}),\"\\n\",n(r.p,{children:\"In this mode, the slider will use the arrow up and down keys to\\nincrement/decrement its value.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",n(r.p,{children:\"Don't forget to change the styles of the vertical slider by specifying its\\nheight\"}),\"\\n\"]}),\"\\n\",n(a,{id:\"Vertical\"}),\"\\n\",n(r.h3,{children:\"Changing the origin\"}),\"\\n\",t(r.p,{children:[\"By default, the slider's origin is at the start of the track. To change the\\norigin to the center of the track, set the \",n(r.code,{children:\"origin\"}),\" prop to \",n(r.code,{children:\"center\"}),\".\"]}),\"\\n\",n(a,{id:\"CenterOrigin\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(c,{id:\"slider\"})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/slider",
    "href": "/docs/components/slider",
    "category": "components"
  },
  {
    "id": "splitter",
    "title": "Splitter",
    "description": "A component that divides your interface into resizable sections",
    "resources": {
      "zag": "splitter",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 137
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the splitter correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"splitter\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Splitter</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Using Render Props</h3>\n<p>The Splitter component allows you to pass a function as a child to gain direct\naccess to its API. This provides more control and allows you to modify the size\nof the panels programmatically:</p>\n<story id=\"RenderProp\">\n<h3>Handling Events</h3>\n<p>Splitter also provides <code>onSizeChangeStart</code> and <code>onSizeChangeEnd</code> events which\ncan be useful to perform some actions during the start and end of the resizing\nprocess:</p>\n<story id=\"Events\">\n<h3>Vertical Splitter</h3>\n<p>By default, the Splitter component is horizontal. If you need a vertical\nsplitter, use the <code>orientation</code> prop:</p>\n<story id=\"Vertical\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Using Render Props",
            "url": "#using-render-props",
            "items": []
          },
          {
            "title": "Handling Events",
            "url": "#handling-events",
            "items": []
          },
          {
            "title": "Vertical Splitter",
            "url": "#vertical-splitter",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:i,ComponentPreview:c,ComponentTypes:d,Story:s}=r;return i||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),s||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the splitter correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"splitter\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"Splitter\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(s,{id:\"Basic\"}),\"\\n\",n(r.h3,{children:\"Using Render Props\"}),\"\\n\",n(r.p,{children:\"The Splitter component allows you to pass a function as a child to gain direct\\naccess to its API. This provides more control and allows you to modify the size\\nof the panels programmatically:\"}),\"\\n\",n(s,{id:\"RenderProp\"}),\"\\n\",n(r.h3,{children:\"Handling Events\"}),\"\\n\",t(r.p,{children:[\"Splitter also provides \",n(r.code,{children:\"onSizeChangeStart\"}),\" and \",n(r.code,{children:\"onSizeChangeEnd\"}),\" events which\\ncan be useful to perform some actions during the start and end of the resizing\\nprocess:\"]}),\"\\n\",n(s,{id:\"Events\"}),\"\\n\",n(r.h3,{children:\"Vertical Splitter\"}),\"\\n\",t(r.p,{children:[\"By default, the Splitter component is horizontal. If you need a vertical\\nsplitter, use the \",n(r.code,{children:\"orientation\"}),\" prop:\"]}),\"\\n\",n(s,{id:\"Vertical\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/splitter",
    "href": "/docs/components/splitter",
    "category": "components"
  },
  {
    "id": "switch",
    "title": "Switch",
    "description": "A control element that allows for a binary selection.",
    "resources": {
      "zag": "switch",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/switch/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 191
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the switch correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"switch\">\n<h3>Design impact on the asChild property</h3>\n<p>The <code>Switch.Root</code> element of the switch is a <code>label</code> element. This is because\nthe switch is a form control and should be associated with a label to provide\ncontext and meaning to the user. Otherwise, the HTML and accessibility structure\nwill be invalid.</p>\n<blockquote>\n<p>If you need to use the <code>asChild</code> property, make sure that the <code>label</code> element\nis the direct child of the <code>Switch.Root</code> component.</p>\n</blockquote>\n<h2>Examples</h2>\n<p>Learn how to use the <code>Switch</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled Switch</h3>\n<p>For a controlled Switch component, the state of the toggle is managed using the\nchecked prop, and updates when the <code>onCheckedChange</code> event handler is called:</p>\n<story id=\"Controlled\">\n<h3>Render Prop Usage</h3>\n<p>The Switch component also allows for a render prop, granting direct access to\nits internal state. This enables you to dynamically adjust and customize aspects\nof the component based on its current state:</p>\n<story id=\"RenderProp\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": [
          {
            "title": "Design impact on the asChild property",
            "url": "#design-impact-on-the-aschild-property",
            "items": []
          }
        ]
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Switch",
            "url": "#controlled-switch",
            "items": []
          },
          {
            "title": "Render Prop Usage",
            "url": "#render-prop-usage",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const c={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:i,ComponentPreview:r,ComponentTypes:d,Story:h}=c;return i||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),h||_missingMdxReference(\"Story\",!0),t(e,{children:[n(r,{}),\"\\n\",n(c.h2,{children:\"Anatomy\"}),\"\\n\",n(c.p,{children:\"To set up the switch correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"Each part includes a \",n(c.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(i,{id:\"switch\"}),\"\\n\",n(c.h3,{children:\"Design impact on the asChild property\"}),\"\\n\",t(c.p,{children:[\"The \",n(c.code,{children:\"Switch.Root\"}),\" element of the switch is a \",n(c.code,{children:\"label\"}),\" element. This is because\\nthe switch is a form control and should be associated with a label to provide\\ncontext and meaning to the user. Otherwise, the HTML and accessibility structure\\nwill be invalid.\"]}),\"\\n\",t(c.blockquote,{children:[\"\\n\",t(c.p,{children:[\"If you need to use the \",n(c.code,{children:\"asChild\"}),\" property, make sure that the \",n(c.code,{children:\"label\"}),\" element\\nis the direct child of the \",n(c.code,{children:\"Switch.Root\"}),\" component.\"]}),\"\\n\"]}),\"\\n\",n(c.h2,{children:\"Examples\"}),\"\\n\",t(c.p,{children:[\"Learn how to use the \",n(c.code,{children:\"Switch\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(h,{id:\"Basic\"}),\"\\n\",n(c.h3,{children:\"Controlled Switch\"}),\"\\n\",t(c.p,{children:[\"For a controlled Switch component, the state of the toggle is managed using the\\nchecked prop, and updates when the \",n(c.code,{children:\"onCheckedChange\"}),\" event handler is called:\"]}),\"\\n\",n(h,{id:\"Controlled\"}),\"\\n\",n(c.h3,{children:\"Render Prop Usage\"}),\"\\n\",n(c.p,{children:\"The Switch component also allows for a render prop, granting direct access to\\nits internal state. This enables you to dynamically adjust and customize aspects\\nof the component based on its current state:\"}),\"\\n\",n(h,{id:\"RenderProp\"}),\"\\n\",n(c.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/switch",
    "href": "/docs/components/switch",
    "category": "components"
  },
  {
    "id": "tabs",
    "title": "Tabs",
    "description": "Flexible navigation tool with various modes and features.",
    "resources": {
      "zag": "tabs",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/tabs/"
    },
    "metadata": {
      "readingTime": 2,
      "wordCount": 430
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the tabs correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"tabs\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Tabs</code> component in your project. Let's take a look at the\nmost basic example:</p>\n<story id=\"Basic\">\n<h3>Initial Tab</h3>\n<p>To set a default tab on initial render, use the <code>defaultValue</code> prop:</p>\n<story id=\"InitialTab\">\n<h3>Tab Indicator</h3>\n<p>To provide a visual cue for the selected tab, use the <code>Tabs.Indicator</code>\ncomponent:</p>\n<story id=\"Indicator\">\n<h3>Lazy Mounting</h3>\n<p>Lazy mounting is a feature that allows the content of a tab to be rendered only\nwhen the tab is first activated. This is useful for performance optimization,\nespecially when tab content is large or complex. To enable lazy mounting, use\nthe <code>lazyMount</code> prop on the <code>Tabs.Content</code> component.</p>\n<p>In addition, the <code>unmountOnExit</code> prop can be used in conjunction with\n<code>lazyMount</code> to unmount the tab content when the tab is deactivated, freeing up\nresources. The next time the tab is activated, its content will be re-rendered.</p>\n<story id=\"LazyMount\">\n<h3>Disabled Tab</h3>\n<p>To disable a tab, simply pass the <code>disabled</code> prop to the <code>Tabs.Trigger</code>\ncomponent:</p>\n<story id=\"DisabledTab\">\n<h3>Controlled Tabs</h3>\n<p>To create a controlled Tabs component, manage the current selected tab using the\n<code>value</code> prop and update it when the <code>onValueChange</code> event handler is called:</p>\n<story id=\"Controlled\">\n<h3>Router Controlled Tabs</h3>\n<p>When using frameworks like Next.js, Remix, or React Router, controlling the\nactive tabs based on the URL can be useful.</p>\n<p>To achieve this, you need to do two things:</p>\n<ul>\n<li>Set the <code>value</code> prop to the current URL path.</li>\n<li>Listen to the <code>onValueChange</code> event and update the URL path.</li>\n</ul>\n<p>Here's an example using Remix Router</p>\n<pre><code class=\"language-tsx\">import { Tabs } from '@ark-ui/react/tabs'\nimport { useLocation, useNavigate, Link } from '@remix-run/react'\n\nexport default function App() {\n  const { pathname } = useLocation()\n  const navigate = useNavigate()\n  const lastPathFragment = pathname.substring(pathname.lastIndexOf('/') + 1)\n  const activeTab = lastPathFragment.length > 0 ? lastPathFragment : 'homepage'\n\n  return (\n    &#x3C;Tabs.Root\n      value={activeTab}\n      onValueChange={({ value }) => {\n        navigate(`/${value === 'home' ? '' : value}`)\n      }}\n    >\n      &#x3C;Tabs.List>\n        &#x3C;Tabs.Trigger asChild value=\"home\">\n          &#x3C;Link to=\"\">Home&#x3C;/Link>\n        &#x3C;/Tabs.Trigger>\n        &#x3C;Tabs.Trigger asChild value=\"page-1\">\n          &#x3C;Link to=\"page-1\">Page 1&#x3C;/Link>\n        &#x3C;/Tabs.Trigger>\n        &#x3C;Tabs.Trigger asChild value=\"page-2\">\n          &#x3C;Link to=\"page-2\">Page 2&#x3C;/Link>\n        &#x3C;/Tabs.Trigger>\n      &#x3C;/Tabs.List>\n    &#x3C;/Tabs.Root>\n  )\n}\n</code></pre>\n<h3>Vertical Tabs</h3>\n<p>The default orientation of the tabs is <code>horizontal</code>. To change the orientation,\nset the <code>orientation</code> prop to <code>vertical</code>.</p>\n<story id=\"Vertical\">\n<h3>Manual Activation</h3>\n<p>By default, the tab can be selected when it receives focus from either the\nkeyboard or pointer interaction. This is called automatic tab activation.</p>\n<p>In contrast, manual tab activation means the tab is selected with the</p>\n<p><kbd>Enter</kbd> key or by clicking on the tab.</p>\n<story id=\"Manual\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Initial Tab",
            "url": "#initial-tab",
            "items": []
          },
          {
            "title": "Tab Indicator",
            "url": "#tab-indicator",
            "items": []
          },
          {
            "title": "Lazy Mounting",
            "url": "#lazy-mounting",
            "items": []
          },
          {
            "title": "Disabled Tab",
            "url": "#disabled-tab",
            "items": []
          },
          {
            "title": "Controlled Tabs",
            "url": "#controlled-tabs",
            "items": []
          },
          {
            "title": "Router Controlled Tabs",
            "url": "#router-controlled-tabs",
            "items": []
          },
          {
            "title": "Vertical Tabs",
            "url": "#vertical-tabs",
            "items": []
          },
          {
            "title": "Manual Activation",
            "url": "#manual-activation",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(a){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...a.components},{Anatomy:o,ComponentPreview:r,ComponentTypes:c,Story:l}=i;return o||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentPreview\",!0),c||_missingMdxReference(\"ComponentTypes\",!0),l||_missingMdxReference(\"Story\",!0),t(e,{children:[n(r,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the tabs correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(o,{id:\"tabs\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"Tabs\"}),\" component in your project. Let's take a look at the\\nmost basic example:\"]}),\"\\n\",n(l,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Initial Tab\"}),\"\\n\",t(i.p,{children:[\"To set a default tab on initial render, use the \",n(i.code,{children:\"defaultValue\"}),\" prop:\"]}),\"\\n\",n(l,{id:\"InitialTab\"}),\"\\n\",n(i.h3,{children:\"Tab Indicator\"}),\"\\n\",t(i.p,{children:[\"To provide a visual cue for the selected tab, use the \",n(i.code,{children:\"Tabs.Indicator\"}),\"\\ncomponent:\"]}),\"\\n\",n(l,{id:\"Indicator\"}),\"\\n\",n(i.h3,{children:\"Lazy Mounting\"}),\"\\n\",t(i.p,{children:[\"Lazy mounting is a feature that allows the content of a tab to be rendered only\\nwhen the tab is first activated. This is useful for performance optimization,\\nespecially when tab content is large or complex. To enable lazy mounting, use\\nthe \",n(i.code,{children:\"lazyMount\"}),\" prop on the \",n(i.code,{children:\"Tabs.Content\"}),\" component.\"]}),\"\\n\",t(i.p,{children:[\"In addition, the \",n(i.code,{children:\"unmountOnExit\"}),\" prop can be used in conjunction with\\n\",n(i.code,{children:\"lazyMount\"}),\" to unmount the tab content when the tab is deactivated, freeing up\\nresources. The next time the tab is activated, its content will be re-rendered.\"]}),\"\\n\",n(l,{id:\"LazyMount\"}),\"\\n\",n(i.h3,{children:\"Disabled Tab\"}),\"\\n\",t(i.p,{children:[\"To disable a tab, simply pass the \",n(i.code,{children:\"disabled\"}),\" prop to the \",n(i.code,{children:\"Tabs.Trigger\"}),\"\\ncomponent:\"]}),\"\\n\",n(l,{id:\"DisabledTab\"}),\"\\n\",n(i.h3,{children:\"Controlled Tabs\"}),\"\\n\",t(i.p,{children:[\"To create a controlled Tabs component, manage the current selected tab using the\\n\",n(i.code,{children:\"value\"}),\" prop and update it when the \",n(i.code,{children:\"onValueChange\"}),\" event handler is called:\"]}),\"\\n\",n(l,{id:\"Controlled\"}),\"\\n\",n(i.h3,{children:\"Router Controlled Tabs\"}),\"\\n\",n(i.p,{children:\"When using frameworks like Next.js, Remix, or React Router, controlling the\\nactive tabs based on the URL can be useful.\"}),\"\\n\",n(i.p,{children:\"To achieve this, you need to do two things:\"}),\"\\n\",t(i.ul,{children:[\"\\n\",t(i.li,{children:[\"Set the \",n(i.code,{children:\"value\"}),\" prop to the current URL path.\"]}),\"\\n\",t(i.li,{children:[\"Listen to the \",n(i.code,{children:\"onValueChange\"}),\" event and update the URL path.\"]}),\"\\n\"]}),\"\\n\",n(i.p,{children:\"Here's an example using Remix Router\"}),\"\\n\",n(i.pre,{children:n(i.code,{className:\"language-tsx\",children:\"import { Tabs } from '@ark-ui/react/tabs'\\nimport { useLocation, useNavigate, Link } from '@remix-run/react'\\n\\nexport default function App() {\\n  const { pathname } = useLocation()\\n  const navigate = useNavigate()\\n  const lastPathFragment = pathname.substring(pathname.lastIndexOf('/') + 1)\\n  const activeTab = lastPathFragment.length > 0 ? lastPathFragment : 'homepage'\\n\\n  return (\\n    <Tabs.Root\\n      value={activeTab}\\n      onValueChange={({ value }) => {\\n        navigate(`/${value === 'home' ? '' : value}`)\\n      }}\\n    >\\n      <Tabs.List>\\n        <Tabs.Trigger asChild value=\\\"home\\\">\\n          <Link to=\\\"\\\">Home</Link>\\n        </Tabs.Trigger>\\n        <Tabs.Trigger asChild value=\\\"page-1\\\">\\n          <Link to=\\\"page-1\\\">Page 1</Link>\\n        </Tabs.Trigger>\\n        <Tabs.Trigger asChild value=\\\"page-2\\\">\\n          <Link to=\\\"page-2\\\">Page 2</Link>\\n        </Tabs.Trigger>\\n      </Tabs.List>\\n    </Tabs.Root>\\n  )\\n}\\n\"})}),\"\\n\",n(i.h3,{children:\"Vertical Tabs\"}),\"\\n\",t(i.p,{children:[\"The default orientation of the tabs is \",n(i.code,{children:\"horizontal\"}),\". To change the orientation,\\nset the \",n(i.code,{children:\"orientation\"}),\" prop to \",n(i.code,{children:\"vertical\"}),\".\"]}),\"\\n\",n(l,{id:\"Vertical\"}),\"\\n\",n(i.h3,{children:\"Manual Activation\"}),\"\\n\",n(i.p,{children:\"By default, the tab can be selected when it receives focus from either the\\nkeyboard or pointer interaction. This is called automatic tab activation.\"}),\"\\n\",n(i.p,{children:\"In contrast, manual tab activation means the tab is selected with the\"}),\"\\n\",t(i.p,{children:[n(\"kbd\",{children:\"Enter\"}),\" key or by clicking on the tab.\"]}),\"\\n\",n(l,{id:\"Manual\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(c,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/tabs",
    "href": "/docs/components/tabs",
    "category": "components"
  },
  {
    "id": "tags-input",
    "title": "Tags Input",
    "description": "A component that allows users to add tags to an input field.",
    "resources": {
      "zag": "tags-input"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 396
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the tags input correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"tags-input\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>TagsInput</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Navigating and Editing tags</h3>\n<p>When the input has an empty value or the caret is at the start position, the\ntags can be selected by using the arrow left and arrow right keys. When \"visual\"\nfocus in on any tag:</p>\n<ul>\n<li>Pressing <kbd>Enter</kbd> or double-clicking on the tag will put it in edit\nmode, allowing the user change its value and press <kbd>Enter</kbd> to commit\nthe changes.</li>\n<li>Pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> will delete the tag that\nhas <em>visual</em> focus.</li>\n</ul>\n<h3>Setting the initial tags</h3>\n<p>To set the initial tag values, set the <code>defaultValue</code> prop.</p>\n<story id=\"InitialValue\">\n<h3>Limiting the number of tags</h3>\n<p>To limit the number of tags within the component, you can set the <code>max</code> property\nto the limit you want. The default value is <code>Infinity</code>.</p>\n<p>When the tag reaches the limit, new tags cannot be added except the\n<code>allowOverflow</code> prop is set to <code>true</code>.</p>\n<story id=\"MaxWithOverflow\">\n<h3>Validating Tags</h3>\n<p>Before a tag is added, the <code>validate</code> function is called to determine whether to\naccept or reject a tag.</p>\n<p>A common use-case for validating tags is preventing duplicates or validating the\ndata type.</p>\n<story id=\"Validated\">\n<h3>Blur behavior</h3>\n<p>When the tags input is blurred, you can configure the action the component\nshould take by passing the <code>blurBehavior</code> prop.</p>\n<ul>\n<li><code>add</code> — Adds the tag to the list of tags.</li>\n<li><code>clear</code> — Clears the tags input value.</li>\n</ul>\n<story id=\"BlurBehavior\">\n<h3>Paste behavior</h3>\n<p>To add a tag when a arbitrary value is pasted in the input element, pass the\n<code>addOnPaste</code> prop.</p>\n<p>When a value is pasted, the component will:</p>\n<ul>\n<li>check if the value is a valid tag based on the <code>validate</code> option</li>\n<li>split the value by the <code>delimiter</code> option passed</li>\n</ul>\n<story id=\"PasteBehavior\">\n<h3>Disable tag editing</h3>\n<p>by default the tags can be edited by double-clicking on the tag or focusing on\nthem and pressing <kbd>Enter</kbd>. To disable this behavior, pass\n<code>allowEditTag={false}</code></p>\n<story id=\"DisabledEditing\">\n<h3>Events</h3>\n<p>During the lifetime of the tags input interaction, here's a list of events we\nemit:</p>\n<ul>\n<li><code>onValueChange</code> — invoked when the tag value changes.</li>\n<li><code>onHighlightChange</code> — invoked when a tag has visual focus.</li>\n<li><code>onValueInvalid</code> — invoked when the max tag count is reached or the <code>validate</code>\nfunction returns <code>false</code>.</li>\n</ul>\n<story id=\"OnEvent\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Navigating and Editing tags",
            "url": "#navigating-and-editing-tags",
            "items": []
          },
          {
            "title": "Setting the initial tags",
            "url": "#setting-the-initial-tags",
            "items": []
          },
          {
            "title": "Limiting the number of tags",
            "url": "#limiting-the-number-of-tags",
            "items": []
          },
          {
            "title": "Validating Tags",
            "url": "#validating-tags",
            "items": []
          },
          {
            "title": "Blur behavior",
            "url": "#blur-behavior",
            "items": []
          },
          {
            "title": "Paste behavior",
            "url": "#paste-behavior",
            "items": []
          },
          {
            "title": "Disable tag editing",
            "url": "#disable-tag-editing",
            "items": []
          },
          {
            "title": "Events",
            "url": "#events",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const a={blockquote:\"blockquote\",code:\"code\",em:\"em\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",ul:\"ul\",...i.components},{Anatomy:d,ComponentPreview:l,ComponentTypes:h,Story:r}=a;return d||_missingMdxReference(\"Anatomy\",!0),l||_missingMdxReference(\"ComponentPreview\",!0),h||_missingMdxReference(\"ComponentTypes\",!0),r||_missingMdxReference(\"Story\",!0),t(e,{children:[n(l,{}),\"\\n\",n(a.h2,{children:\"Anatomy\"}),\"\\n\",n(a.p,{children:\"To set up the tags input correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(a.blockquote,{children:[\"\\n\",t(a.p,{children:[\"Each part includes a \",n(a.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(d,{id:\"tags-input\"}),\"\\n\",n(a.h2,{children:\"Examples\"}),\"\\n\",t(a.p,{children:[\"Learn how to use the \",n(a.code,{children:\"TagsInput\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(r,{id:\"Basic\"}),\"\\n\",n(a.h3,{children:\"Navigating and Editing tags\"}),\"\\n\",n(a.p,{children:'When the input has an empty value or the caret is at the start position, the\\ntags can be selected by using the arrow left and arrow right keys. When \"visual\"\\nfocus in on any tag:'}),\"\\n\",t(a.ul,{children:[\"\\n\",t(a.li,{children:[\"Pressing \",n(\"kbd\",{children:\"Enter\"}),\" or double-clicking on the tag will put it in edit\\nmode, allowing the user change its value and press \",n(\"kbd\",{children:\"Enter\"}),\" to commit\\nthe changes.\"]}),\"\\n\",t(a.li,{children:[\"Pressing \",n(\"kbd\",{children:\"Delete\"}),\" or \",n(\"kbd\",{children:\"Backspace\"}),\" will delete the tag that\\nhas \",n(a.em,{children:\"visual\"}),\" focus.\"]}),\"\\n\"]}),\"\\n\",n(a.h3,{children:\"Setting the initial tags\"}),\"\\n\",t(a.p,{children:[\"To set the initial tag values, set the \",n(a.code,{children:\"defaultValue\"}),\" prop.\"]}),\"\\n\",n(r,{id:\"InitialValue\"}),\"\\n\",n(a.h3,{children:\"Limiting the number of tags\"}),\"\\n\",t(a.p,{children:[\"To limit the number of tags within the component, you can set the \",n(a.code,{children:\"max\"}),\" property\\nto the limit you want. The default value is \",n(a.code,{children:\"Infinity\"}),\".\"]}),\"\\n\",t(a.p,{children:[\"When the tag reaches the limit, new tags cannot be added except the\\n\",n(a.code,{children:\"allowOverflow\"}),\" prop is set to \",n(a.code,{children:\"true\"}),\".\"]}),\"\\n\",n(r,{id:\"MaxWithOverflow\"}),\"\\n\",n(a.h3,{children:\"Validating Tags\"}),\"\\n\",t(a.p,{children:[\"Before a tag is added, the \",n(a.code,{children:\"validate\"}),\" function is called to determine whether to\\naccept or reject a tag.\"]}),\"\\n\",n(a.p,{children:\"A common use-case for validating tags is preventing duplicates or validating the\\ndata type.\"}),\"\\n\",n(r,{id:\"Validated\"}),\"\\n\",n(a.h3,{children:\"Blur behavior\"}),\"\\n\",t(a.p,{children:[\"When the tags input is blurred, you can configure the action the component\\nshould take by passing the \",n(a.code,{children:\"blurBehavior\"}),\" prop.\"]}),\"\\n\",t(a.ul,{children:[\"\\n\",t(a.li,{children:[n(a.code,{children:\"add\"}),\" — Adds the tag to the list of tags.\"]}),\"\\n\",t(a.li,{children:[n(a.code,{children:\"clear\"}),\" — Clears the tags input value.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"BlurBehavior\"}),\"\\n\",n(a.h3,{children:\"Paste behavior\"}),\"\\n\",t(a.p,{children:[\"To add a tag when a arbitrary value is pasted in the input element, pass the\\n\",n(a.code,{children:\"addOnPaste\"}),\" prop.\"]}),\"\\n\",n(a.p,{children:\"When a value is pasted, the component will:\"}),\"\\n\",t(a.ul,{children:[\"\\n\",t(a.li,{children:[\"check if the value is a valid tag based on the \",n(a.code,{children:\"validate\"}),\" option\"]}),\"\\n\",t(a.li,{children:[\"split the value by the \",n(a.code,{children:\"delimiter\"}),\" option passed\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"PasteBehavior\"}),\"\\n\",n(a.h3,{children:\"Disable tag editing\"}),\"\\n\",t(a.p,{children:[\"by default the tags can be edited by double-clicking on the tag or focusing on\\nthem and pressing \",n(\"kbd\",{children:\"Enter\"}),\". To disable this behavior, pass\\n\",n(a.code,{children:\"allowEditTag={false}\"})]}),\"\\n\",n(r,{id:\"DisabledEditing\"}),\"\\n\",n(a.h3,{children:\"Events\"}),\"\\n\",n(a.p,{children:\"During the lifetime of the tags input interaction, here's a list of events we\\nemit:\"}),\"\\n\",t(a.ul,{children:[\"\\n\",t(a.li,{children:[n(a.code,{children:\"onValueChange\"}),\" — invoked when the tag value changes.\"]}),\"\\n\",t(a.li,{children:[n(a.code,{children:\"onHighlightChange\"}),\" — invoked when a tag has visual focus.\"]}),\"\\n\",t(a.li,{children:[n(a.code,{children:\"onValueInvalid\"}),\" — invoked when the max tag count is reached or the \",n(a.code,{children:\"validate\"}),\"\\nfunction returns \",n(a.code,{children:\"false\"}),\".\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"OnEvent\"}),\"\\n\",n(a.h2,{children:\"API Reference\"}),\"\\n\",n(h,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/tags-input",
    "href": "/docs/components/tags-input",
    "category": "components"
  },
  {
    "id": "toast",
    "title": "Toast",
    "description": "A message that appears on the screen to provide feedback on an action.",
    "resources": {
      "zag": "toast"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 147
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the toast correctly, you'll need to understand its anatomy and how we\nname its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"toast\">\n<h2>Examples</h2>\n<p>To use the Toast component in your application, you need to set it up using the\n<code>createToaster</code> hook. This hook manages the placement and grouping of toasts,\nand provides a <code>toast</code> object needed to create toast notification.</p>\n<p>To create a basic Toast, use the <code>toast.create</code> method to display a\nnotification.</p>\n<story id=\"Basic\">\n<h3>Configuring Toast</h3>\n<p>To configure the Toast component, you can pass various options to the\n<code>toast.create</code> method. These options include <code>title</code>, <code>description</code>, <code>type</code>,\n<code>duration</code>, and <code>removeDelay</code>:</p>\n<story id=\"Customized\">\n<h3>Custom Rendered Toast</h3>\n<p>For cases where you need more flexibility in rendering, the Toast component\noffers the ability to use a custom render function. This allows you to customize\nthe content of the toast:</p>\n<story id=\"CustomRender\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Configuring Toast",
            "url": "#configuring-toast",
            "items": []
          },
          {
            "title": "Custom Rendered Toast",
            "url": "#custom-rendered-toast",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:c,ComponentPreview:r,ComponentTypes:d,Story:s}=i;return c||_missingMdxReference(\"Anatomy\",!0),r||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),s||_missingMdxReference(\"Story\",!0),t(e,{children:[n(r,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the toast correctly, you'll need to understand its anatomy and how we\\nname its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"toast\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"To use the Toast component in your application, you need to set it up using the\\n\",n(i.code,{children:\"createToaster\"}),\" hook. This hook manages the placement and grouping of toasts,\\nand provides a \",n(i.code,{children:\"toast\"}),\" object needed to create toast notification.\"]}),\"\\n\",t(i.p,{children:[\"To create a basic Toast, use the \",n(i.code,{children:\"toast.create\"}),\" method to display a\\nnotification.\"]}),\"\\n\",n(s,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Configuring Toast\"}),\"\\n\",t(i.p,{children:[\"To configure the Toast component, you can pass various options to the\\n\",n(i.code,{children:\"toast.create\"}),\" method. These options include \",n(i.code,{children:\"title\"}),\", \",n(i.code,{children:\"description\"}),\", \",n(i.code,{children:\"type\"}),\",\\n\",n(i.code,{children:\"duration\"}),\", and \",n(i.code,{children:\"removeDelay\"}),\":\"]}),\"\\n\",n(s,{id:\"Customized\"}),\"\\n\",n(i.h3,{children:\"Custom Rendered Toast\"}),\"\\n\",n(i.p,{children:\"For cases where you need more flexibility in rendering, the Toast component\\noffers the ability to use a custom render function. This allows you to customize\\nthe content of the toast:\"}),\"\\n\",n(s,{id:\"CustomRender\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/toast",
    "href": "/docs/components/toast",
    "category": "components"
  },
  {
    "id": "toggle-group",
    "title": "Toggle Group",
    "description": "A set of two-state buttons that can be toggled on or off.",
    "resources": {
      "zag": "toggle-group"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 80
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the toggle group correctly, you'll need to understand its anatomy and\nhow we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"toggle-group\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>ToggleGroup</code> component in your project. Let's take a look\nat the most basic example:</p>\n<story id=\"Basic\">\n<h3>Multiple Selection</h3>\n<p>Demonstrates how to enable <code>multiple</code> selection within the group.</p>\n<story id=\"Multiple\">\n<h3>Initial Value</h3>\n<p>Shows how to set an initial value in the toggle group.</p>\n<story id=\"InitialValue\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Multiple Selection",
            "url": "#multiple-selection",
            "items": []
          },
          {
            "title": "Initial Value",
            "url": "#initial-value",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...o.components},{Anatomy:r,ComponentPreview:c,ComponentTypes:l,Story:d}=i;return r||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),l||_missingMdxReference(\"ComponentTypes\",!0),d||_missingMdxReference(\"Story\",!0),t(e,{children:[n(c,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the toggle group correctly, you'll need to understand its anatomy and\\nhow we name its parts.\"}),\"\\n\",t(i.blockquote,{children:[\"\\n\",t(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"toggle-group\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",t(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"ToggleGroup\"}),\" component in your project. Let's take a look\\nat the most basic example:\"]}),\"\\n\",n(d,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Multiple Selection\"}),\"\\n\",t(i.p,{children:[\"Demonstrates how to enable \",n(i.code,{children:\"multiple\"}),\" selection within the group.\"]}),\"\\n\",n(d,{id:\"Multiple\"}),\"\\n\",n(i.h3,{children:\"Initial Value\"}),\"\\n\",n(i.p,{children:\"Shows how to set an initial value in the toggle group.\"}),\"\\n\",n(d,{id:\"InitialValue\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(l,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/toggle-group",
    "href": "/docs/components/toggle-group",
    "category": "components"
  },
  {
    "id": "tooltip",
    "title": "Tooltip",
    "description": "A label that provides information on hover or focus.",
    "resources": {
      "zag": "tooltip",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 158
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the tooltip correctly, you'll need to understand its anatomy and how\nwe name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"tooltip\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>Tooltip</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h3>Controlled Tooltip</h3>\n<p>To create a controlled Tooltip component, manage the state of whether the\ntooltip is open using the <code>open</code> prop:</p>\n<story id=\"Controlled\">\n<h3>Using a Render Function</h3>\n<p>For more control over the Tooltip's functionality, you can use a function as a\nchild, which provides access to the Tooltip API:</p>\n<story id=\"RenderFn\">\n<h3>Adding an Arrow</h3>\n<p>To display an arrow pointing to the trigger from the tooltip, use the\n<code>Tooltip.Arrow</code> and <code>Tooltip.ArrowTip</code> components:</p>\n<story id=\"Arrow\">\n<h3>Configuring Delay Timings</h3>\n<p>To configure the delay timings for the Tooltip, use the <code>closeDelay</code> and\n<code>openDelay</code> props:</p>\n<story id=\"Timings\">\n<h3>Custom Positioning</h3>\n<p>To customize the position of the Tooltip relative to the trigger, use the\n<code>positioning</code> prop:</p>\n<story id=\"Positioning\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></story></story></story></story></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": [
          {
            "title": "Controlled Tooltip",
            "url": "#controlled-tooltip",
            "items": []
          },
          {
            "title": "Using a Render Function",
            "url": "#using-a-render-function",
            "items": []
          },
          {
            "title": "Adding an Arrow",
            "url": "#adding-an-arrow",
            "items": []
          },
          {
            "title": "Configuring Delay Timings",
            "url": "#configuring-delay-timings",
            "items": []
          },
          {
            "title": "Custom Positioning",
            "url": "#custom-positioning",
            "items": []
          }
        ]
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:o}=arguments[0];function _createMdxContent(t){const i={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components},{Anatomy:r,ComponentPreview:c,ComponentTypes:d,Story:l}=i;return r||_missingMdxReference(\"Anatomy\",!0),c||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),l||_missingMdxReference(\"Story\",!0),o(e,{children:[n(c,{}),\"\\n\",n(i.h2,{children:\"Anatomy\"}),\"\\n\",n(i.p,{children:\"To set up the tooltip correctly, you'll need to understand its anatomy and how\\nwe name its parts.\"}),\"\\n\",o(i.blockquote,{children:[\"\\n\",o(i.p,{children:[\"Each part includes a \",n(i.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(r,{id:\"tooltip\"}),\"\\n\",n(i.h2,{children:\"Examples\"}),\"\\n\",o(i.p,{children:[\"Learn how to use the \",n(i.code,{children:\"Tooltip\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(l,{id:\"Basic\"}),\"\\n\",n(i.h3,{children:\"Controlled Tooltip\"}),\"\\n\",o(i.p,{children:[\"To create a controlled Tooltip component, manage the state of whether the\\ntooltip is open using the \",n(i.code,{children:\"open\"}),\" prop:\"]}),\"\\n\",n(l,{id:\"Controlled\"}),\"\\n\",n(i.h3,{children:\"Using a Render Function\"}),\"\\n\",n(i.p,{children:\"For more control over the Tooltip's functionality, you can use a function as a\\nchild, which provides access to the Tooltip API:\"}),\"\\n\",n(l,{id:\"RenderFn\"}),\"\\n\",n(i.h3,{children:\"Adding an Arrow\"}),\"\\n\",o(i.p,{children:[\"To display an arrow pointing to the trigger from the tooltip, use the\\n\",n(i.code,{children:\"Tooltip.Arrow\"}),\" and \",n(i.code,{children:\"Tooltip.ArrowTip\"}),\" components:\"]}),\"\\n\",n(l,{id:\"Arrow\"}),\"\\n\",n(i.h3,{children:\"Configuring Delay Timings\"}),\"\\n\",o(i.p,{children:[\"To configure the delay timings for the Tooltip, use the \",n(i.code,{children:\"closeDelay\"}),\" and\\n\",n(i.code,{children:\"openDelay\"}),\" props:\"]}),\"\\n\",n(l,{id:\"Timings\"}),\"\\n\",n(i.h3,{children:\"Custom Positioning\"}),\"\\n\",o(i.p,{children:[\"To customize the position of the Tooltip relative to the trigger, use the\\n\",n(i.code,{children:\"positioning\"}),\" prop:\"]}),\"\\n\",n(l,{id:\"Positioning\"}),\"\\n\",n(i.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:o}=e.components||{};return o?n(o,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/tooltip",
    "href": "/docs/components/tooltip",
    "category": "components"
  },
  {
    "id": "tree-view",
    "title": "Tree View",
    "description": "A component that is used to show a tree hierarchy.",
    "resources": {
      "zag": "tree-view",
      "w3c": "https://www.w3.org/WAI/ARIA/apg/patterns/treeview/"
    },
    "metadata": {
      "readingTime": 1,
      "wordCount": 57
    },
    "content": "<componentpreview>\n<h2>Anatomy</h2>\n<p>To set up the tree view component correctly, you'll need to understand its\nanatomy and how we name its parts.</p>\n<blockquote>\n<p>Each part includes a <code>data-part</code> attribute to help identify them in the DOM.</p>\n</blockquote>\n<anatomy id=\"tree-view\">\n<h2>Examples</h2>\n<p>Learn how to use the <code>TreeView</code> component in your project. Let's take a look at\nthe most basic example:</p>\n<story id=\"Basic\">\n<h2>API Reference</h2>\n<componenttypes></componenttypes></story></anatomy></componentpreview>",
    "toc": [
      {
        "title": "Anatomy",
        "url": "#anatomy",
        "items": []
      },
      {
        "title": "Examples",
        "url": "#examples",
        "items": []
      },
      {
        "title": "API Reference",
        "url": "#api-reference",
        "items": []
      }
    ],
    "code": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(o){const r={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",p:\"p\",...o.components},{Anatomy:c,ComponentPreview:i,ComponentTypes:d,Story:s}=r;return c||_missingMdxReference(\"Anatomy\",!0),i||_missingMdxReference(\"ComponentPreview\",!0),d||_missingMdxReference(\"ComponentTypes\",!0),s||_missingMdxReference(\"Story\",!0),t(e,{children:[n(i,{}),\"\\n\",n(r.h2,{children:\"Anatomy\"}),\"\\n\",n(r.p,{children:\"To set up the tree view component correctly, you'll need to understand its\\nanatomy and how we name its parts.\"}),\"\\n\",t(r.blockquote,{children:[\"\\n\",t(r.p,{children:[\"Each part includes a \",n(r.code,{children:\"data-part\"}),\" attribute to help identify them in the DOM.\"]}),\"\\n\"]}),\"\\n\",n(c,{id:\"tree-view\"}),\"\\n\",n(r.h2,{children:\"Examples\"}),\"\\n\",t(r.p,{children:[\"Learn how to use the \",n(r.code,{children:\"TreeView\"}),\" component in your project. Let's take a look at\\nthe most basic example:\"]}),\"\\n\",n(s,{id:\"Basic\"}),\"\\n\",n(r.h2,{children:\"API Reference\"}),\"\\n\",n(d,{})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "slug": "components/tree-view",
    "href": "/docs/components/tree-view",
    "category": "components"
  }
]
