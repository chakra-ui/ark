import fs from 'fs-extra'
import prettier from 'prettier'
import {
  accordionAnatomy,
  checkboxAnatomy,
  dialogAnatomy,
  editableAnatomy,
  hoverCardAnatomy,
  menuAnatomy,
  numberInputAnatomy,
  paginationAnatomy,
  pinInputAnatomy,
  popoverAnatomy,
  radioGroupAnatomy,
  rangeSliderAnatomy,
  ratingGroupAnatomy,
  selectAnatomy,
  sliderAnatomy,
  tabsAnatomy,
  tagsInputAnatomy,
  toastAnatomy,
  tooltipAnatomy,
} from '../packages/react/dist/index.mjs'

const anatomyMap = {
  accordion: accordionAnatomy,
  checkbox: checkboxAnatomy,
  dialog: dialogAnatomy,
  editable: editableAnatomy,
  'hover-card': hoverCardAnatomy,
  menu: menuAnatomy,
  'number-input': numberInputAnatomy,
  pagination: paginationAnatomy,
  'pin-input': pinInputAnatomy,
  popover: popoverAnatomy,
  'radio-group': radioGroupAnatomy,
  'range-slider': rangeSliderAnatomy,
  'rating-group': ratingGroupAnatomy,
  select: selectAnatomy,
  slider: sliderAnatomy,
  tabs: tabsAnatomy,
  toast: toastAnatomy,
  'tags-input': tagsInputAnatomy,
  tooltip: tooltipAnatomy,
}

function getAnatomyStyleguide(anatomy) {
  const anatomyBuilder = anatomyMap[anatomy]
  if (!anatomyBuilder) {
    return ''
  }
  return Object.entries(anatomyBuilder.build())
    .reduce(
      (prev, [partName, { selector }]) =>
        `${prev}
${selector} {
  /* add ${partName} styles */
}
`,
      '',
    )
    .trim()
}

function getStyleguide(name) {
  return `\`\`\`scss
${getAnatomyStyleguide(name)}
\`\`\``
}

const startAutogenerated = '{/* start auto-generated */}'
const endAutogenerated = '{/* end auto-generated */}'

/**
 * Creates a styleguide file for a component, with the initial content
 * The "auto-generated" comment is used to update the content later on
 */
function initialStyleguideFile(name, styleguide) {
  return `${startAutogenerated}
${styleguide}
${endAutogenerated}
`
}

const outDir = 'styleguides'

/**
 * Upserts the styleguide file for all component anatomies.
 * The files can be safely be edited, only the content between the "auto-generated" comments will be overwritten.
 */
async function main() {
  const styleguides = Object.keys(anatomyMap).map((component) => ({
    name: component,
    styleguide: getStyleguide(component),
  }))

  if (!fs.existsSync(outDir)) {
    await fs.mkdir(outDir)
  }

  await Promise.allSettled(
    styleguides.map(async ({ name, styleguide }) => {
      const outPath = `${outDir}/${name}.mdx`
      const initialPrettierOptions = await prettier.resolveConfig(outPath)
      const prettierOptions = {
        ...initialPrettierOptions,
        filepath: outPath,
      }

      if (!fs.existsSync(outPath)) {
        const formattedContent = prettier.format(
          initialStyleguideFile(name, styleguide),
          prettierOptions,
        )
        await fs.writeFile(outPath, formattedContent)
        return
      }

      const content = String(await fs.readFile(outPath, 'utf8'))
      const start = content.indexOf(startAutogenerated)
      const end = content.indexOf(endAutogenerated)
      if (start === -1 || end === -1) {
        throw new Error(`Could not find autogenerated section in ${outPath}`)
      }
      const updatedContent = `${content.slice(0, start + startAutogenerated.length)}
${styleguide}
${content.slice(end)}`

      const formattedContent = prettier.format(updatedContent, prettierOptions)

      await fs.writeFile(outPath, formattedContent)
    }),
  )
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})
