{
  "Basic": "import { ChevronDownIcon } from 'lucide-react'\nimport { Portal, Select } from '@ark-ui/react'\n\nexport const Basic = () => {\n  const items = ['React', 'Solid', 'Vue']\n  return (\n    <Select.Root items={items}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n          <Select.Indicator>\n            <ChevronDownIcon />\n          </Select.Indicator>\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel htmlFor=\"framework\">Frameworks</Select.ItemGroupLabel>\n              {items.map((item) => (\n                <Select.Item key={item} item={item}>\n                  <Select.ItemText>{item}</Select.ItemText>\n                  <Select.ItemIndicator>✓</Select.ItemIndicator>\n                </Select.Item>\n              ))}\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Advanced": "import { ChevronDownIcon } from 'lucide-react'\nimport { Portal, Select } from '@ark-ui/react'\n\nexport const Advanced = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n  return (\n    <Select.Root items={items}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n          <Select.Indicator>\n            <ChevronDownIcon />\n          </Select.Indicator>\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel htmlFor=\"framework\">Frameworks</Select.ItemGroupLabel>\n              {items.map((item) => (\n                <Select.Item key={item.value} item={item}>\n                  <Select.ItemText>{item.label}</Select.ItemText>\n                  <Select.ItemIndicator>✓</Select.ItemIndicator>\n                </Select.Item>\n              ))}\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Multiple": "import { ChevronDownIcon } from 'lucide-react'\nimport { Portal, Select } from '@ark-ui/react'\n\nexport const Multiple = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n  return (\n    <Select.Root items={items} multiple>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n          <Select.Indicator>\n            <ChevronDownIcon />\n          </Select.Indicator>\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel htmlFor=\"framework\">Frameworks</Select.ItemGroupLabel>\n              {items.map((item) => (\n                <Select.Item key={item.value} item={item}>\n                  <Select.ItemText>{item.label}</Select.ItemText>\n                  <Select.ItemIndicator>✓</Select.ItemIndicator>\n                </Select.Item>\n              ))}\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Controlled": "import { ChevronDownIcon } from 'lucide-react'\nimport { useState } from 'react'\nimport { Portal, Select } from '@ark-ui/react'\n\nexport const Controlled = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const [_, setSelectedItems] = useState<Item[]>([])\n\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n\n  return (\n    <Select.Root items={items} onValueChange={(e) => setSelectedItems(e.items)}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n          <Select.Indicator>\n            <ChevronDownIcon />\n          </Select.Indicator>\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel htmlFor=\"framework\">Frameworks</Select.ItemGroupLabel>\n              {items.map((item) => (\n                <Select.Item key={item.value} item={item}>\n                  <Select.ItemText>{item.label}</Select.ItemText>\n                  <Select.ItemIndicator>✓</Select.ItemIndicator>\n                </Select.Item>\n              ))}\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "FormLibrary": "import { ChevronsDownUpIcon } from 'lucide-react'\nimport { Controller, type SubmitHandler, useForm } from 'react-hook-form'\nimport { Select } from '@ark-ui/react'\n\nexport const FormLibrary = () => {\n  type Inputs = {\n    framework: string\n  }\n  const items = ['React', 'Solid', 'Vue']\n  const { control, handleSubmit } = useForm<Inputs>()\n\n  const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data)\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"framework\"\n        control={control}\n        render={({ field }) => (\n          <Select.Root onValueChange={(e) => field.onChange(e?.value)} items={items}>\n            <Select.Label>Framework</Select.Label>\n            <Select.Control>\n              <Select.Trigger>\n                <Select.ValueText placeholder=\"Select a Framework\" />\n                <Select.Indicator>\n                  <ChevronsDownUpIcon />\n                </Select.Indicator>\n              </Select.Trigger>\n              <Select.ClearTrigger>Clear</Select.ClearTrigger>\n            </Select.Control>\n            <Select.Positioner>\n              <Select.Content>\n                <Select.ItemGroup id=\"framework\">\n                  <Select.ItemGroupLabel htmlFor=\"framework\">Frameworks</Select.ItemGroupLabel>\n                  {items.map((item) => (\n                    <Select.Item key={item} item={item}>\n                      <Select.ItemText>{item}</Select.ItemText>\n                      <Select.ItemIndicator>✓</Select.ItemIndicator>\n                    </Select.Item>\n                  ))}\n                </Select.ItemGroup>\n              </Select.Content>\n            </Select.Positioner>\n          </Select.Root>\n        )}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n"
}
