{
  "BranchContent": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'ul'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "ref": { "type": "Element", "isRequired": false }
    }
  },
  "BranchControl": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "BranchIndentGuide": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "BranchIndicator": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Branch": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'li'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "BranchText": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'span'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "BranchTrigger": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'button'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Context": { "props": { "render": { "type": "Snippet<[UseTreeViewContext<any>]>", "isRequired": true } } },
  "ItemIndicator": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Item": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'li'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemText": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'span'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'h3'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "NodeCheckboxIndicator": {
    "props": {
      "fallback": { "type": "Snippet<[]>", "isRequired": false },
      "indeterminate": { "type": "Snippet<[]>", "isRequired": false }
    }
  },
  "NodeCheckbox": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'span'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "NodeContext": { "props": { "render": { "type": "Snippet<[UseTreeViewNodeContext]>", "isRequired": true } } },
  "NodeProvider": {
    "props": {
      "indexPath": { "type": "number[]", "isRequired": true },
      "node": { "type": "NonNullable<T>", "isRequired": false }
    }
  },
  "Root": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "checkedValue": { "type": "string[]", "isRequired": false, "description": "The controlled checked node value" },
      "collection": { "type": "TreeCollection<T>", "isRequired": false, "description": "The tree collection data" },
      "defaultCheckedValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial checked node value when rendered.\nUse when you don't need to control the checked node value."
      },
      "defaultExpandedValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial expanded node ids when rendered.\nUse when you don't need to control the expanded node value."
      },
      "defaultFocusedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The initial focused node value when rendered.\nUse when you don't need to control the focused node value."
      },
      "defaultSelectedValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial selected node value when rendered.\nUse when you don't need to control the selected node value."
      },
      "expandedValue": { "type": "string[]", "isRequired": false, "description": "The controlled expanded node ids" },
      "expandOnClick": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether clicking on a branch should open it or not"
      },
      "focusedValue": { "type": "string", "isRequired": false, "description": "The value of the focused node" },
      "id": { "type": "string", "isRequired": false, "description": "The unique identifier of the machine." },
      "ids": {
        "type": "Partial<{ root: string; tree: string; label: string; node(value: string): string }>",
        "isRequired": false,
        "description": "The ids of the tree elements. Useful for composition."
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "loadChildren": {
        "type": "(details: LoadChildrenDetails<T>) => Promise<T[]>",
        "isRequired": false,
        "description": "Function to load children for a node asynchronously.\nWhen provided, branches will wait for this promise to resolve before expanding."
      },
      "onCheckedChange": {
        "type": "(details: CheckedChangeDetails) => void",
        "isRequired": false,
        "description": "Called when the checked value changes"
      },
      "onExpandedChange": {
        "type": "(details: ExpandedChangeDetails<any>) => void",
        "isRequired": false,
        "description": "Called when the tree is opened or closed"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails<any>) => void",
        "isRequired": false,
        "description": "Called when the focused node changes"
      },
      "onLoadChildrenComplete": {
        "type": "(details: LoadChildrenCompleteDetails<T>) => void",
        "isRequired": false,
        "description": "Called when a node finishes loading children"
      },
      "onLoadChildrenError": {
        "type": "(details: LoadChildrenErrorDetails<T>) => void",
        "isRequired": false,
        "description": "Called when loading children fails for one or more nodes"
      },
      "onSelectionChange": {
        "type": "(details: SelectionChangeDetails<any>) => void",
        "isRequired": false,
        "description": "Called when the selection changes"
      },
      "selectedValue": { "type": "string[]", "isRequired": false, "description": "The controlled selected node value" },
      "selectionMode": {
        "type": "'multiple' | 'single'",
        "defaultValue": "\"single\"",
        "isRequired": false,
        "description": "Whether the tree supports multiple selection\n- \"single\": only one node can be selected\n- \"multiple\": multiple nodes can be selected"
      },
      "typeahead": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the tree supports typeahead search"
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "UseTreeViewReturn<T>", "isRequired": true },
      "asChild": {
        "type": "Snippet<[PropsFn<'div'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Tree": {
    "props": {
      "asChild": {
        "type": "Snippet<[PropsFn<'ul'>]>",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
