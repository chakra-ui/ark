{
  "ErrorText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "HelperText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Legend": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'legend'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'fieldset'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "Indicates whether the fieldset is invalid."
      }
    }
  },
  "RootProvider": {
    "props": {
      "value": {
        "type": "Accessor<{ refs: { rootRef: HTMLFieldSetElement; }; disabled: boolean; invalid: boolean; getRootProps: () => { disabled: boolean; 'data-disabled': Booleanish; 'data-invalid': Booleanish; 'aria-describedby': string; \"data-scope\": string; \"data-part\": string; }; getLegendProps: () => { ...; }; getHelperTextProps: () =...",
        "isRequired": true
      },
      "asChild": {
        "type": "(props: ParentProps<'fieldset'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
