{
  "ActionTrigger": {
    "props": {
      "action": { "type": "StepAction", "isRequired": true },
      "asChild": {
        "type": "(props: ParentProps<'button'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Arrow": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ArrowTip": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Backdrop": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "CloseTrigger": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'button'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Content": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Control": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Description": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Positioner": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ProgressText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "props": {
      "tour": { "type": "UseTourReturn", "isRequired": true },
      "immediate": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "isRequired": false,
        "description": "Function called when the animation ends in the closed state"
      },
      "present": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the node is present (controlled by the user)"
      },
      "skipAnimationOnMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to allow the initial presence animation."
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Spotlight": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Title": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'h2'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
