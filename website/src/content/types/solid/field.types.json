{
  "ErrorText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "HelperText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Input": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'input'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'label'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "RequiredIndicator": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "fallback": { "type": "number | boolean | Node | ArrayElement | (string & {})", "isRequired": false }
    }
  },
  "Root": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Indicates whether the field is disabled." },
      "ids": { "type": "ElementIds", "isRequired": false, "description": "The ids of the field parts." },
      "invalid": { "type": "boolean", "isRequired": false, "description": "Indicates whether the field is invalid." },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Indicates whether the field is read-only."
      },
      "required": { "type": "boolean", "isRequired": false, "description": "Indicates whether the field is required." }
    }
  },
  "RootProvider": {
    "props": {
      "value": {
        "type": "Accessor<{ ariaDescribedby: string; ids: { control: string; label: string; errorText: string; helperText: string; }; refs: { rootRef: Setter<HTMLDivElement | undefined>; }; ... 11 more ...; getRequiredIndicatorProps: () => { ...; }; }>",
        "isRequired": true
      },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Select": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'select'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Textarea": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'textarea'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "autoresize": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether the textarea should autoresize"
      }
    }
  }
}
