{
  "Control": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "HiddenInput": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'input'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'label'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "MarkerGroup": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Marker": {
    "props": {
      "value": { "type": "number", "isRequired": true, "description": "The value of the marker" },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "defaultValue": {
        "type": "number",
        "defaultValue": "0",
        "isRequired": false,
        "description": "The initial value of the slider.\nUse when you don't need to control the value of the slider."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the slider is disabled." },
      "ids": {
        "type": "Partial<{ root: string; thumb: string; hiddenInput: string; control: string; valueText: string }>",
        "isRequired": false,
        "description": "The ids of the elements in the machine.\nUseful for composition."
      },
      "invalid": { "type": "boolean", "isRequired": false, "description": "Whether the slider is invalid." },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name of the slider. Useful for form submission."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "The callback function for when the value changes."
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "The callback function for when the value changes ends."
      },
      "readOnly": { "type": "boolean", "isRequired": false, "description": "Whether the slider is read-only." },
      "step": {
        "type": "number",
        "defaultValue": "1",
        "isRequired": false,
        "description": "The step value for the slider."
      },
      "value": { "type": "number", "isRequired": false, "description": "The value of the slider." }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "UseAngleSliderReturn", "isRequired": true },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Thumb": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ValueText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
