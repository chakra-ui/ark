{
  "ClearTrigger": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'button'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Control": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "HiddenInput": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'input'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Input": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'input'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemDeleteTrigger": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'button'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemInput": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'input'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemPreview": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Item": {
    "props": {
      "index": { "type": "string | number", "isRequired": true },
      "value": { "type": "string", "isRequired": true },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "disabled": { "type": "boolean", "isRequired": false }
    }
  },
  "ItemText": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'span'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "(props: ParentProps<'label'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "props": {
      "addOnPaste": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to add a tag when you paste values into the tag input"
      },
      "allowOverflow": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
      },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "autoFocus": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the input should be auto-focused"
      },
      "blurBehavior": {
        "type": "'clear' | 'add'",
        "isRequired": false,
        "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"clear\"`: clear the input value"
      },
      "defaultValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial value of the tags input when it is first rendered.\nUse when you do not need to control the state of the tags input."
      },
      "delimiter": {
        "type": "string | RegExp",
        "defaultValue": "\",\"",
        "isRequired": false,
        "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the tags input should be disabled"
      },
      "editable": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether a tag can be edited after creation, by presing `Enter` or double clicking."
      },
      "form": {
        "type": "string",
        "isRequired": false,
        "description": "The associate form of the underlying input element."
      },
      "ids": {
        "type": "Partial<{\n  root: string\n  input: string\n  clearBtn: string\n  label: string\n  control: string\n  item(opts: ItemProps): string\n  itemDeleteTrigger(opts: ItemProps): string\n  itemInput(opts: ItemProps): string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the tags input. Useful for composition."
      },
      "inputValue": {
        "type": "string",
        "isRequired": false,
        "description": "The tag input's value"
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the tags input is invalid"
      },
      "max": {
        "type": "number",
        "defaultValue": "Infinity",
        "isRequired": false,
        "description": "The max number of tags"
      },
      "maxLength": {
        "type": "number",
        "isRequired": false,
        "description": "The max length of the input."
      },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name attribute for the input. Useful for form submissions"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the focus is moved outside the component"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails) => void",
        "isRequired": false,
        "description": "Callback fired when a tag is highlighted by pointer or keyboard navigation"
      },
      "onInputValueChange": {
        "type": "(details: InputValueChangeDetails) => void",
        "isRequired": false,
        "description": "Callback fired when the input value is updated"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when an interaction happens outside the component"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "isRequired": false,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "isRequired": false,
        "description": "Callback fired when the tag values is updated"
      },
      "onValueInvalid": {
        "type": "(details: ValidityChangeDetails) => void",
        "isRequired": false,
        "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
      },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the tags input should be read-only"
      },
      "translations": {
        "type": "IntlTranslations",
        "isRequired": false,
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "validate": {
        "type": "(details: ValidateArgs) => boolean",
        "isRequired": false,
        "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
      },
      "value": { "type": "string[]", "isRequired": false, "description": "The tag values" }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "UseTagsInputReturn", "isRequired": true },
      "asChild": {
        "type": "(props: ParentProps<'div'>) => Element",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
