{
  "Area": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "CancelTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Control": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "EditTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Input": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Label": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Preview": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Root": {
    "emits": {
      "editChange": {
        "type": "[details: EditChangeDetails]",
        "isRequired": true,
        "description": "Function to call when the edit mode changes."
      },
      "focusOutside": {
        "type": "[event: FocusOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the focus is moved outside the component"
      },
      "interactOutside": {
        "type": "[event: InteractOutsideEvent]",
        "isRequired": true,
        "description": "Function called when an interaction happens outside the component"
      },
      "pointerDownOutside": {
        "type": "[event: PointerDownOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "update:edit": {
        "type": "[edit: boolean]",
        "isRequired": true,
        "description": "Event handler called when the edit state of the editable changes."
      },
      "update:modelValue": {
        "type": "[value: string]",
        "isRequired": true,
        "description": "The callback fired when the model value changes."
      },
      "valueChange": {
        "type": "[details: ValueChangeDetails]",
        "isRequired": true,
        "description": "Function to call when the value changes."
      },
      "valueCommit": {
        "type": "[details: ValueChangeDetails]",
        "isRequired": true,
        "description": "Function to call when the value is committed."
      },
      "valueRevert": {
        "type": "[details: ValueChangeDetails]",
        "isRequired": true,
        "description": "Function to call when the value is reverted."
      }
    },
    "props": {
      "activationMode": {
        "type": "ActivationMode",
        "defaultValue": "\"focus\"",
        "isRequired": false,
        "description": "The activation mode for the preview element.\n\n- \"focus\" - Enter edit mode when the preview is focused\n- \"dblclick\" - Enter edit mode when the preview is double-clicked\n- \"click\" - Enter edit mode when the preview is clicked"
      },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "autoResize": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the editable should auto-resize to fit the content."
      },
      "defaultEdit": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the editable is in edit mode by default."
      },
      "defaultValue": {
        "type": "string",
        "isRequired": false,
        "description": "The initial value of the editable when rendered.\nUse when you don't need to control the value of the editable."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the editable is disabled." },
      "edit": { "type": "boolean", "isRequired": false, "description": "Whether the editable is in edit mode." },
      "finalFocusEl": {
        "type": "() => HTMLElement | null",
        "isRequired": false,
        "description": "The element to receive focus when the editable is closed."
      },
      "form": { "type": "string", "isRequired": false, "description": "The associate form of the underlying input." },
      "id": { "type": "string", "isRequired": false, "description": "The unique identifier of the machine." },
      "ids": {
        "type": "Partial<{\n  root: string\n  area: string\n  label: string\n  preview: string\n  input: string\n  control: string\n  submitTrigger: string\n  cancelTrigger: string\n  editTrigger: string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the editable. Useful for composition."
      },
      "invalid": { "type": "boolean", "isRequired": false, "description": "Whether the input's value is invalid." },
      "maxLength": {
        "type": "number",
        "isRequired": false,
        "description": "The maximum number of characters allowed in the editable"
      },
      "modelValue": { "type": "string", "isRequired": false, "description": "The v-model value of the editable" },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The name attribute of the editable component. Used for form submission."
      },
      "placeholder": {
        "type": "string | { edit: string; preview: string }",
        "isRequired": false,
        "description": "The placeholder text for the editable."
      },
      "readOnly": { "type": "boolean", "isRequired": false, "description": "Whether the editable is read-only." },
      "required": { "type": "boolean", "isRequired": false, "description": "Whether the editable is required." },
      "selectOnFocus": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether to select the text in the input when it is focused."
      },
      "submitMode": {
        "type": "SubmitMode",
        "defaultValue": "\"both\"",
        "isRequired": false,
        "description": "The action that triggers submit in the edit mode:\n\n- \"enter\" - Trigger submit when the enter key is pressed\n- \"blur\" - Trigger submit when the editable is blurred\n- \"none\" - No action will trigger submit. You need to use the submit button\n- \"both\" - Pressing `Enter` and blurring the input will trigger submit"
      },
      "translations": {
        "type": "IntlTranslations",
        "isRequired": false,
        "description": "The translations for the editable."
      }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "EditableApi<PropTypes>", "isRequired": true },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "SubmitTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
