{
  "Arrow": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ArrowTip": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "CheckboxItem": {
    "emits": { "update:checked": { "type": "[value: boolean]", "isRequired": true } },
    "props": {
      "checked": { "type": "boolean", "isRequired": true, "description": "Whether the option is checked" },
      "value": { "type": "string", "isRequired": true, "description": "The value of the option" },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the menu should be closed when the option is selected."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the menu item is disabled" },
      "valueText": {
        "type": "string",
        "isRequired": false,
        "description": "The textual value of the option. Used in typeahead navigation of the menu.\nIf not provided, the text content of the menu item will be used."
      }
    }
  },
  "Content": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ContextTrigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Indicator": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemGroupLabel": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "ItemGroup": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The `id` of the element that provides accessibility label to the option group"
      }
    }
  },
  "ItemIndicator": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Item": {
    "props": {
      "value": { "type": "string", "isRequired": true, "description": "The unique value of the menu item option." },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the menu should be closed when the option is selected."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the menu item is disabled" },
      "valueText": {
        "type": "string",
        "isRequired": false,
        "description": "The textual value of the option. Used in typeahead navigation of the menu.\nIf not provided, the text content of the menu item will be used."
      }
    }
  },
  "ItemText": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Positioner": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "RadioItemGroup": {
    "emits": { "update:modelValue": { "type": "[value: string]", "isRequired": true } },
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "id": { "type": "string", "isRequired": false },
      "modelValue": { "type": "string", "isRequired": false }
    }
  },
  "RadioItem": {
    "props": {
      "value": { "type": "string", "isRequired": true, "description": "The value of the option" },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the menu should be closed when the option is selected."
      },
      "disabled": { "type": "boolean", "isRequired": false, "description": "Whether the menu item is disabled" },
      "valueText": {
        "type": "string",
        "isRequired": false,
        "description": "The textual value of the option. Used in typeahead navigation of the menu.\nIf not provided, the text content of the menu item will be used."
      }
    }
  },
  "Root": {
    "emits": {
      "escapeKeyDown": {
        "type": "[event: KeyboardEvent]",
        "isRequired": true,
        "description": "Function called when the escape key is pressed"
      },
      "focusOutside": {
        "type": "[event: FocusOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the focus is moved outside the component"
      },
      "highlightChange": {
        "type": "[details: HighlightChangeDetails]",
        "isRequired": true,
        "description": "Function called when the highlighted menu item changes."
      },
      "interactOutside": {
        "type": "[event: InteractOutsideEvent]",
        "isRequired": true,
        "description": "Function called when an interaction happens outside the component"
      },
      "openChange": {
        "type": "[details: OpenChangeDetails]",
        "isRequired": true,
        "description": "Function called when the menu opens or closes"
      },
      "pointerDownOutside": {
        "type": "[event: PointerDownOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "requestDismiss": {
        "type": "[\n  event: CustomEvent<{\n    originalLayer: HTMLElement\n    targetLayer: HTMLElement | undefined\n    originalIndex: number\n    targetIndex: number\n  }>,\n]",
        "isRequired": true,
        "description": "Function called when this layer is closed due to a parent layer being closed"
      },
      "select": {
        "type": "[details: SelectionDetails]",
        "isRequired": true,
        "description": "Function called when a menu item is selected."
      },
      "update:highlightedValue": {
        "type": "[highlightedValue: string | null]",
        "isRequired": true,
        "description": "Function called when the highlighted menu item changes."
      },
      "update:open": {
        "type": "[open: boolean]",
        "isRequired": true,
        "description": "Function called when the menu is opened or closed."
      }
    },
    "props": {
      "anchorPoint": {
        "type": "Point",
        "isRequired": false,
        "description": "The positioning point for the menu. Can be set by the context menu trigger or the button trigger."
      },
      "aria-label": { "type": "string", "isRequired": false, "description": "The accessibility label for the menu" },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "closeOnSelect": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether to close the menu when an option is selected"
      },
      "composite": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the menu is a composed with other composite widgets like a combobox or tabs"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The initial highlighted value of the menu item when rendered.\nUse when you don't need to control the highlighted value of the menu item."
      },
      "defaultOpen": {
        "type": "boolean",
        "isRequired": false,
        "description": "The initial open state of the menu when rendered.\nUse when you don't need to control the open state of the menu."
      },
      "highlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The controlled highlighted value of the menu item."
      },
      "id": { "type": "string", "isRequired": false, "description": "The unique identifier of the machine." },
      "ids": {
        "type": "Partial<{\n  trigger: string\n  contextTrigger: string\n  content: string\n  groupLabel(id: string): string\n  group(id: string): string\n  positioner: string\n  arrow: string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the menu. Useful for composition."
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "loopFocus": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to loop the keyboard navigation."
      },
      "navigate": {
        "type": "(details: NavigateDetails) => void",
        "isRequired": false,
        "description": "Function to navigate to the selected item if it's an anchor element"
      },
      "open": { "type": "boolean", "isRequired": false, "description": "The controlled open state of the menu" },
      "positioning": {
        "type": "PositioningOptions",
        "isRequired": false,
        "description": "The options used to dynamically position the menu"
      },
      "typeahead": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the pressing printable characters should trigger typeahead navigation"
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "RootProvider": {
    "props": {
      "value": { "type": "UseMenuReturn", "isRequired": true },
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Separator": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "TriggerItem": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  },
  "Trigger": {
    "props": {
      "asChild": {
        "type": "boolean",
        "isRequired": false,
        "description": "Use the provided child element as the default rendered element, combining their props and behavior."
      }
    }
  }
}
