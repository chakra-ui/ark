{
  "ClearTrigger": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Content": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Control": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Input": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "ItemGroupLabel": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "ItemGroup": {
    "props": {
      "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
      "id": { "type": "string", "isRequired": false }
    }
  },
  "ItemIndicator": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Item": {
    "props": {
      "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
      "item": { "type": "any", "isRequired": false, "description": "The item to render" },
      "persistFocus": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether hovering outside should clear the highlighted state"
      }
    }
  },
  "ItemText": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Label": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Positioner": {
    "props": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } }
  },
  "Root": {
    "emits": {
      "focusOutside": {
        "type": "[event: FocusOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the focus is moved outside the component"
      },
      "highlightChange": {
        "type": "[details: HighlightChangeDetails<CollectionItem>]",
        "isRequired": true,
        "description": "Function called when an item is highlighted using the pointer\nor keyboard navigation."
      },
      "inputValueChange": {
        "type": "[details: InputValueChangeDetails]",
        "isRequired": true,
        "description": "Function called when the input's value changes"
      },
      "interactOutside": {
        "type": "[event: InteractOutsideEvent]",
        "isRequired": true,
        "description": "Function called when an interaction happens outside the component"
      },
      "openChange": {
        "type": "[details: OpenChangeDetails]",
        "isRequired": true,
        "description": "Function called when the popup is opened"
      },
      "pointerDownOutside": {
        "type": "[event: PointerDownOutsideEvent]",
        "isRequired": true,
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "update:modelValue": {
        "type": "[value: string[]]",
        "isRequired": true,
        "description": "The callback fired when the model value changes."
      },
      "update:open": {
        "type": "[open: boolean]",
        "isRequired": true,
        "description": "Event handler called when the open state of the combobox changes."
      },
      "valueChange": {
        "type": "[details: ValueChangeDetails<CollectionItem>]",
        "isRequired": true,
        "description": "Function called when a new item is selected"
      }
    },
    "props": {
      "items": {
        "type": "CollectionItem[] | readonly CollectionItem[]",
        "isRequired": true,
        "description": "The options of the select"
      },
      "allowCustomValue": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to allow typing custom values in the input"
      },
      "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
      "autoFocus": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to autofocus the input on mount"
      },
      "closeOnSelect": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to close the combobox when an item is selected."
      },
      "composite": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether the combobox is a composed with other composite widgets like tabs"
      },
      "defaultOpen": {
        "type": "boolean",
        "isRequired": false,
        "description": "The initial open state of the combobox when it is first rendered.\nUse when you do not need to control its open state."
      },
      "defaultValue": {
        "type": "string[]",
        "isRequired": false,
        "description": "The initial value of the combobox when it is first rendered.\nUse when you do not need to control the state of the combobox."
      },
      "disabled": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the combobox is disabled"
      },
      "disableLayer": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to disable registering this a dismissable layer"
      },
      "form": {
        "type": "string",
        "isRequired": false,
        "description": "The associate form of the combobox."
      },
      "getSelectionValue": {
        "type": "(details: SelectionValueDetails<CollectionItem>) => string",
        "isRequired": false,
        "description": "Function to get the display value of the selected item"
      },
      "highlightedValue": {
        "type": "string",
        "isRequired": false,
        "description": "The active item's id. Used to set the `aria-activedescendant` attribute"
      },
      "id": {
        "type": "string",
        "isRequired": false,
        "description": "The unique identifier of the machine."
      },
      "ids": {
        "type": "Partial<{\n  root: string\n  label: string\n  control: string\n  input: string\n  content: string\n  trigger: string\n  clearTrigger: string\n  item(id: string, index?: number | undefined): string\n  positioner: string\n  itemGroup(id: string | number): string\n  itemGroupLabel(id: string | number): string\n}>",
        "isRequired": false,
        "description": "The ids of the elements in the combobox. Useful for composition."
      },
      "inputBehavior": {
        "type": "'none' | 'autocomplete' | 'autohighlight'",
        "defaultValue": "\"none\"",
        "isRequired": false,
        "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused item is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the item and the input is updated"
      },
      "inputValue": {
        "type": "string",
        "isRequired": false,
        "description": "The current value of the combobox's input"
      },
      "invalid": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the combobox is required"
      },
      "isItemDisabled": {
        "type": "(item: CollectionItem) => boolean",
        "isRequired": false,
        "description": "Whether the item is disabled"
      },
      "itemToString": {
        "type": "(item: CollectionItem) => string",
        "isRequired": false,
        "description": "The label of the item"
      },
      "itemToValue": {
        "type": "(item: CollectionItem) => string",
        "isRequired": false,
        "description": "The value of the item"
      },
      "lazyMount": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to enable lazy mounting"
      },
      "loopFocus": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether to loop the keyboard navigation through the items"
      },
      "modelValue": { "type": "string[]", "isRequired": false },
      "multiple": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether to allow multiple selection"
      },
      "name": {
        "type": "string",
        "isRequired": false,
        "description": "The `name` attribute of the combobox's input. Useful for form submission"
      },
      "open": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the combobox is open"
      },
      "openOnChange": {
        "type": "boolean | ((details: InputValueChangeDetails) => boolean)",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether to show the combobox when the input value changes"
      },
      "openOnClick": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to open the combobox popup on initial click on the input"
      },
      "openOnKeyPress": {
        "type": "boolean",
        "defaultValue": "true",
        "isRequired": false,
        "description": "Whether to open the combobox on arrow key press"
      },
      "placeholder": {
        "type": "string",
        "isRequired": false,
        "description": "The placeholder text of the combobox's input"
      },
      "positioning": {
        "type": "PositioningOptions",
        "isRequired": false,
        "description": "The positioning options to dynamically position the menu"
      },
      "readOnly": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
      },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "isRequired": false,
        "description": "Function to scroll to a specific index"
      },
      "selectionBehavior": {
        "type": "'clear' | 'replace' | 'preserve'",
        "defaultValue": "\"replace\"",
        "isRequired": false,
        "description": "The behavior of the combobox input when an item is selected\n\n- `replace`: The selected item string is set as the input value\n- `clear`: The input value is cleared\n- `preserve`: The input value is preserved"
      },
      "translations": {
        "type": "IntlTranslations",
        "isRequired": false,
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "unmountOnExit": {
        "type": "boolean",
        "defaultValue": "false",
        "isRequired": false,
        "description": "Whether to unmount on exit."
      }
    }
  },
  "Trigger": {
    "props": {
      "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
      "focusable": {
        "type": "boolean",
        "isRequired": false,
        "description": "Whether the trigger is focusable"
      }
    }
  }
}
