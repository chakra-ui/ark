{
  "ClearTrigger": {
    "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false }
  },
  "Control": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "HiddenInput": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "Input": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "ItemDeleteTrigger": {
    "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false }
  },
  "ItemInput": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "ItemPreview": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "Item": {
    "index": { "type": "string | number", "isRequired": true },
    "value": { "type": "string", "isRequired": true },
    "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
    "disabled": { "type": "boolean", "isRequired": false }
  },
  "ItemText": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "Label": { "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false } },
  "RootEmits": {
    "focusOutside": {
      "type": "[event: FocusOutsideEvent]",
      "isRequired": true,
      "description": "Function called when the focus is moved outside the component"
    },
    "highlightChange": {
      "type": "[details: HighlightChangeDetails]",
      "isRequired": true,
      "description": "Callback fired when a tag is highlighted by pointer or keyboard navigation"
    },
    "inputValueChange": {
      "type": "[details: InputValueChangeDetails]",
      "isRequired": true,
      "description": "Callback fired when the input value is updated"
    },
    "interactOutside": {
      "type": "[event: InteractOutsideEvent]",
      "isRequired": true,
      "description": "Function called when an interaction happens outside the component"
    },
    "pointerDownOutside": {
      "type": "[event: PointerDownOutsideEvent]",
      "isRequired": true,
      "description": "Function called when the pointer is pressed down outside the component"
    },
    "update:modelValue": {
      "type": "[value: string[]]",
      "isRequired": true,
      "description": "The callback fired when the model value changes."
    },
    "valueChange": {
      "type": "[details: ValueChangeDetails]",
      "isRequired": true,
      "description": "Callback fired when the tag values is updated"
    },
    "valueInvalid": {
      "type": "[details: ValidityChangeDetails]",
      "isRequired": true,
      "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
    }
  },
  "Root": {
    "addOnPaste": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to add a tag when you paste values into the tag input"
    },
    "allowOverflow": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
    },
    "asChild": { "type": "boolean", "defaultValue": "false", "isRequired": false },
    "autoFocus": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the input should be auto-focused"
    },
    "blurBehavior": {
      "type": "'clear' | 'add'",
      "defaultValue": "\"none\"",
      "isRequired": false,
      "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"none\"`: do nothing\n- `\"clear\"`: clear the input value"
    },
    "defaultValue": {
      "type": "string[]",
      "isRequired": false,
      "description": "The initial value of the tags input when it is first rendered.\nUse when you do not need to control the state of the tags input."
    },
    "delimiter": {
      "type": "string | RegExp",
      "defaultValue": "\",\"",
      "isRequired": false,
      "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input"
    },
    "disabled": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be disabled"
    },
    "editable": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether a tag can be edited after creation.\nIf `true` and focus is on a tag, pressing `Enter`or double clicking will edit the tag."
    },
    "form": {
      "type": "string",
      "isRequired": false,
      "description": "The associate form of the underlying input element."
    },
    "id": {
      "type": "string",
      "isRequired": false,
      "description": "The unique identifier of the machine."
    },
    "ids": {
      "type": "Partial<{\n  root: string\n  input: string\n  clearBtn: string\n  label: string\n  control: string\n  item(opts: ItemProps): string\n  itemDeleteTrigger(opts: ItemProps): string\n  itemInput(opts: ItemProps): string\n}>",
      "isRequired": false,
      "description": "The ids of the elements in the tags input. Useful for composition."
    },
    "inputValue": { "type": "string", "isRequired": false, "description": "The tag input's value" },
    "invalid": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input is invalid"
    },
    "max": { "type": "number", "isRequired": false, "description": "The max number of tags" },
    "maxLength": {
      "type": "number",
      "isRequired": false,
      "description": "The max length of the input."
    },
    "modelValue": { "type": "string[]", "isRequired": false },
    "name": {
      "type": "string",
      "isRequired": false,
      "description": "The name attribute for the input. Useful for form submissions"
    },
    "readOnly": {
      "type": "boolean",
      "isRequired": false,
      "description": "Whether the tags input should be read-only"
    },
    "translations": {
      "type": "IntlTranslations",
      "isRequired": false,
      "description": "Specifies the localized strings that identifies the accessibility elements and their states"
    },
    "validate": {
      "type": "(details: ValidateArgs) => boolean",
      "isRequired": false,
      "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
    }
  }
}
